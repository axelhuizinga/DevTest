// Generated by Haxe 4.2.0-rc.1+076f153
(function ($hx_exports, $global) { "use strict";
$hx_exports["debug"] = $hx_exports["debug"] || {};
$hx_exports["debug"]["Out"] = $hx_exports["debug"]["Out"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var React_Component = require("react").Component;
var React = require("react");
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,__class__: haxe_ds_List
};
var App = function(props) {
	React_Component.call(this,props);
	App.config.api = "";
	App.flatpickr.localize(App.German);
	App._app = this;
	var ti = null;
	App.store = this.initStore(history_BrowserHistory.createBrowserHistory({ basename : "/", getUserConfirmation : state_CState.confirmTransition}));
	this.state = App.store.getState();
	haxe_Log.trace(Reflect.fields(this.state),{ fileName : "src/App.hx", lineNumber : 163, className : "App", methodName : "new"});
	haxe_Log.trace(App.devIP,{ fileName : "src/App.hx", lineNumber : 164, className : "App", methodName : "new"});
	this.tul = App.startHistoryListener(App.store,this.state.locationStore.history);
	window.onresize = function() {
		if(ti != null) {
			ti.stop();
		}
		ti = haxe_Timer.delay(function() {
			if(App.onResizeComponents.isEmpty()) {
				return;
			}
			var cpi_head = App.onResizeComponents.h;
			while(cpi_head != null) {
				var val = cpi_head.item;
				cpi_head = cpi_head.next;
				val.layOut();
			}
		},250);
	};
	haxe_Log.trace(Reflect.fields(this.state),{ fileName : "src/App.hx", lineNumber : 182, className : "App", methodName : "new"});
	if(this.state == null) {
		$global.console.error("Warning: component App is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["App"] = App;
App.__name__ = "App";
App._app = null;
App.browserHistory = null;
App.store = null;
App.startHistoryListener = function(store,history) {
	store.dispatch(redux_Action.map(action_AppAction.Location(action_LocationAction.InitHistory(history))));
	return history.listen(function(location,action) {
		haxe_Log.trace(location.pathname,{ fileName : "src/App.hx", lineNumber : 148, className : "App", methodName : "startHistoryListener"});
		store.dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ path : location.pathname, text : ""}))));
		store.dispatch(redux_Action.map(action_LocationAction.LocationChange(location)));
	});
};
App.edump = function(el) {
	debug_Out.dumpObject(el,{ fileName : "src/App.hx", lineNumber : 218, className : "App", methodName : "edump"});
	return "OK";
};
App.await = function(delay,check,cb) {
	var ti = null;
	ti = haxe_Timer.delay(function() {
		switch(check()) {
		case -1:
			break;
		case true:
			cb();
			break;
		default:
			App.await(delay,check,cb);
		}
	},delay);
	return ti;
};
App.initEState = function(init,comp) {
	var fS = new view_shared_io_FormApi(comp,init.sideMenu);
	var fS1 = init == null ? { } : init.sideMenu;
	var fS2 = { clean : true, formApi : fS, formBuilder : new view_shared_FormBuilder(comp), hasError : false, mounted : false, sideMenu : fS1};
	if(init != null) {
		var _g = 0;
		var _g1 = Reflect.fields(init);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			fS2[f] = Reflect.field(init,f);
		}
	}
	return fS2;
};
App.jsxDump = function(el) {
	debug_Out.dumpObject(el,{ fileName : "src/App.hx", lineNumber : 274, className : "App", methodName : "jsxDump"});
	return "OK";
};
App.queryString2 = function(params) {
	var _this = Reflect.fields(params);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var k = [_this[i]];
		var query;
		if(((Reflect.field(params,k[0])) instanceof Array)) {
			query = Reflect.field(params,k[0]).map((function(k) {
				return function(val) {
					encodeURIComponent(k[0]);
					val.urlEncode();
				};
			})(k)).join("&");
		} else {
			var query1 = encodeURIComponent(k[0]) + "=";
			var s = Reflect.field(params,k[0]);
			query = query1 + encodeURIComponent(s);
		}
		result[i] = query;
	}
	var query = result.join("&");
	haxe_Log.trace(query,{ fileName : "src/App.hx", lineNumber : 293, className : "App", methodName : "queryString2"});
	return query;
};
App.__super__ = React_Component;
App.prototype = $extend(React_Component.prototype,{
	globalState: null
	,tul: null
	,initStore: function(history) {
		var userStore = new store_UserStore();
		haxe_Log.trace(Reflect.fields(userStore),{ fileName : "src/App.hx", lineNumber : 94, className : "App", methodName : "initStore"});
		var appWare = new store_AppStore();
		var locationStore = new store_LocationStore(history);
		var rootReducer = redux_Redux.combineReducers({ config : redux_StoreBuilder.mapReducer(action_ConfigAction,new store_ConfigStore(App.config)), dataStore : redux_StoreBuilder.mapReducer(action_DataAction,new store_DataStore()), locationStore : redux_StoreBuilder.mapReducer(action_LocationAction,locationStore), status : redux_StoreBuilder.mapReducer(action_StatusAction,new store_StatusStore())});
		haxe_Log.trace(rootReducer,{ fileName : "src/App.hx", lineNumber : 108, className : "App", methodName : "initStore"});
		return redux_StoreBuilder.createStore(rootReducer,null,redux_Redux.applyMiddleware(redux_StoreBuilder.mapMiddleware(redux_thunk_Thunk,new redux_thunk_ThunkMiddleware()),redux_StoreBuilder.mapMiddleware(action_AppAction,appWare),redux_StoreBuilder.mapMiddleware(action_LocationAction,locationStore)));
	}
	,loadFromLocalStorage: function() {
		try {
			var sState = js_Browser.getLocalStorage().getItem("state");
			if(sState == null) {
				return { };
			}
			return haxe_Unserializer.run(sState);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "src/App.hx", lineNumber : 126, className : "App", methodName : "loadFromLocalStorage"});
			return { };
		}
	}
	,saveToLocalStorage: function() {
		try {
			js_Browser.getLocalStorage().setItem("state",haxe_Serializer.run(App.store.getState().dataStore));
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "src/App.hx", lineNumber : 138, className : "App", methodName : "saveToLocalStorage"});
		}
	}
	,gGet: function(key) {
		haxe_Log.trace(key,{ fileName : "src/App.hx", lineNumber : 187, className : "App", methodName : "gGet"});
		return this.globalState.h[key];
	}
	,gSet: function(key,val) {
		this.globalState.h[key] = val;
	}
	,componentDidMount: function() {
		haxe_Log.trace("yeah",{ fileName : "src/App.hx", lineNumber : 199, className : "App", methodName : "componentDidMount"});
	}
	,componentDidCatch: function(error,info) {
		haxe_Log.trace(error,{ fileName : "src/App.hx", lineNumber : 204, className : "App", methodName : "componentDidCatch"});
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `App`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
		haxe_Log.trace("...",{ fileName : "src/App.hx", lineNumber : 209, className : "App", methodName : "componentDidUpdate"});
	}
	,componentWillUnmount: function() {
		this.tul();
	}
	,render: function() {
		var tmp = react_ReactType.fromComp(redux_react_Provider);
		var tmp1 = { store : App.store};
		var tmp2 = react_ReactType.fromComp(react_intl_comp_IntlProvider);
		var tmp3 = React.createElement(view_UiView._renderWrapper,{ });
		return React.createElement(tmp,tmp1,React.createElement(tmp2,{ locale : "de"},tmp3));
	}
	,setState: null
	,__class__: App
});
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
DateTools.getMonthDays = function(d) {
	var month = d.getMonth();
	var year = d.getFullYear();
	if(month != 1) {
		return DateTools.DAYS_OF_MONTH[month];
	}
	var isB = year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	if(isB) {
		return 29;
	} else {
		return 28;
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var Go = function() { };
$hxClasses["Go"] = Go;
Go.__name__ = "Go";
Go.main = function() {
	haxe_Log.trace = debug_Out._trace;
	haxe_Log.trace("hi :) " + Std.string(debug_Out.suspended),{ fileName : "src/Go.hx", lineNumber : 16, className : "Go", methodName : "main"});
	var t = new haxe_ds_IntMap();
	var _g = new haxe_ds_StringMap();
	_g.h["hello"] = "world";
	t.h[0] = _g;
	var _g = new haxe_ds_StringMap();
	_g.h["org"] = 666;
	t.h[1] = _g;
	haxe_Log.trace(Type.getInstanceFields(js_Boot.getClass(t)),{ fileName : "src/Go.hx", lineNumber : 20, className : "Go", methodName : "main"});
	haxe_Log.trace(t.remove(0),{ fileName : "src/Go.hx", lineNumber : 21, className : "Go", methodName : "main"});
	Go.render(Go.createRoot());
};
Go.createRoot = function() {
	var root = window.document.createElement("div");
	root.className = "rootBox";
	window.document.body.appendChild(root);
	return root;
};
Go.render = function(root) {
	var app = ReactDOM.render(React.createElement(react_ReactType.fromComp(App),{ }),root);
	haxe_Log.trace("GO",{ fileName : "src/Go.hx", lineNumber : 40, className : "Go", methodName : "render"});
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var JsxStaticInit_$_$ = function() { };
$hxClasses["JsxStaticInit__"] = JsxStaticInit_$_$;
JsxStaticInit_$_$.__name__ = "JsxStaticInit__";
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var Webpack = function() { };
$hxClasses["Webpack"] = Webpack;
Webpack.__name__ = "Webpack";
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var action_AppAction = $hxEnums["action.AppAction"] = { __ename__:"action.AppAction",__constructs__:null
	,ApplySubState: ($_=function(state) { return {_hx_index:0,state:state,__enum__:"action.AppAction",toString:$estr}; },$_._hx_name="ApplySubState",$_.__params__ = ["state"],$_)
	,AppWait: {_hx_name:"AppWait",_hx_index:1,__enum__:"action.AppAction",toString:$estr}
	,Config: ($_=function(action) { return {_hx_index:2,action:action,__enum__:"action.AppAction",toString:$estr}; },$_._hx_name="Config",$_.__params__ = ["action"],$_)
	,Data: ($_=function(action) { return {_hx_index:3,action:action,__enum__:"action.AppAction",toString:$estr}; },$_._hx_name="Data",$_.__params__ = ["action"],$_)
	,GlobalState: ($_=function(key,value) { return {_hx_index:4,key:key,value:value,__enum__:"action.AppAction",toString:$estr}; },$_._hx_name="GlobalState",$_.__params__ = ["key","value"],$_)
	,Location: ($_=function(action) { return {_hx_index:5,action:action,__enum__:"action.AppAction",toString:$estr}; },$_._hx_name="Location",$_.__params__ = ["action"],$_)
	,Status: ($_=function(action) { return {_hx_index:6,action:action,__enum__:"action.AppAction",toString:$estr}; },$_._hx_name="Status",$_.__params__ = ["action"],$_)
	,User: ($_=function(action) { return {_hx_index:7,action:action,__enum__:"action.AppAction",toString:$estr}; },$_._hx_name="User",$_.__params__ = ["action"],$_)
};
action_AppAction.__constructs__ = [action_AppAction.ApplySubState,action_AppAction.AppWait,action_AppAction.Config,action_AppAction.Data,action_AppAction.GlobalState,action_AppAction.Location,action_AppAction.Status,action_AppAction.User];
var action_ConfigAction = $hxEnums["action.ConfigAction"] = { __ename__:"action.ConfigAction",__constructs__:null
	,Loaded: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"action.ConfigAction",toString:$estr}; },$_._hx_name="Loaded",$_.__params__ = ["p"],$_)
	,SetLocale: ($_=function(locale) { return {_hx_index:1,locale:locale,__enum__:"action.ConfigAction",toString:$estr}; },$_._hx_name="SetLocale",$_.__params__ = ["locale"],$_)
	,SetTheme: ($_=function(color) { return {_hx_index:2,color:color,__enum__:"action.ConfigAction",toString:$estr}; },$_._hx_name="SetTheme",$_.__params__ = ["color"],$_)
};
action_ConfigAction.__constructs__ = [action_ConfigAction.Loaded,action_ConfigAction.SetLocale,action_ConfigAction.SetTheme];
var action_DataAction = $hxEnums["action.DataAction"] = { __ename__:"action.DataAction",__constructs__:null
	,Execute: ($_=function(dataAccess) { return {_hx_index:0,dataAccess:dataAccess,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="Execute",$_.__params__ = ["dataAccess"],$_)
	,Update: ($_=function(uData) { return {_hx_index:1,uData:uData,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="Update",$_.__params__ = ["uData"],$_)
	,Error: ($_=function(data) { return {_hx_index:2,data:data,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="Error",$_.__params__ = ["data"],$_)
	,ContactsLoaded: ($_=function(data) { return {_hx_index:3,data:data,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="ContactsLoaded",$_.__params__ = ["data"],$_)
	,Restore: {_hx_name:"Restore",_hx_index:4,__enum__:"action.DataAction",toString:$estr}
	,SelectAccounts: ($_=function(sData) { return {_hx_index:5,sData:sData,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="SelectAccounts",$_.__params__ = ["sData"],$_)
	,SelectActContacts: ($_=function(sData) { return {_hx_index:6,sData:sData,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="SelectActContacts",$_.__params__ = ["sData"],$_)
	,SelectContacts: ($_=function(sData) { return {_hx_index:7,sData:sData,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="SelectContacts",$_.__params__ = ["sData"],$_)
	,SelectDeals: ($_=function(sData) { return {_hx_index:8,sData:sData,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="SelectDeals",$_.__params__ = ["sData"],$_)
	,SelectBookings: ($_=function(sData) { return {_hx_index:9,sData:sData,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="SelectBookings",$_.__params__ = ["sData"],$_)
	,Sync: ($_=function(dataAccess) { return {_hx_index:10,dataAccess:dataAccess,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="Sync",$_.__params__ = ["dataAccess"],$_)
	,UpStore: ($_=function(sData) { return {_hx_index:11,sData:sData,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="UpStore",$_.__params__ = ["sData"],$_)
	,Unselect: ($_=function(id) { return {_hx_index:12,id:id,__enum__:"action.DataAction",toString:$estr}; },$_._hx_name="Unselect",$_.__params__ = ["id"],$_)
};
action_DataAction.__constructs__ = [action_DataAction.Execute,action_DataAction.Update,action_DataAction.Error,action_DataAction.ContactsLoaded,action_DataAction.Restore,action_DataAction.SelectAccounts,action_DataAction.SelectActContacts,action_DataAction.SelectContacts,action_DataAction.SelectDeals,action_DataAction.SelectBookings,action_DataAction.Sync,action_DataAction.UpStore,action_DataAction.Unselect];
var action_LocationAction = $hxEnums["action.LocationAction"] = { __ename__:"action.LocationAction",__constructs__:null
	,Pop: ($_=function(url,state) { return {_hx_index:0,url:url,state:state,__enum__:"action.LocationAction",toString:$estr}; },$_._hx_name="Pop",$_.__params__ = ["url","state"],$_)
	,Push: ($_=function(url,state) { return {_hx_index:1,url:url,state:state,__enum__:"action.LocationAction",toString:$estr}; },$_._hx_name="Push",$_.__params__ = ["url","state"],$_)
	,Replace: ($_=function(url,state) { return {_hx_index:2,url:url,state:state,__enum__:"action.LocationAction",toString:$estr}; },$_._hx_name="Replace",$_.__params__ = ["url","state"],$_)
	,Go: ($_=function(to) { return {_hx_index:3,to:to,__enum__:"action.LocationAction",toString:$estr}; },$_._hx_name="Go",$_.__params__ = ["to"],$_)
	,Back: {_hx_name:"Back",_hx_index:4,__enum__:"action.LocationAction",toString:$estr}
	,Forward: {_hx_name:"Forward",_hx_index:5,__enum__:"action.LocationAction",toString:$estr}
	,InitHistory: ($_=function(history) { return {_hx_index:6,history:history,__enum__:"action.LocationAction",toString:$estr}; },$_._hx_name="InitHistory",$_.__params__ = ["history"],$_)
	,LocationChange: ($_=function(location) { return {_hx_index:7,location:location,__enum__:"action.LocationAction",toString:$estr}; },$_._hx_name="LocationChange",$_.__params__ = ["location"],$_)
};
action_LocationAction.__constructs__ = [action_LocationAction.Pop,action_LocationAction.Push,action_LocationAction.Replace,action_LocationAction.Go,action_LocationAction.Back,action_LocationAction.Forward,action_LocationAction.InitHistory,action_LocationAction.LocationChange];
var action_StatusAction = $hxEnums["action.StatusAction"] = { __ename__:"action.StatusAction",__constructs__:null
	,Update: ($_=function(status) { return {_hx_index:0,status:status,__enum__:"action.StatusAction",toString:$estr}; },$_._hx_name="Update",$_.__params__ = ["status"],$_)
};
action_StatusAction.__constructs__ = [action_StatusAction.Update];
var action_UserAction = $hxEnums["action.UserAction"] = { __ename__:"action.UserAction",__constructs__:null
	,LoginChange: ($_=function(state) { return {_hx_index:0,state:state,__enum__:"action.UserAction",toString:$estr}; },$_._hx_name="LoginChange",$_.__params__ = ["state"],$_)
	,LoginComplete: ($_=function(state) { return {_hx_index:1,state:state,__enum__:"action.UserAction",toString:$estr}; },$_._hx_name="LoginComplete",$_.__params__ = ["state"],$_)
	,LoginError: ($_=function(state) { return {_hx_index:2,state:state,__enum__:"action.UserAction",toString:$estr}; },$_._hx_name="LoginError",$_.__params__ = ["state"],$_)
	,LoginExpired: ($_=function(state) { return {_hx_index:3,state:state,__enum__:"action.UserAction",toString:$estr}; },$_._hx_name="LoginExpired",$_.__params__ = ["state"],$_)
	,LogOut: ($_=function(state) { return {_hx_index:4,state:state,__enum__:"action.UserAction",toString:$estr}; },$_._hx_name="LogOut",$_.__params__ = ["state"],$_)
	,LogOutComplete: ($_=function(state) { return {_hx_index:5,state:state,__enum__:"action.UserAction",toString:$estr}; },$_._hx_name="LogOutComplete",$_.__params__ = ["state"],$_)
	,LoginRequired: ($_=function(state) { return {_hx_index:6,state:state,__enum__:"action.UserAction",toString:$estr}; },$_._hx_name="LoginRequired",$_.__params__ = ["state"],$_)
};
action_UserAction.__constructs__ = [action_UserAction.LoginChange,action_UserAction.LoginComplete,action_UserAction.LoginError,action_UserAction.LoginExpired,action_UserAction.LogOut,action_UserAction.LogOutComplete,action_UserAction.LoginRequired];
var action_async_DBAccess = function() { };
$hxClasses["action.async.DBAccess"] = action_async_DBAccess;
action_async_DBAccess.__name__ = "action.async.DBAccess";
action_async_DBAccess.create = function() {
};
action_async_DBAccess.delete = function() {
};
action_async_DBAccess.get = function(props) {
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		haxe_Log.trace(props,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 47, className : "action.async.DBAccess", methodName : "get"});
		if(!props.userState.dbUser.online) {
			return dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"}))));
		}
		haxe_Log.trace("creating BinaryLoader " + Std.string(App.config.api),{ fileName : "src/action/async/DBAccess.hx", lineNumber : 56, className : "action.async.DBAccess", methodName : "get"});
		var bl = loader_BinaryLoader.create("" + Std.string(App.config.api),{ id : props.userState.dbUser.id, jwt : props.userState.dbUser.jwt, classPath : props.classPath, action : props.action, filter : props.filter, table : props.table, devIP : App.devIP},function(data) {
			haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/DBAccess.hx", lineNumber : 72, className : "action.async.DBAccess", methodName : "get"});
			haxe_Log.trace(data.dataRows.length,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 73, className : "action.async.DBAccess", methodName : "get"});
			if(data.dataRows.length > 0) {
				var h = data.dataErrors.h;
				var inlStringMapKeyIterator_h = h;
				var inlStringMapKeyIterator_keys = Object.keys(h);
				var inlStringMapKeyIterator_length = inlStringMapKeyIterator_keys.length;
				var inlStringMapKeyIterator_current = 0;
				if(inlStringMapKeyIterator_current >= inlStringMapKeyIterator_length) {
					haxe_Log.trace(data.dataRows,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 78, className : "action.async.DBAccess", methodName : "get"});
					var dispatch1 = dispatch;
					var _g = new haxe_ds_IntMap();
					var _g1 = 0;
					var _g2 = data.dataRows;
					while(_g1 < _g2.length) {
						var row = _g2[_g1];
						++_g1;
						_g.h[Std.parseInt(row.h["id"])] = row;
					}
					dispatch1(redux_Action.map(action_AppAction.Data(action_DataAction.SelectContacts(_g))));
					var dispatch1 = dispatch;
					var bl;
					switch("" + props.classPath + "." + props.action) {
					case "data.Contacts.get":
						bl = "Kontakt " + Std.string(props.filter.substr(3)) + " geladen";
						break;
					case "data.Contacts.update":
						bl = "Kontakt " + Std.string(props.filter.substr(3)) + " wurde gespeichert";
						break;
					default:
						bl = "Unbekannter Vorgang";
					}
					dispatch1(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "", text : bl}))));
					return;
				} else {
					dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : "" + data.dataErrors.h[props.action]}))));
					return;
				}
			} else {
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "warn", text : "Keine Daten für " + Std.string(props.filter.substr(3)) + " gefunden"}))));
				return;
			}
		});
		return null;
	});
};
action_async_DBAccess.execute = function(props) {
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		haxe_Log.trace(props,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 119, className : "action.async.DBAccess", methodName : "execute"});
		if(!props.userState.dbUser.online) {
			return dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"}))));
		}
		var params = { id : props.userState.dbUser.id, jwt : props.userState.dbUser.jwt, classPath : props.classPath, action : props.action, dataSource : haxe_Serializer.run(props.dataSource), devIP : App.devIP};
		if(props.table != null) {
			params.table = props.table;
		}
		var bL = loader_BinaryLoader.dbQuery("" + Std.string(App.config.api),params,function(data) {
			if(data.dataErrors != null) {
				haxe_Log.trace(data.dataErrors == null ? "null" : haxe_ds_StringMap.stringify(data.dataErrors.h),{ fileName : "src/action/async/DBAccess.hx", lineNumber : 149, className : "action.async.DBAccess", methodName : "execute"});
			}
			if(data.dataInfo != null && Object.prototype.hasOwnProperty.call(data.dataInfo.h,"dataSource")) {
				haxe_Log.trace(new haxe_Unserializer(data.dataInfo.h["dataSource"]).unserialize(),{ fileName : "src/action/async/DBAccess.hx", lineNumber : 151, className : "action.async.DBAccess", methodName : "execute"});
			}
			if(Object.prototype.hasOwnProperty.call(data.dataErrors.h,"lastError")) {
				dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ lastError : data.dataErrors.h["lastError"]}))));
				return;
			}
			var dispatch1 = dispatch;
			var bL;
			switch("" + props.classPath + "." + props.action) {
			case "data.Contacts.edit":
				bL = "Kontakt " + Std.string(props.dataSource.h["contacts"].h["filter"].substr(3)) + " geladen";
				break;
			case "data.Contacts.update":
				bL = "Kontakt " + Std.string(props.dataSource.h["contacts"].h["filter"].substr(3)) + " wurde gespeichert";
				break;
			default:
				bL = "Unbekannter Vorgang";
			}
			dispatch1(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "", text : bL}))));
		});
		return null;
	});
};
action_async_DBAccess.upload = function(param) {
	haxe_Log.trace(param.action,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 176, className : "action.async.DBAccess", methodName : "upload"});
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		haxe_Log.trace(param,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 178, className : "action.async.DBAccess", methodName : "upload"});
		return new Promise(function(resolve,reject) {
			if(!param.dbUser.online) {
				dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : param.dbUser, lastError : "Du musst dich neu anmelden!"}))));
				haxe_Log.trace("LoginError",{ fileName : "src/action/async/DBAccess.hx", lineNumber : 192, className : "action.async.DBAccess", methodName : "upload"});
				resolve(null);
			}
			var bL = loader_BinaryLoader.dbQuery("" + Std.string(App.config.api),param,function(data) {
				haxe_Log.trace(data,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 201, className : "action.async.DBAccess", methodName : "upload"});
				if(data.dataErrors != null) {
					haxe_Log.trace(data.dataErrors == null ? "null" : haxe_ds_StringMap.stringify(data.dataErrors.h),{ fileName : "src/action/async/DBAccess.hx", lineNumber : 203, className : "action.async.DBAccess", methodName : "upload"});
				}
				if(data.dataInfo != null && Object.prototype.hasOwnProperty.call(data.dataInfo.h,"dataSource")) {
					haxe_Log.trace(new haxe_Unserializer(data.dataInfo.h["dataSource"]).unserialize(),{ fileName : "src/action/async/DBAccess.hx", lineNumber : 205, className : "action.async.DBAccess", methodName : "upload"});
				}
				if(Object.prototype.hasOwnProperty.call(data.dataErrors.h,"lastError")) {
					dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ lastError : data.dataErrors.h["lastError"]}))));
					resolve(null);
				} else {
					dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "", text : param.resolveMessage == null ? "" : param.resolveMessage.success}))));
					resolve(data);
				}
			});
			haxe_Log.trace(bL,{ fileName : "src/action/async/DBAccess.hx", lineNumber : 223, className : "action.async.DBAccess", methodName : "upload"});
		});
	});
};
var action_async_LiveDataAccess = function() { };
$hxClasses["action.async.LiveDataAccess"] = action_async_LiveDataAccess;
action_async_LiveDataAccess.__name__ = "action.async.LiveDataAccess";
action_async_LiveDataAccess.create = function() {
};
action_async_LiveDataAccess.delete = function() {
};
action_async_LiveDataAccess.storeData = function(id,action) {
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		if(id == null) {
			return null;
		}
		var aState = getState();
		haxe_Log.trace(aState.dataStore.contactData,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 48, className : "action.async.LiveDataAccess", methodName : "storeData"});
		if(id == "Contacts") {
			if(action._hx_index == 4) {
				return dispatch(redux_Action.map(action_DataAction.Restore));
			} else {
				return null;
			}
		} else {
			return null;
		}
	});
};
action_async_LiveDataAccess.select = function(props) {
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		if(props.id == null) {
			return null;
		}
		var aState = getState();
		var tableRoot = view_shared_io_FormApi.getTableRoot(props.match);
		haxe_Log.trace(tableRoot,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 72, className : "action.async.LiveDataAccess", methodName : "select"});
		haxe_Log.trace(Reflect.fields(aState),{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 73, className : "action.async.LiveDataAccess", methodName : "select"});
		haxe_Log.trace(props.data,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 75, className : "action.async.LiveDataAccess", methodName : "select"});
		var sData = null;
		switch(tableRoot[1]) {
		case "Accounts":
			sData = aState.dataStore.accountData;
			sData = action_async_LiveDataAccess.selectType(props.id,props.data,sData,props.selectType);
			var aState1 = aState.locationStore.history;
			var tmp = "" + tableRoot[2] + "/" + view_shared_io_FormApi.params(shared_Utils.keysList(sData.keys()));
			aState1.push(tmp);
			return dispatch(redux_Action.map(action_DataAction.SelectAccounts(props.data)));
		case "Contacts":
			sData = aState.dataStore.contactData;
			haxe_Log.trace(Type.getInstanceFields(js_Boot.getClass(sData)),{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 87, className : "action.async.LiveDataAccess", methodName : "select"});
			sData = action_async_LiveDataAccess.selectType(props.id,props.data,sData,props.selectType);
			haxe_Log.trace("" + tableRoot[2] + "/" + view_shared_io_FormApi.params(shared_Utils.keysList(sData.keys())),{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 89, className : "action.async.LiveDataAccess", methodName : "select"});
			haxe_Log.trace(sData,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 90, className : "action.async.LiveDataAccess", methodName : "select"});
			var aState1 = aState.locationStore.history;
			var tmp = "" + tableRoot[2] + "#" + view_shared_io_FormApi.params(shared_Utils.keysList(sData.keys()));
			var tmp1 = "" + tableRoot[2] + "#" + view_shared_io_FormApi.params(shared_Utils.keysList(sData.keys()));
			aState1.push(tmp,{ activeContactUrl : tmp1});
			return dispatch(redux_Action.map(action_DataAction.SelectContacts(props.data)));
		case "Deals":
			sData = aState.dataStore.dealData;
			sData = action_async_LiveDataAccess.selectType(props.id,props.data,sData,props.selectType);
			haxe_Log.trace(sData,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 99, className : "action.async.LiveDataAccess", methodName : "select"});
			haxe_Log.trace("" + tableRoot[2] + "/" + view_shared_io_FormApi.params(shared_Utils.keysList(sData.keys())),{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 100, className : "action.async.LiveDataAccess", methodName : "select"});
			var aState1 = aState.locationStore.history;
			var tmp = "" + tableRoot[2] + "#" + view_shared_io_FormApi.params(shared_Utils.keysList(sData.keys()));
			var tmp1 = "" + tableRoot[2] + "#" + view_shared_io_FormApi.params(shared_Utils.keysList(sData.keys()));
			aState1.push(tmp,{ activeContactUrl : tmp1});
			return dispatch(redux_Action.map(action_DataAction.SelectDeals(props.data)));
		default:
			return null;
		}
	});
};
action_async_LiveDataAccess.selectType = function(id,data,sData,sT) {
	haxe_Log.trace(Type.getInstanceFields(js_Boot.getClass(sData)),{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 111, className : "action.async.LiveDataAccess", methodName : "selectType"});
	switch(sT) {
	case "All":
		sData = new haxe_ds_IntMap();
		var map = data;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var k = _g1_key;
			var v = _g1_value;
			sData.h[k] = v;
		}
		return sData;
	case "One":
		var _g = new haxe_ds_IntMap();
		_g.h[id] = data.h[id];
		return _g;
	case "Unselect":
		sData.remove(id);
		return sData;
	case "UnselectAll":
		sData = new haxe_ds_IntMap();
		return sData;
	default:
		haxe_Log.trace(data,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 129, className : "action.async.LiveDataAccess", methodName : "selectType"});
		sData = new haxe_ds_IntMap();
		sData.h[id] = data.h[id];
		return sData;
	}
};
action_async_LiveDataAccess.sSelect = function(props) {
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		if(props.id == null) {
			return null;
		}
		var aState = getState();
		var tableRoot = view_shared_io_FormApi.getTableRoot(props.match);
		haxe_Log.trace(tableRoot,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 143, className : "action.async.LiveDataAccess", methodName : "sSelect"});
		haxe_Log.trace(Reflect.fields(aState),{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 144, className : "action.async.LiveDataAccess", methodName : "sSelect"});
		haxe_Log.trace(props.data,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 146, className : "action.async.LiveDataAccess", methodName : "sSelect"});
		var sData = null;
		if(tableRoot[1] == "Imports") {
			sData = action_async_LiveDataAccess.sSelectType(props.id,props.data,sData,props.selectType);
			haxe_Log.trace(sData,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 176, className : "action.async.LiveDataAccess", methodName : "sSelect"});
			haxe_Log.trace("" + tableRoot[2] + "/" + view_shared_io_FormApi.sParams(shared_Utils.sKeysList(new haxe_ds__$StringMap_StringMapKeyIterator(sData.h))),{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 177, className : "action.async.LiveDataAccess", methodName : "sSelect"});
			var aState1 = aState.locationStore.history;
			var tmp = "" + tableRoot[2] + "#" + view_shared_io_FormApi.sParams(shared_Utils.sKeysList(new haxe_ds__$StringMap_StringMapKeyIterator(sData.h)));
			var tmp1 = "" + tableRoot[2] + "#" + view_shared_io_FormApi.sParams(shared_Utils.sKeysList(new haxe_ds__$StringMap_StringMapKeyIterator(sData.h)));
			aState1.push(tmp,{ activeContactUrl : tmp1});
			return dispatch(redux_Action.map(action_DataAction.SelectBookings(props.data)));
		} else {
			return null;
		}
	});
};
action_async_LiveDataAccess.sSelectType = function(id,data,sData,sT) {
	switch(sT) {
	case "All":
		sData = new haxe_ds_StringMap();
		var h = data.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var k = _g1_key;
			var v = _g1_value;
			sData.h[k] = v;
		}
		return sData;
	case "One":
		if(sData == null) {
			sData = new haxe_ds_StringMap();
		}
		sData.h[id] = data.h[id];
		return sData;
	case "Unselect":
		var key = id;
		if(Object.prototype.hasOwnProperty.call(sData.h,key)) {
			delete(sData.h[key]);
		}
		return sData;
	case "UnselectAll":
		sData = new haxe_ds_StringMap();
		return sData;
	default:
		haxe_Log.trace(data,{ fileName : "src/action/async/LiveDataAccess.hx", lineNumber : 207, className : "action.async.LiveDataAccess", methodName : "sSelectType"});
		sData = new haxe_ds_StringMap();
		sData.h[id] = data.h[id];
		return sData;
	}
};
var action_async_LivePBXSync = function() { };
$hxClasses["action.async.LivePBXSync"] = action_async_LivePBXSync;
action_async_LivePBXSync.__name__ = "action.async.LivePBXSync";
action_async_LivePBXSync.create = function() {
};
action_async_LivePBXSync.delete = function() {
};
action_async_LivePBXSync.importContacts = function(props) {
	haxe_Log.trace("" + props.table + " " + props.maxImport + " " + props.limit + " " + props.offset,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 51, className : "action.async.LivePBXSync", methodName : "importContacts"});
	return redux_Action.map(redux_thunk_Thunk.Action(function(dispatch,getState) {
		var aState = getState();
		haxe_Log.trace(props.offset,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 54, className : "action.async.LivePBXSync", methodName : "importContacts"});
		if(!props.userState.dbUser.online) {
			return dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"}))));
		}
		haxe_Log.trace("creating BinaryLoader " + Std.string(App.config.api),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 63, className : "action.async.LivePBXSync", methodName : "importContacts"});
		var bl = loader_BinaryLoader.dbQuery("" + Std.string(App.config.api),{ dbUser : props.userState.dbUser, classPath : props.classPath, action : props.action, extDB : true, action_id : props.action_id == null ? 0 : props.action_id, limit : props.limit, offset : props.offset, table : props.table, filter : props.filter, maxImport : props.maxImport == null ? 1000 : props.maxImport, devIP : App.devIP},function(data) {
			haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 81, className : "action.async.LivePBXSync", methodName : "importContacts"});
			haxe_Log.trace(data.dataRows.length,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 82, className : "action.async.LivePBXSync", methodName : "importContacts"});
			var h = data.dataErrors.h;
			var inlStringMapKeyIterator_h = h;
			var inlStringMapKeyIterator_keys = Object.keys(h);
			var inlStringMapKeyIterator_length = inlStringMapKeyIterator_keys.length;
			var inlStringMapKeyIterator_current = 0;
			if(inlStringMapKeyIterator_current < inlStringMapKeyIterator_length) {
				haxe_Log.trace(haxe_ds_StringMap.stringify(data.dataErrors.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 85, className : "action.async.LivePBXSync", methodName : "importContacts"});
				var h = data.dataErrors.h;
				var inlStringMapValueIterator_h = h;
				var inlStringMapValueIterator_keys = Object.keys(h);
				var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
				var inlStringMapValueIterator_current = 0;
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : inlStringMapValueIterator_h[inlStringMapValueIterator_keys[inlStringMapValueIterator_current++]]}))));
				return;
			}
			if(data.dataInfo.h["offset"] == null || data.dataInfo.h["offset"] == 0) {
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : "Fehler 0 " + props.classPath + " Aktualisiert"}))));
				return;
			} else {
				props.offset = Std.parseInt(data.dataInfo.h["offset"]);
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : " ", text : "" + props.offset + " Contacts von " + props.maxImport + " aktualisiert"}))));
				return;
			}
		});
		return null;
	}));
};
action_async_LivePBXSync.importBookingRequests = function(props) {
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		var aState = getState();
		haxe_Log.trace(props.offset,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 129, className : "action.async.LivePBXSync", methodName : "importBookingRequests"});
		if(!props.userState.dbUser.online) {
			return dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"}))));
		}
		haxe_Log.trace("creating BinaryLoader " + Std.string(App.config.api),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 138, className : "action.async.LivePBXSync", methodName : "importBookingRequests"});
		var bl = loader_BinaryLoader.create("" + Std.string(App.config.api),{ id : props.userState.dbUser.id, jwt : props.userState.dbUser.jwt, classPath : props.classPath, action : props.action, extDB : true, limit : props.limit, offset : props.offset, filter : props.filter, maxImport : props.maxImport == null ? 1000 : props.maxImport, devIP : App.devIP},function(data) {
			haxe_Log.trace(data,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 156, className : "action.async.LivePBXSync", methodName : "importBookingRequests"});
			haxe_Log.trace(data.dataRows.length,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 157, className : "action.async.LivePBXSync", methodName : "importBookingRequests"});
			var h = data.dataErrors.h;
			var inlStringMapKeyIterator_h = h;
			var inlStringMapKeyIterator_keys = Object.keys(h);
			var inlStringMapKeyIterator_length = inlStringMapKeyIterator_keys.length;
			var inlStringMapKeyIterator_current = 0;
			if(inlStringMapKeyIterator_current < inlStringMapKeyIterator_length) {
				var h = data.dataErrors.h;
				var inlStringMapValueIterator_h = h;
				var inlStringMapValueIterator_keys = Object.keys(h);
				var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
				var inlStringMapValueIterator_current = 0;
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : inlStringMapValueIterator_h[inlStringMapValueIterator_keys[inlStringMapValueIterator_current++]]}))));
				return;
			}
			haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 167, className : "action.async.LivePBXSync", methodName : "importBookingRequests"});
			if(data.dataInfo.h["offset"] == null) {
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : "Fehler 0 Buchungsanforderungen Aktualisiert"}))));
				return;
			}
			if(data.dataInfo.h["offset"] != null) {
				props.offset = Std.parseInt(data.dataInfo.h["offset"]);
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : " ", text : "" + props.offset + " Kontakte von " + props.maxImport + " aktualisiert"}))));
			}
			haxe_Log.trace("" + props.offset + " < " + props.maxImport,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 184, className : "action.async.LivePBXSync", methodName : "importBookingRequests"});
			if(props.offset < props.maxImport) {
				haxe_Log.trace("next loop:" + Std.string(props),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 187, className : "action.async.LivePBXSync", methodName : "importBookingRequests"});
				dispatch(action_async_LivePBXSync.importContacts(props));
				return;
			}
		});
		return null;
	});
};
action_async_LivePBXSync.mergeContacts = function(props) {
	haxe_Log.trace("" + props.maxImport + " " + props.limit + " " + props.offset,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 201, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		var aState = getState();
		haxe_Log.trace(props,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 204, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
		if(!props.userState.dbUser.online) {
			return dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"}))));
		}
		haxe_Log.trace("creating BinaryLoader " + Std.string(App.config.api),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 213, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
		var bl = loader_BinaryLoader.create("" + Std.string(App.config.api),{ dbUser : props.userState.dbUser, id : props.userState.dbUser.id, jwt : props.userState.dbUser.jwt, classPath : props.classPath, action : props.action, extDB : true, limit : props.limit, offset : props.offset, filter : props.filter, maxImport : props.maxImport == null ? 1000 : props.maxImport, devIP : App.devIP},function(data) {
			haxe_Log.trace(data,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 232, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
			haxe_Log.trace(data.dataRows.length,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 233, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
			var h = data.dataErrors.h;
			var inlStringMapKeyIterator_h = h;
			var inlStringMapKeyIterator_keys = Object.keys(h);
			var inlStringMapKeyIterator_length = inlStringMapKeyIterator_keys.length;
			var inlStringMapKeyIterator_current = 0;
			if(inlStringMapKeyIterator_current < inlStringMapKeyIterator_length) {
				var h = data.dataErrors.h;
				var inlStringMapValueIterator_h = h;
				var inlStringMapValueIterator_keys = Object.keys(h);
				var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
				var inlStringMapValueIterator_current = 0;
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : inlStringMapValueIterator_h[inlStringMapValueIterator_keys[inlStringMapValueIterator_current++]]}))));
				return;
			}
			haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 243, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
			if(data.dataInfo.h["offset"] == null) {
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : "Fehler 0 Kontakte Aktualisiert"}))));
				return;
			}
			if(data.dataInfo.h["offset"] != null) {
				props.offset = Std.parseInt(data.dataInfo.h["offset"]);
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "", text : "" + props.offset + " Kontakte von " + props.maxImport + " aktualisiert"}))));
			}
			haxe_Log.trace("" + props.offset + " < " + props.maxImport,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 260, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
			if(props.offset < props.maxImport) {
				haxe_Log.trace("next loop:" + Std.string(props),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 263, className : "action.async.LivePBXSync", methodName : "mergeContacts"});
				dispatch(action_async_LivePBXSync.importContacts(props));
				return;
			}
		});
		return null;
	});
};
action_async_LivePBXSync.checkAll = function(props) {
	haxe_Log.trace("" + props.table + " " + props.maxImport + " " + props.limit + " " + props.offset,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 278, className : "action.async.LivePBXSync", methodName : "checkAll"});
	return redux_Action.map(redux_thunk_Thunk.Action(function(dispatch,getState) {
		var aState = getState();
		haxe_Log.trace(props.offset,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 282, className : "action.async.LivePBXSync", methodName : "checkAll"});
		return new Promise(function(resolve,reject) {
			if(!props.userState.dbUser.online) {
				var reject1 = reject;
				var _g = new haxe_ds_StringMap();
				_g.h["LoginError"] = "Du musst dich neu anmelden!";
				reject1(shared_DbDataTools.create(_g));
				dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"}))));
				return;
			}
			haxe_Log.trace("creating BinaryLoader " + Std.string(App.config.api),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 293, className : "action.async.LivePBXSync", methodName : "checkAll"});
			var bl = loader_BinaryLoader.dbQuery(App.config.api,{ dbUser : props.userState.dbUser, classPath : props.classPath, action : props.action, extDB : true, limit : props.limit, offset : props.offset, onlyNew : props.onlyNew, table : props.table, filter : props.filter, maxImport : props.maxImport == null ? 1000 : props.maxImport, devIP : App.devIP},function(data) {
				haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 311, className : "action.async.LivePBXSync", methodName : "checkAll"});
				var h = data.dataErrors.h;
				var inlStringMapKeyIterator_h = h;
				var inlStringMapKeyIterator_keys = Object.keys(h);
				var inlStringMapKeyIterator_length = inlStringMapKeyIterator_keys.length;
				var inlStringMapKeyIterator_current = 0;
				if(inlStringMapKeyIterator_current < inlStringMapKeyIterator_length) {
					var h = data.dataErrors.h;
					var inlStringMapValueIterator_h = h;
					var inlStringMapValueIterator_keys = Object.keys(h);
					var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
					var inlStringMapValueIterator_current = 0;
					var err = inlStringMapValueIterator_h[inlStringMapValueIterator_keys[inlStringMapValueIterator_current++]];
					var reject1 = reject;
					var _g = new haxe_ds_StringMap();
					_g.h[props.classPath] = err;
					reject1(shared_DbDataTools.create(_g));
					dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : err}))));
					return;
				}
				haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 324, className : "action.async.LivePBXSync", methodName : "checkAll"});
				if(data.dataInfo.h["missing"] > 0 && data.dataInfo.h["got"] != data.dataInfo.h["missing"]) {
					resolve(data);
					haxe_Log.trace("...",{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 328, className : "action.async.LivePBXSync", methodName : "checkAll"});
					dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : "Fehler " + Std.string(data.dataInfo.h["got"]) + " von " + Std.string(data.dataInfo.h["missing"]) + " Aktualisiert"}))));
					return;
				}
				haxe_Log.trace("got:" + Std.parseInt(666),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 335, className : "action.async.LivePBXSync", methodName : "checkAll"});
				if(data.dataInfo.h["got"] > 0 && data.dataInfo.h["last_import_cid"] == data.dataInfo.h["max_client_id"]) {
					resolve(data);
					haxe_Log.trace("...",{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 339, className : "action.async.LivePBXSync", methodName : "checkAll"});
					dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : " ", text : "" + Std.string(data.dataInfo.h["got"]) + " von " + Std.string(data.dataInfo.h["missing"]) + " aktualisiert"}))));
					return;
				}
				if(data.dataInfo.h["got"] > 0) {
					dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : " ", text : "" + Std.string(data.dataInfo.h["got"]) + " von " + Std.string(data.dataInfo.h["missing"]) + " aktualisiert - lade weitere"}))));
					if(!props.onlyNew) {
						props.offset += data.dataInfo.h["got"];
					}
					haxe_Log.trace("next loop:" + Std.string(props),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 357, className : "action.async.LivePBXSync", methodName : "checkAll"});
					dispatch(action_async_LivePBXSync.checkAll(props));
					return;
				}
				haxe_Log.trace(data.dataInfo.h["got"] > 0 && data.dataInfo.h["last_import_cid"] != data.dataInfo.h["max_client_id"] ? "loop" : "no",{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 360, className : "action.async.LivePBXSync", methodName : "checkAll"});
				resolve(data);
			});
		});
	}));
};
action_async_LivePBXSync.check = function(props) {
	return new Promise(function(resolve,reject) {
		if(!props.userState.dbUser.online) {
			var reject1 = reject;
			var _g = new haxe_ds_StringMap();
			_g.h["LoginError"] = "Du musst dich neu anmelden!";
			reject1(shared_DbDataTools.create(_g));
		}
		haxe_Log.trace("creating BinaryLoader " + Std.string(App.config.api),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 377, className : "action.async.LivePBXSync", methodName : "check"});
		var bl = loader_BinaryLoader.dbQuery(App.config.api,{ dbUser : props.userState.dbUser, classPath : props.classPath, action : props.action, extDB : true, limit : props.limit, offset : props.offset, onlyNew : props.onlyNew, table : props.table, filter : props.filter, maxImport : props.maxImport == null ? 1000 : props.maxImport, devIP : App.devIP},function(data) {
			haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 395, className : "action.async.LivePBXSync", methodName : "check"});
			if(Object.prototype.hasOwnProperty.call(data.dataInfo.h,"loginTask") && data.dataInfo.h["loginTask"] == "Login") {
				reject(App.store.dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"})))));
			}
			var h = data.dataErrors.h;
			var inlStringMapKeyIterator_h = h;
			var inlStringMapKeyIterator_keys = Object.keys(h);
			var inlStringMapKeyIterator_length = inlStringMapKeyIterator_keys.length;
			var inlStringMapKeyIterator_current = 0;
			if(inlStringMapKeyIterator_current < inlStringMapKeyIterator_length) {
				var h = data.dataErrors.h;
				var inlStringMapValueIterator_h = h;
				var inlStringMapValueIterator_keys = Object.keys(h);
				var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
				var inlStringMapValueIterator_current = 0;
				var err = inlStringMapValueIterator_h[inlStringMapValueIterator_keys[inlStringMapValueIterator_current++]];
				var reject1 = reject;
				var _g = new haxe_ds_StringMap();
				_g.h[props.classPath] = err;
				reject1(shared_DbDataTools.create(_g));
			}
			haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 410, className : "action.async.LivePBXSync", methodName : "check"});
			resolve(data);
		});
	});
};
action_async_LivePBXSync.importDeals = function(props) {
	haxe_Log.trace("" + props.maxImport + " " + props.limit + " " + props.offset,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 420, className : "action.async.LivePBXSync", methodName : "importDeals"});
	return redux_thunk_Thunk.Action(function(dispatch,getState) {
		var aState = getState();
		haxe_Log.trace(props,{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 423, className : "action.async.LivePBXSync", methodName : "importDeals"});
		if(!props.userState.dbUser.online) {
			return dispatch(redux_Action.map(action_AppAction.User(action_UserAction.LoginError({ dbUser : props.userState.dbUser, lastError : "Du musst dich neu anmelden!"}))));
		}
		haxe_Log.trace("creating BinaryLoader " + Std.string(App.config.api),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 432, className : "action.async.LivePBXSync", methodName : "importDeals"});
		var bl = loader_BinaryLoader.create("" + Std.string(App.config.api),{ dbUser : props.userState.dbUser, id : props.userState.dbUser.id, jwt : props.userState.dbUser.jwt, classPath : props.classPath, action : props.action, extDB : true, limit : props.limit, offset : props.offset, onlyNew : props.onlyNew, filter : props.filter, min_age : 70, maxImport : props.maxImport == null ? 1000 : props.maxImport, devIP : App.devIP},function(data) {
			var h = data.dataErrors.h;
			var inlStringMapKeyIterator_h = h;
			var inlStringMapKeyIterator_keys = Object.keys(h);
			var inlStringMapKeyIterator_length = inlStringMapKeyIterator_keys.length;
			var inlStringMapKeyIterator_current = 0;
			if(inlStringMapKeyIterator_current < inlStringMapKeyIterator_length) {
				var h = data.dataErrors.h;
				var inlStringMapValueIterator_h = h;
				var inlStringMapValueIterator_keys = Object.keys(h);
				var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
				var inlStringMapValueIterator_current = 0;
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : inlStringMapValueIterator_h[inlStringMapValueIterator_keys[inlStringMapValueIterator_current++]]}))));
				return;
			}
			haxe_Log.trace(data.dataInfo == null ? "null" : haxe_ds_StringMap.stringify(data.dataInfo.h),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 464, className : "action.async.LivePBXSync", methodName : "importDeals"});
			if(data.dataInfo.h["missing"] > 0 && data.dataInfo.h["got"] != data.dataInfo.h["missing"]) {
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : "error", text : "Fehler " + Std.string(data.dataInfo.h["got"]) + " von " + Std.string(data.dataInfo.h["missing"]) + " Aktualisiert"}))));
				return;
			}
			if(data.dataInfo.h["got"] > 0 && data.dataInfo.h["last_import_cid"] == data.dataInfo.h["max_client_id"]) {
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : " ", text : "" + Std.string(data.dataInfo.h["got"]) + " von " + Std.string(data.dataInfo.h["missing"]) + " aktualisiert"}))));
				return;
			}
			if(data.dataInfo.h["got"] > 0) {
				dispatch(redux_Action.map(action_AppAction.Status(action_StatusAction.Update({ className : " ", text : "" + Std.string(data.dataInfo.h["got"]) + " von " + Std.string(data.dataInfo.h["missing"]) + " aktualisiert - lade weitere"}))));
				if(!props.onlyNew) {
					props.offset += data.dataInfo.h["got"];
				}
				haxe_Log.trace("next loop:" + Std.string(props),{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 492, className : "action.async.LivePBXSync", methodName : "importDeals"});
				dispatch(action_async_LivePBXSync.importContacts(props));
				return;
			}
			haxe_Log.trace(data.dataInfo.h["got"] > 0 && data.dataInfo.h["last_import_cid"] != data.dataInfo.h["max_client_id"] ? "loop" : "no",{ fileName : "src/action/async/LivePBXSync.hx", lineNumber : 495, className : "action.async.LivePBXSync", methodName : "importDeals"});
		});
		return null;
	});
};
var action_async_UserAccess = function() { };
$hxClasses["action.async.UserAccess"] = action_async_UserAccess;
action_async_UserAccess.__name__ = "action.async.UserAccess";
var bulma_$components_Button = require("react-bulma-components").Button;
var bulma_$components_Footer = function(props,context) {
	React_Component.call(this,props,context);
};
$hxClasses["bulma_components.Footer"] = bulma_$components_Footer;
bulma_$components_Footer.__name__ = "bulma_components.Footer";
bulma_$components_Footer.__super__ = React_Component;
bulma_$components_Footer.prototype = $extend(React_Component.prototype,{
	render: function() {
		return React.createElement(react_ReactType.fromString("footer"),{ className : "footer", children : this.props.children});
	}
	,componentDidUpdate: function(prevProps,prevState) {
	}
	,__class__: bulma_$components_Footer
});
var bulma_$components_Tabs = require("react-bulma-components").Tabs;
var comments_StringTransform = function() { };
$hxClasses["comments.StringTransform"] = comments_StringTransform;
comments_StringTransform.__name__ = "comments.StringTransform";
comments_StringTransform.unindent = function(string) {
	var spR = new EReg("^\\s+","");
	var allSpR = new EReg("^\\s*$","");
	var lines = new EReg("(?:\r\n|\n)","g").split(string);
	var _g = [];
	var _g1 = 0;
	while(_g1 < lines.length) {
		var line = lines[_g1];
		++_g1;
		if(spR.match(line)) {
			_g.push(spR.matched(0));
		} else {
			_g.push("");
		}
	}
	var indents = _g;
	indents.sort(function(s1,s2) {
		return s1.length - s2.length;
	});
	while(indents.length > 0) {
		var ind = [indents.pop()];
		if(Lambda.foreach(lines,(function(ind) {
			return function(l) {
				if(!allSpR.match(l)) {
					return StringTools.startsWith(l,ind[0]);
				} else {
					return true;
				}
			};
		})(ind))) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < lines.length) {
				var l = lines[_g1];
				++_g1;
				_g.push(allSpR.match(l) ? "" : HxOverrides.substr(l,ind[0].length,null));
			}
			lines = _g;
			return lines.join(string.indexOf("\r\n") >= 0 ? "\r\n" : "\n");
		}
	}
	return string;
};
var css_FlexFlow = {};
css_FlexFlow.fromMulti = function(arr) {
	return arr.join(" ");
};
var css_OverflowCompo = {};
css_OverflowCompo.fromArray = function(arr) {
	return arr.join(" ");
};
var css_TextOverflow = {};
css_TextOverflow.fromArray = function(arr) {
	return arr.join(" ");
};
var css_VerticalAlign = {};
css_VerticalAlign.fromFloat = function(f) {
	return "" + f + "px";
};
var hxbit_Serializable = function() { };
$hxClasses["hxbit.Serializable"] = hxbit_Serializable;
hxbit_Serializable.__name__ = "hxbit.Serializable";
hxbit_Serializable.__isInterface__ = true;
hxbit_Serializable.prototype = {
	__uid: null
	,getCLID: null
	,serialize: null
	,unserializeInit: null
	,unserialize: null
	,getSerializeSchema: null
	,__class__: hxbit_Serializable
};
var hxbit_Serializer = function() {
	this.usedClasses = [];
	if(hxbit_Serializer.CLIDS == null) {
		hxbit_Serializer.initClassIDS();
	}
};
$hxClasses["hxbit.Serializer"] = hxbit_Serializer;
hxbit_Serializer.__name__ = "hxbit.Serializer";
hxbit_Serializer.resetCounters = function() {
	hxbit_Serializer.UID = 0;
	hxbit_Serializer.SEQ = 0;
};
hxbit_Serializer.allocUID = function() {
	return hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
};
hxbit_Serializer.registerClass = function(c) {
	if(hxbit_Serializer.CLIDS != null) {
		throw haxe_Exception.thrown("Too late to register class");
	}
	var idx = hxbit_Serializer.CLASSES.length;
	hxbit_Serializer.CLASSES.push(c);
	return idx;
};
hxbit_Serializer.hash = function(name) {
	var v = 1;
	var _g = 0;
	var _g1 = name.length;
	while(_g < _g1) {
		var i = _g++;
		v = v * 223 + name.charCodeAt(i) | 0;
	}
	v = 1 + (v & 1073741823) % 65423;
	return v;
};
hxbit_Serializer.initClassIDS = function() {
	var cl = hxbit_Serializer.CLASSES;
	var _g = [];
	var _g1 = 0;
	while(_g1 < cl.length) {
		var c = cl[_g1];
		++_g1;
		_g.push([]);
	}
	var subClasses = _g;
	var isSub = [];
	var _g = 0;
	var _g1 = cl.length;
	while(_g < _g1) {
		var i = _g++;
		var c = cl[i];
		while(true) {
			c = c.__super__;
			if(c == null) {
				break;
			}
			var idx = cl.indexOf(c);
			if(idx < 0) {
				break;
			}
			subClasses[idx].push(i);
			isSub[i] = true;
		}
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = hxbit_Serializer.CLASSES.length;
	while(_g1 < _g2) {
		var i = _g1++;
		if(subClasses[i].length == 0 && !isSub[i]) {
			_g.push(0);
		} else {
			var name = cl[i].__name__;
			var v = 1;
			var _g3 = 0;
			var _g4 = name.length;
			while(_g3 < _g4) {
				var i1 = _g3++;
				v = v * 223 + name.charCodeAt(i1) | 0;
			}
			v = 1 + (v & 1073741823) % 65423;
			_g.push(v);
		}
	}
	hxbit_Serializer.CLIDS = _g;
	hxbit_Serializer.CL_BYID = [];
	var _g = 0;
	var _g1 = hxbit_Serializer.CLIDS.length;
	while(_g < _g1) {
		var i = _g++;
		var cid = hxbit_Serializer.CLIDS[i];
		if(cid == 0) {
			continue;
		}
		if(hxbit_Serializer.CL_BYID[cid] != null) {
			var c = hxbit_Serializer.CL_BYID[cid];
			throw haxe_Exception.thrown("Conflicting CLID between " + c.__name__ + " and " + cl[i].__name__);
		}
		hxbit_Serializer.CL_BYID[cid] = cl[i];
	}
};
hxbit_Serializer.getSignature = function() {
	if(hxbit_Serializer.__SIGN != null) {
		return hxbit_Serializer.__SIGN;
	}
	var s = new hxbit_Serializer();
	s.begin();
	var v = hxbit_Serializer.CLASSES.length;
	if(v >= 0 && v < 128) {
		s.out.addByte(v);
	} else {
		s.out.addByte(128);
		s.out.addInt32(v);
	}
	var _g = 0;
	var _g1 = hxbit_Serializer.CLASSES.length;
	while(_g < _g1) {
		var i = _g++;
		var v = hxbit_Serializer.CLIDS[i];
		if(v >= 0 && v < 128) {
			s.out.addByte(v);
		} else {
			s.out.addByte(128);
			s.out.addInt32(v);
		}
		var v1 = Object.create(hxbit_Serializer.CLASSES[i].prototype).getSerializeSchema().get_checkSum();
		s.out.addInt32(v1);
	}
	return hxbit_Serializer.__SIGN = haxe_crypto_Md5.make(s.end());
};
hxbit_Serializer.isClassFinal = function(index) {
	return hxbit_Serializer.CLIDS[index] == 0;
};
hxbit_Serializer.save = function(value) {
	var s = new hxbit_Serializer();
	s.beginSave();
	s.addKnownRef(value);
	return s.endSave();
};
hxbit_Serializer.load = function(bytes,cl) {
	var s = new hxbit_Serializer();
	s.beginLoad(bytes);
	var value = s.getRef(cl,cl.__clid);
	s.endLoad();
	return value;
};
hxbit_Serializer.prototype = {
	refs: null
	,remapObjs: null
	,newObjects: null
	,out: null
	,input: null
	,inPos: null
	,usedClasses: null
	,convert: null
	,mapIndexes: null
	,knownStructs: null
	,set_remapIds: function(b) {
		this.remapObjs = b ? new haxe_ds_ObjectMap() : null;
		return b;
	}
	,get_remapIds: function() {
		return this.remapObjs != null;
	}
	,remap: function(s) {
		if(this.remapObjs.h.__keys__[s.__id__] != null) {
			return;
		}
		this.remapObjs.set(s,s.__uid);
		s.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	}
	,begin: function() {
		this.out = new haxe_io_BytesBuffer();
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
	}
	,end: function() {
		var bytes = this.out.getBytes();
		this.out = null;
		this.refs = null;
		this.knownStructs = null;
		return bytes;
	}
	,setInput: function(data,pos) {
		this.input = data;
		this.inPos = pos;
		if(this.refs == null) {
			this.refs = new haxe_ds_IntMap();
		}
		if(this.knownStructs == null) {
			this.knownStructs = [];
		}
	}
	,serialize: function(s) {
		this.begin();
		this.addKnownRef(s);
		return this.out.getBytes();
	}
	,unserialize: function(data,c,startPos) {
		if(startPos == null) {
			startPos = 0;
		}
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
		this.setInput(data,startPos);
		return this.getRef(c,c.__clid);
	}
	,getByte: function() {
		return this.input.b[this.inPos++];
	}
	,addByte: function(v) {
		this.out.addByte(v);
	}
	,addInt: function(v) {
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,addInt32: function(v) {
		this.out.addInt32(v);
	}
	,addInt64: function(v) {
		this.out.addInt64(v);
	}
	,addFloat: function(v) {
		this.out.addFloat(v);
	}
	,addDouble: function(v) {
		this.out.addDouble(v);
	}
	,addBool: function(v) {
		this.out.addByte(v ? 1 : 0);
	}
	,addArray: function(a,f) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			f(v);
		}
	}
	,addVector: function(a,f) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			f(v);
		}
	}
	,getArray: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,getVector: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var this1 = new Array(len);
		var a = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,addMap: function(a,fk,ft) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var _g = [];
		var k = a.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var keys = _g;
		var v = keys.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			fk(k);
			ft(a.get(k));
		}
	}
	,getBool: function() {
		return this.input.b[this.inPos++] != 0;
	}
	,getInt: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,skip: function(size) {
		this.inPos += size;
	}
	,getInt32: function() {
		var v = this.input.getInt32(this.inPos);
		this.inPos += 4;
		return v;
	}
	,getInt64: function() {
		var v = this.input.getInt64(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getDouble: function() {
		var v = this.input.getDouble(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getFloat: function() {
		var v = this.input.getFloat(this.inPos);
		this.inPos += 4;
		return v;
	}
	,addString: function(s) {
		if(s == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
	}
	,addBytes: function(b) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
	}
	,addBytesSub: function(b,pos,len) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			var v = len + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.addBytes(b,pos,len);
		}
	}
	,getString: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.getString(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getBytes: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.sub(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getDynamic: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return false;
		case 2:
			return true;
		case 3:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 4:
			var v = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v;
		case 5:
			var o = { };
			var _g1 = 0;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g2 = v;
			while(_g1 < _g2) {
				var i = _g1++;
				var v = this.input.b[this.inPos++];
				if(v == 128) {
					v = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v;
				var field;
				if(len == 0) {
					field = null;
				} else {
					--len;
					var s = this.input.getString(this.inPos,len);
					this.inPos += len;
					field = s;
				}
				o[field] = this.getDynamic();
			}
			return o;
		case 6:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		case 7:
			var _g1 = [];
			var _g2 = 0;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g3 = v;
			while(_g2 < _g3) {
				var i = _g2++;
				_g1.push(this.getDynamic());
			}
			return _g1;
		case 8:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.sub(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		default:
			var x = _g;
			throw haxe_Exception.thrown("Invalid dynamic prefix " + x);
		}
	}
	,addDynamic: function(v) {
		if(v == null) {
			this.out.addByte(0);
			return;
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 1:
			this.out.addByte(3);
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			break;
		case 2:
			this.out.addByte(4);
			this.out.addFloat(v);
			break;
		case 3:
			this.out.addByte(v ? 2 : 1);
			break;
		case 4:
			var fields = Reflect.fields(v);
			this.out.addByte(5);
			var v1 = fields.length;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				if(f == null) {
					this.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(f);
					var v1 = b.length + 1;
					if(v1 >= 0 && v1 < 128) {
						this.out.addByte(v1);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v1);
					}
					this.out.add(b);
				}
				this.addDynamic(Reflect.field(v,f));
			}
			break;
		case 6:
			var c = _g.c;
			switch(c) {
			case Array:
				this.out.addByte(7);
				var a = v;
				var v1 = a.length;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				var _g1 = 0;
				while(_g1 < a.length) {
					var v1 = a[_g1];
					++_g1;
					this.addDynamic(v1);
				}
				break;
			case String:
				this.out.addByte(6);
				var s = v;
				if(s == null) {
					this.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(s);
					var v1 = b.length + 1;
					if(v1 >= 0 && v1 < 128) {
						this.out.addByte(v1);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v1);
					}
					this.out.add(b);
				}
				break;
			case haxe_io_Bytes:
				this.out.addByte(8);
				var b = v;
				if(b == null) {
					this.out.addByte(0);
				} else {
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						this.out.addByte(v);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v);
					}
					this.out.add(b);
				}
				break;
			default:
				throw haxe_Exception.thrown("Unsupported dynamic " + Std.string(c));
			}
			break;
		default:
			var t = _g;
			throw haxe_Exception.thrown("Unsupported dynamic " + Std.string(t));
		}
	}
	,addCLID: function(clid) {
		this.out.addByte(clid >> 8);
		this.out.addByte(clid & 255);
	}
	,getCLID: function() {
		return this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
	}
	,addStruct: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		var c = js_Boot.__implements(s,hxbit_Serializable) ? s : null;
		if(c != null) {
			this.out.addByte(1);
			this.addAnyRef(c);
			return;
		}
		var index = this.knownStructs.indexOf(s);
		if(index >= 0) {
			this.out.addByte(2);
			if(index >= 0 && index < 128) {
				this.out.addByte(index);
			} else {
				this.out.addByte(128);
				this.out.addInt32(index);
			}
			return;
		}
		this.knownStructs.push(s);
		this.out.addByte(3);
		var c = js_Boot.getClass(s);
		if(c == null) {
			throw haxe_Exception.thrown(Std.string(s) + " does not have a class ?");
		}
		var s1 = c.__name__;
		if(s1 == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s1);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
		s.customSerialize(this);
		this.out.addByte(255);
	}
	,getStruct: function() {
		switch(this.input.b[this.inPos++]) {
		case 0:
			return null;
		case 1:
			return this.getAnyRef();
		case 2:
			var tmp = this.knownStructs;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return tmp[v];
		case 3:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			var cname;
			if(len == 0) {
				cname = null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				cname = s;
			}
			var cl = $hxClasses[cname];
			if(cl == null) {
				throw haxe_Exception.thrown("Missing struct class " + cname);
			}
			var s = Object.create(cl.prototype);
			this.knownStructs.push(s);
			s.customUnserialize(this);
			if(this.input.b[this.inPos++] != 255) {
				throw haxe_Exception.thrown("Invalid customUnserialize for " + Std.string(s));
			}
			return s;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,addObjRef: function(s) {
		var v = s.__uid;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,getObjRef: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,addAnyRef: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		this.out.addByte(index >> 8);
		this.out.addByte(index & 255);
		s.serialize(this);
	}
	,addKnownRef: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		var clid = hxbit_Serializer.CLIDS[index];
		if(clid != 0) {
			this.out.addByte(clid >> 8);
			this.out.addByte(clid & 255);
		}
		s.serialize(this);
	}
	,getAnyRef: function() {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		var clidx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
		if(this.mapIndexes != null) {
			clidx = this.mapIndexes[clidx];
		}
		var i = Object.create(hxbit_Serializer.CLASSES[clidx].prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getRef: function(c,clidx) {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		if(this.convert != null && this.convert[clidx] != null) {
			var conv = this.convert[clidx];
			if(conv.hadCID) {
				var realIdx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
				if(conv.hasCID) {
					c = hxbit_Serializer.CL_BYID[realIdx];
					clidx = c.__clid;
				}
			}
		} else if(hxbit_Serializer.CLIDS[clidx] != 0) {
			var realIdx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			c = hxbit_Serializer.CL_BYID[realIdx];
			if(this.convert != null) {
				clidx = c.__clid;
			}
		}
		var i = Object.create(c.prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getKnownRef: function(c) {
		return this.getRef(c,c.__clid);
	}
	,beginSave: function() {
		this.begin();
		this.usedClasses = [];
	}
	,endSave: function(savePosition) {
		if(savePosition == null) {
			savePosition = 0;
		}
		var content = this.end();
		this.begin();
		var classes = [];
		var schemas = [];
		var sidx = hxbit_Serializer.CLASSES.indexOf(hxbit_Schema);
		var _g = 0;
		var _g1 = this.usedClasses.length;
		while(_g < _g1) {
			var i = _g++;
			if(!this.usedClasses[i] || i == sidx) {
				continue;
			}
			var c = hxbit_Serializer.CLASSES[i];
			var schema = Object.create(c.prototype).getSerializeSchema();
			schemas.push(schema);
			classes.push(i);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
		}
		var schemaData = this.end();
		this.begin();
		this.out.addBytes(content,0,savePosition);
		var b = haxe_io_Bytes.ofString("HXS");
		var v = b.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		this.out.add(b);
		this.out.addByte(1);
		var _g = 0;
		var _g1 = classes.length;
		while(_g < _g1) {
			var i = _g++;
			var index = classes[i];
			var c = hxbit_Serializer.CLASSES[index];
			var s = c.__name__;
			if(s == null) {
				this.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(s);
				var v = b.length + 1;
				if(v >= 0 && v < 128) {
					this.out.addByte(v);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v);
				}
				this.out.add(b);
			}
			this.out.addByte(index >> 8);
			this.out.addByte(index & 255);
			var v1 = schemas[i].get_checkSum();
			this.out.addInt32(v1);
		}
		var s = null;
		if(s == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
		var v = schemaData.length;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		this.out.add(schemaData);
		this.out.addBytes(content,savePosition,content.length - savePosition);
		return this.end();
	}
	,beginLoad: function(bytes,position) {
		if(position == null) {
			position = 0;
		}
		this.setInput(bytes,position);
		var classByName_h = Object.create(null);
		var schemas = [];
		var mapIndexes = [];
		var indexes = [];
		var needConvert = false;
		var needReindex = false;
		var _g = 0;
		var _g1 = hxbit_Serializer.CLASSES.length;
		while(_g < _g1) {
			var i = _g++;
			var c = hxbit_Serializer.CLASSES[i];
			classByName_h[c.__name__] = i;
			mapIndexes[i] = i;
		}
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = this.input.getString(this.inPos,len);
			this.inPos += len;
			tmp = s;
		}
		if(tmp != "HXS") {
			throw haxe_Exception.thrown("Invalid HXS data");
		}
		var version = this.input.b[this.inPos++];
		if(version != 1) {
			throw haxe_Exception.thrown("Unsupported HXS version " + version);
		}
		while(true) {
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			var clname;
			if(len == 0) {
				clname = null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				clname = s;
			}
			if(clname == null) {
				break;
			}
			var index = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			var v1 = this.input.getInt32(this.inPos);
			this.inPos += 4;
			var crc = v1;
			var ourClassIndex = classByName_h[clname];
			if(ourClassIndex == null) {
				throw haxe_Exception.thrown("Missing class " + clname + " found in HXS data");
			}
			var ourSchema = Object.create(hxbit_Serializer.CLASSES[ourClassIndex].prototype).getSerializeSchema();
			if(ourSchema.get_checkSum() != crc) {
				needConvert = true;
				schemas[index] = ourSchema;
			}
			if(index != ourClassIndex) {
				needReindex = true;
				mapIndexes[index] = ourClassIndex;
			}
			indexes.push(index);
		}
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var schemaDataSize = v;
		if(needConvert) {
			this.convert = [];
			var _g = 0;
			while(_g < indexes.length) {
				var index = indexes[_g];
				++_g;
				var ourSchema = schemas[index];
				var c = hxbit_Schema;
				var schema = this.getRef(c,c.__clid);
				this.refs.remove(schema.__uid);
				if(ourSchema != null) {
					var c1 = hxbit_Serializer.CLASSES[mapIndexes[index]];
					this.convert[mapIndexes[index]] = new hxbit_Convert(c1.__name__,ourSchema,schema);
				}
			}
		} else {
			this.inPos += schemaDataSize;
		}
		if(needReindex) {
			this.mapIndexes = mapIndexes;
		}
	}
	,endLoad: function() {
		this.convert = null;
		this.mapIndexes = null;
		this.setInput(null,0);
	}
	,convertRef: function(i,c) {
		var this1 = new Array(c.read.length);
		var values = this1;
		var writePos = 0;
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var oldOut = this.out;
		this.out = new haxe_io_BytesBuffer();
		var _g = 0;
		var _g1 = c.write;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			var v;
			if(w.from == null) {
				v = w.defaultValue;
			} else {
				v = values[w.index];
				if(!w.same) {
					if(v == null) {
						v = w.defaultValue;
					} else if(w.conv != null) {
						v = w.conv(v);
					} else {
						v = this.convertValue(w.path,v,w.from,w.to);
					}
				}
			}
			this.writeValue(v,w.to);
		}
		var bytes = this.out.getBytes();
		this.out = oldOut;
		var oldIn = this.input;
		var oldPos = this.inPos;
		this.setInput(bytes,0);
		i.unserialize(this);
		this.setInput(oldIn,oldPos);
	}
	,isNullable: function(t) {
		switch(t._hx_index) {
		case 0:case 1:case 2:
			return false;
		default:
			return true;
		}
	}
	,convertValue: function(path,v,from,to) {
		if(v == null) {
			return hxbit_Convert.getDefault(to);
		}
		if(hxbit_Convert.sameType(from,to)) {
			return v;
		}
		var conv = hxbit_Convert.convFuns.h[path];
		if(conv != null) {
			return conv(v);
		}
		switch(from._hx_index) {
		case 0:
			switch(to._hx_index) {
			case 1:
				return v * 1.0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 1:
			switch(to._hx_index) {
			case 0:
				return v | 0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 2:
			switch(to._hx_index) {
			case 0:
				if(v) {
					return 1;
				} else {
					return 0;
				}
				break;
			case 1:
				if(v) {
					return 1.;
				} else {
					return 0.;
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 5:
			var _g = from.name;
			switch(to._hx_index) {
			case 5:
				var to1 = to.name;
				var value = v;
				var v2 = js_Boot.__downcastCheck(value,$hxClasses[to1]) ? value : null;
				if(v2 != null) {
					return v2;
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 8:
			var _g = from.k;
			switch(to._hx_index) {
			case 8:
				var to1 = to.k;
				var from1 = _g;
				var arr = v;
				var _g = [];
				var _g1 = 0;
				while(_g1 < arr.length) {
					var v1 = arr[_g1];
					++_g1;
					_g.push(this.convertValue(path + "[]",v1,from1,to1));
				}
				return _g;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 9:
			var _g = from.fields;
			switch(to._hx_index) {
			case 9:
				var obj2 = to.fields;
				var obj1 = _g;
				var v2 = { };
				var _g = 0;
				while(_g < obj2.length) {
					var f = obj2[_g];
					++_g;
					var found = false;
					var field = null;
					var _g1 = 0;
					while(_g1 < obj1.length) {
						var f2 = obj1[_g1];
						++_g1;
						if(f2.name == f.name) {
							found = true;
							field = this.convertValue(path + "." + f2.name,Reflect.field(v,f2.name),f2.type,f.type);
							break;
						}
					}
					if(!found) {
						if(f.opt) {
							continue;
						}
						field = hxbit_Convert.getDefault(f.type);
					} else if(field == null && f.opt) {
						continue;
					}
					v2[f.name] = field;
				}
				return v2;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 10:
			var _g = from.k;
			switch(to._hx_index) {
			case 10:
				var _g1 = to.k;
				var from1 = _g;
				return this.convertValue(path,v,from1,to);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
				var from1 = _g;
				return this.convertValue(path,v,from1,to);
			}
			break;
		case 12:
			var from1 = from.t;
			return this.convertValue(path,v,from1,to);
		default:
			switch(to._hx_index) {
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
		}
		throw haxe_Exception.thrown("Cannot convert " + path + "(" + Std.string(v) + ") from " + Std.string(from) + " to " + Std.string(to));
	}
	,getEnumClass: function(name) {
		var cl = hxbit_Serializer.ENUM_CLASSES.h[name];
		if(cl != null) {
			return cl;
		}
		var path = name.split(".").join("_");
		path = path.charAt(0).toUpperCase() + HxOverrides.substr(path,1,null);
		cl = $hxClasses["hxbit.enumSer." + path];
		if(cl != null) {
			hxbit_Serializer.ENUM_CLASSES.h[name] = cl;
		}
		return cl;
	}
	,readValue: function(t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 1:
			var v = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		case 4:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.sub(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		case 5:
			var name = t.name;
			var c = $hxClasses[name];
			return this.getRef(c,c.__clid);
		case 6:
			var name = t.name;
			var ser = this.getEnumClass(name);
			if(ser == null) {
				var e = $hxEnums[name];
				var tmp;
				if(e != null) {
					var o = haxe_rtti_Meta.getType(e);
					tmp = Object.prototype.hasOwnProperty.call(o,"skipSerialize");
				} else {
					tmp = false;
				}
				if(tmp) {
					var v = this.input.b[this.inPos++];
					if(v == 128) {
						v = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					return null;
				}
				throw haxe_Exception.thrown("No enum unserializer found for " + name);
			}
			return ser.doUnserialize(this);
		case 7:
			var k = t.k;
			var v = t.v;
			switch(k._hx_index) {
			case 0:
				var v1 = this.input.b[this.inPos++];
				if(v1 == 128) {
					v1 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v1;
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_IntMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.h[k1] = v1;
					}
					tmp = m;
				}
				return tmp;
			case 3:
				var v1 = this.input.b[this.inPos++];
				if(v1 == 128) {
					v1 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v1;
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_StringMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.h[k1] = v1;
					}
					tmp = m;
				}
				return tmp;
			case 6:
				var _g = k.name;
				var v1 = this.input.b[this.inPos++];
				if(v1 == 128) {
					v1 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v1;
				if(len == 0) {
					return null;
				}
				var m = new haxe_ds_EnumValueMap();
				while(--len > 0) {
					var k1 = this.readValue(k);
					var v1 = this.readValue(v);
					m.set(k1,v1);
				}
				return m;
			default:
				var v1 = this.input.b[this.inPos++];
				if(v1 == 128) {
					v1 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v1;
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_ObjectMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.set(k1,v1);
					}
					tmp = m;
				}
				return tmp;
			}
			break;
		case 8:
			var t1 = t.k;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			if(len == 0) {
				return null;
			} else {
				--len;
				var a = [];
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 9:
			var fields = t.fields;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var bits = v;
			if(bits == 0) {
				return null;
			}
			var o = { };
			--bits;
			var _g = [];
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				if(this.isNullable(f.type)) {
					_g.push(f);
				}
			}
			var nullables = _g;
			var _g = 0;
			while(_g < fields.length) {
				var f = fields[_g];
				++_g;
				var nidx = nullables.indexOf(f);
				if(nidx >= 0 && (bits & 1 << nidx) == 0) {
					continue;
				}
				o[f.name] = this.readValue(f.type);
			}
			return o;
		case 10:
			var t1 = t.k;
			return this.readValue(t1);
		case 11:
			var t1 = t.k;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v;
			if(len == 0) {
				return null;
			} else {
				--len;
				var this1 = new Array(len);
				var a = this1;
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 12:
			var t1 = t.t;
			if(this.input.b[this.inPos++] == 0) {
				return null;
			} else {
				return this.readValue(t1);
			}
			break;
		case 13:
			throw haxe_Exception.thrown("assert");
		case 14:
			return this.getDynamic();
		case 15:
			var v = this.input.getInt64(this.inPos);
			this.inPos += 8;
			return v;
		case 16:
			var _g = t.t;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 17:
			return this.getStruct();
		}
	}
	,writeValue: function(v,t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			break;
		case 1:
			this.out.addFloat(v);
			break;
		case 2:
			this.out.addByte(v ? 1 : 0);
			break;
		case 3:
			var s = v;
			if(s == null) {
				this.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(s);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				this.out.add(b);
			}
			break;
		case 4:
			var b = v;
			if(b == null) {
				this.out.addByte(0);
			} else {
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				this.out.add(b);
			}
			break;
		case 5:
			var _g = t.name;
			this.addKnownRef(v);
			break;
		case 6:
			var name = t.name;
			var ser = this.getEnumClass(name);
			if(ser == null) {
				throw haxe_Exception.thrown("No enum unserializer found for " + name);
			}
			ser.doSerialize(this,v);
			break;
		case 7:
			var k = t.k;
			var t1 = t.v;
			switch(k._hx_index) {
			case 0:
				var v1 = v;
				if(v1 == null) {
					this.out.addByte(0);
				} else {
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					var v2 = keys.length + 1;
					if(v2 >= 0 && v2 < 128) {
						this.out.addByte(v2);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v2);
					}
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1],t1);
					}
				}
				break;
			case 3:
				var v1 = v;
				if(v1 == null) {
					this.out.addByte(0);
				} else {
					var _g = [];
					var h = v1.h;
					var k_h = h;
					var k_keys = Object.keys(h);
					var k_length = k_keys.length;
					var k_current = 0;
					while(k_current < k_length) {
						var k1 = k_keys[k_current++];
						_g.push(k1);
					}
					var keys = _g;
					var v2 = keys.length + 1;
					if(v2 >= 0 && v2 < 128) {
						this.out.addByte(v2);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v2);
					}
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1],t1);
					}
				}
				break;
			case 6:
				var _g = k.name;
				var v1 = v;
				if(v1 == null) {
					this.out.addByte(0);
					return;
				}
				var _g = [];
				var k1 = v1.keys();
				while(k1.hasNext()) {
					var k2 = k1.next();
					_g.push(k2);
				}
				var keys = _g;
				var v2 = keys.length + 1;
				if(v2 >= 0 && v2 < 128) {
					this.out.addByte(v2);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v2);
				}
				var _g = 0;
				while(_g < keys.length) {
					var vk = keys[_g];
					++_g;
					this.writeValue(vk,k);
					this.writeValue(v1.get(vk),t1);
				}
				break;
			default:
				var v1 = v;
				if(v1 == null) {
					this.out.addByte(0);
				} else {
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					var v2 = keys.length + 1;
					if(v2 >= 0 && v2 < 128) {
						this.out.addByte(v2);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v2);
					}
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1.__id__],t1);
					}
				}
			}
			break;
		case 8:
			var t1 = t.k;
			var a = v;
			if(a == null) {
				this.out.addByte(0);
			} else {
				var v1 = a.length + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				var _g = 0;
				while(_g < a.length) {
					var v1 = a[_g];
					++_g;
					_gthis.writeValue(v1,t1);
				}
			}
			break;
		case 9:
			var fields = t.fields;
			if(v == null) {
				this.out.addByte(0);
			} else {
				var fbits = 0;
				var _g = [];
				var _g1 = 0;
				while(_g1 < fields.length) {
					var f = fields[_g1];
					++_g1;
					if(this.isNullable(f.type)) {
						_g.push(f);
					}
				}
				var nullables = _g;
				var _g = 0;
				var _g1 = nullables.length;
				while(_g < _g1) {
					var i = _g++;
					if(Reflect.field(v,nullables[i].name) != null) {
						fbits |= 1 << i;
					}
				}
				var v1 = fbits + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				var _g = 0;
				while(_g < fields.length) {
					var f = fields[_g];
					++_g;
					var nidx = nullables.indexOf(f);
					if(nidx >= 0 && (fbits & 1 << nidx) == 0) {
						continue;
					}
					this.writeValue(Reflect.field(v,f.name),f.type);
				}
			}
			break;
		case 10:
			var t1 = t.k;
			this.writeValue(v,t1);
			break;
		case 11:
			var t1 = t.k;
			var a = v;
			if(a == null) {
				this.out.addByte(0);
			} else {
				var v1 = a.length + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				var _g = 0;
				while(_g < a.length) {
					var v1 = a[_g];
					++_g;
					_gthis.writeValue(v1,t1);
				}
			}
			break;
		case 12:
			var t1 = t.t;
			if(v == null) {
				this.out.addByte(0);
			} else {
				this.out.addByte(1);
				this.writeValue(v,t1);
			}
			break;
		case 13:
			throw haxe_Exception.thrown("assert");
		case 14:
			this.addDynamic(v);
			break;
		case 15:
			this.out.addInt64(v);
			break;
		case 16:
			var _g = t.t;
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			break;
		case 17:
			this.addStruct(v);
			break;
		}
	}
	,__class__: hxbit_Serializer
	,__properties__: {set_remapIds:"set_remapIds",get_remapIds:"get_remapIds"}
};
var db_DbQuery = function(dp) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.dbParams = new haxe_ds_StringMap();
	if(dp != null) {
		this.dbUser = dp.dbUser;
		this.relations = dp.relations;
		var _g = 0;
		var _g1 = Reflect.fields(dp);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f) {
			case "__uid":case "dbUser":case "getCLID":case "getSerializeSchema":case "relations":case "serialize":case "unserialize":case "unserializeInit":
				break;
			default:
				var v = Reflect.field(dp,f);
				this.dbParams.h[f] = v;
			}
		}
	}
};
$hxClasses["db.DbQuery"] = db_DbQuery;
db_DbQuery.__name__ = "db.DbQuery";
db_DbQuery.__interfaces__ = [hxbit_Serializable];
db_DbQuery.prototype = {
	dbParams: null
	,relations: null
	,dbUser: null
	,__uid: null
	,getCLID: function() {
		return db_DbQuery.__clid;
	}
	,serialize: function(__ctx) {
		var a = this.dbParams;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				__ctx.addDynamic(a.h[k]);
			}
		}
		var a = this.relations;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				__ctx.addKnownRef(a.h[k]);
			}
		}
		__ctx.addKnownRef(this.dbUser);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("dbParams");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PDynamic));
		schema.fieldsNames.push("relations");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PSerializable("db.DbRelation")));
		schema.fieldsNames.push("dbUser");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("db.DbUser"));
		schema.isFinal = hxbit_Serializer.isClassFinal(db_DbQuery.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				v0 = __ctx.getDynamic();
				var v1 = v0;
				m.h[k] = v1;
			}
			tmp = m;
		}
		this.dbParams = tmp;
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				v0 = __ctx.getRef(db_DbRelation,db_DbRelation.__clid);
				var v1 = v0;
				m.h[k] = v1;
			}
			tmp = m;
		}
		this.relations = tmp;
		this.dbUser = __ctx.getRef(db_DbUser,db_DbUser.__clid);
	}
	,__class__: db_DbQuery
};
var db_DbRelation = function(p) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	var _g = 0;
	var _g1 = Type.getInstanceFields(db_DbRelation);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		switch(f) {
		case "__uid":case "getCLID":case "getSerializeSchema":case "serialize":case "unserialize":
			break;
		default:
			if(Object.prototype.hasOwnProperty.call(p,f)) {
				this[f] = Reflect.field(p,f);
			}
		}
	}
};
$hxClasses["db.DbRelation"] = db_DbRelation;
db_DbRelation.__name__ = "db.DbRelation";
db_DbRelation.__interfaces__ = [hxbit_Serializable];
db_DbRelation.prototype = {
	alias: null
	,fields: null
	,filter: null
	,jCond: null
	,__uid: null
	,getCLID: function() {
		return db_DbRelation.__clid;
	}
	,serialize: function(__ctx) {
		var s = this.alias;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var a = this.fields;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v = a[_g];
				++_g;
				if(v == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(v);
					var v1 = b.length + 1;
					if(v1 >= 0 && v1 < 128) {
						__ctx.out.addByte(v1);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v1);
					}
					__ctx.out.add(b);
				}
			}
		}
		__ctx.addDynamic(this.filter);
		var s = this.jCond;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("alias");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("fields");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("filter");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PDynamic);
		schema.fieldsNames.push("jCond");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.isFinal = hxbit_Serializer.isClassFinal(db_DbRelation.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.alias = tmp;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len = v;
				if(len == 0) {
					e0 = null;
				} else {
					--len;
					var s = __ctx.input.getString(__ctx.inPos,len);
					__ctx.inPos += len;
					e0 = s;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.fields = tmp;
		this.filter = __ctx.getDynamic();
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.jCond = tmp;
	}
	,__class__: db_DbRelation
};
var db_DbUser = function(p) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	var _g = 0;
	var _g1 = Type.getInstanceFields(js_Boot.getClass(this));
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		switch(f) {
		case "__uid":case "getCLID":case "getSerializeSchema":case "serialize":case "unserialize":case "unserializeInit":
			break;
		default:
			this[f] = Reflect.field(p,f);
		}
	}
};
$hxClasses["db.DbUser"] = db_DbUser;
db_DbUser.__name__ = "db.DbUser";
db_DbUser.__interfaces__ = [hxbit_Serializable];
db_DbUser.prototype = {
	active: null
	,change_pass_required: null
	,contact: null
	,edited_by: null
	,actions: null
	,email: null
	,external: null
	,first_name: null
	,id: null
	,jwt: null
	,last_locktime: null
	,last_login: null
	,last_name: null
	,last_request_time: null
	,mandator: null
	,online: null
	,password: null
	,last_error: null
	,settings: null
	,new_pass: null
	,user_group: null
	,user_name: null
	,__uid: null
	,getCLID: function() {
		return db_DbUser.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.addByte(this.active ? 1 : 0);
		__ctx.out.addByte(this.change_pass_required ? 1 : 0);
		var v = this.contact;
		if(v >= 0 && v < 128) {
			__ctx.out.addByte(v);
		} else {
			__ctx.out.addByte(128);
			__ctx.out.addInt32(v);
		}
		var v = this.edited_by;
		if(v >= 0 && v < 128) {
			__ctx.out.addByte(v);
		} else {
			__ctx.out.addByte(128);
			__ctx.out.addInt32(v);
		}
		var s = this.actions;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.email;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.external;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.first_name;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var v = this.id;
		if(v >= 0 && v < 128) {
			__ctx.out.addByte(v);
		} else {
			__ctx.out.addByte(128);
			__ctx.out.addInt32(v);
		}
		var s = this.jwt;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.last_locktime;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.last_login;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.last_name;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.last_request_time;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var v = this.mandator;
		if(v >= 0 && v < 128) {
			__ctx.out.addByte(v);
		} else {
			__ctx.out.addByte(128);
			__ctx.out.addInt32(v);
		}
		__ctx.out.addByte(this.online ? 1 : 0);
		var s = this.password;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.last_error;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.settings;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var s = this.new_pass;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
		var v = this.user_group;
		if(v >= 0 && v < 128) {
			__ctx.out.addByte(v);
		} else {
			__ctx.out.addByte(128);
			__ctx.out.addInt32(v);
		}
		var s = this.user_name;
		if(s == null) {
			__ctx.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			__ctx.out.add(b);
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("active");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("change_pass_required");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("contact");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("edited_by");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("actions");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("email");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("external");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("first_name");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("id");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("jwt");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("last_locktime");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("last_login");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("last_name");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("last_request_time");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("mandator");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("online");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("password");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("last_error");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("settings");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("new_pass");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("user_group");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("user_name");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.isFinal = hxbit_Serializer.isClassFinal(db_DbUser.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.active = __ctx.input.b[__ctx.inPos++] != 0;
		this.change_pass_required = __ctx.input.b[__ctx.inPos++] != 0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.contact = v;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.edited_by = v;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.actions = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.email = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.external = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.first_name = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.id = v;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.jwt = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.last_locktime = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.last_login = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.last_name = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.last_request_time = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.mandator = v;
		this.online = __ctx.input.b[__ctx.inPos++] != 0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.password = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.last_error = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.settings = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.new_pass = tmp;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.user_group = v;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.user_name = tmp;
	}
	,__class__: db_DbUser
};
var debug_DebugOutput = $hxEnums["debug.DebugOutput"] = { __ename__:"debug.DebugOutput",__constructs__:null
	,HAXE: {_hx_name:"HAXE",_hx_index:0,__enum__:"debug.DebugOutput",toString:$estr}
	,NATIVE: {_hx_name:"NATIVE",_hx_index:1,__enum__:"debug.DebugOutput",toString:$estr}
};
debug_DebugOutput.__constructs__ = [debug_DebugOutput.HAXE,debug_DebugOutput.NATIVE];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var debug_Out = $hx_exports["Out"] = function() { };
$hxClasses["debug.Out"] = debug_Out;
debug_Out.__name__ = "debug.Out";
debug_Out.dumpedObjects = null;
debug_Out._trace = function(v,i) {
	if(debug_Out.suspended) {
		return;
	}
	var warned = false;
	if(i != null && Object.prototype.hasOwnProperty.call(i,"customParams")) {
		i = i.customParams[0];
	}
	var msg = i != null ? i.fileName + ":" + i.methodName + ":" + i.lineNumber + ":" : "";
	msg += Std.string(v);
	switch(debug_Out.traceTarget._hx_index) {
	case 0:
		var msg1 = i != null ? i.fileName + ":" + i.lineNumber + ":" + i.methodName + ":" : "";
		msg1 += Std.string(v) + "<br/>";
		var d = window.document.getElementById("haxe:trace");
		if(d == null && !warned) {
			warned = true;
			alert("No haxe:trace element defined\n" + msg1);
		} else {
			d.innerHTML += msg1;
		}
		break;
	case 1:
		console.log(msg);
		break;
	}
};
debug_Out.log2 = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ":" + i.methodName + ":" : "";
	msg += Std.string(v);
	var http = new haxe_http_HttpJs("http://localhost/devel/php/jsLog.php");
	http.setParameter("log",msg);
	http.async = true;
	http.onData = function(data) {
		if(data != "OK") {
			haxe_Log.trace(data,{ fileName : "../lib/debug/Out.hx", lineNumber : 152, className : "debug.Out", methodName : "log2"});
		}
	};
	http.request(true);
};
debug_Out.dumpObjectRSafe = function(root,recursive,i) {
	if(recursive == null) {
		recursive = false;
	}
	var oCopy = { };
	var _g = 0;
	var _g1 = Reflect.fields(root);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		if(f == "parentView") {
			oCopy.parentView = root.parentView.instancePath;
			continue;
		}
		oCopy[f] = Reflect.field(root,f);
	}
	debug_Out.dumpObject(oCopy,i);
};
debug_Out.dumpObjectTree = $hx_exports["debug"]["Out"]["dumpObjectTree"] = function(root,recursive,i) {
	if(recursive == null) {
		recursive = false;
	}
	debug_Out.dumpedObjects = [];
	debug_Out._dumpObjectTree(root,Type.typeof(root),recursive,i);
};
debug_Out._dumpObjectTree = function(root,parent,recursive,i) {
	var m;
	if(js_Boot.getClass(root) != null) {
		var c = js_Boot.getClass(root);
		m = c.__name__;
	} else {
		var e = Type.typeof(root);
		m = $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
	}
	var fields = js_Boot.getClass(root) != null ? Type.getInstanceFields(js_Boot.getClass(root)) : Reflect.fields(root);
	if(m == "String") {
		debug_Out._trace(Std.string(root) + " len:" + Std.string(root.length),i);
	} else {
		debug_Out.dumpedObjects.push(root);
		debug_Out._trace(m + " fields:" + fields.length + ":" + fields.slice(0,5).toString(),i);
	}
	try {
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			haxe_Log.trace(f,{ fileName : "../lib/debug/Out.hx", lineNumber : 258, className : "debug.Out", methodName : "_dumpObjectTree", customParams : [i]});
			if(recursive) {
				if(debug_Out.dumpedObjects.length > 1000) {
					debug_Out._trace(debug_Out.dumpedObjects.toString(),i);
					throw haxe_Exception.thrown("oops");
				} else {
					var _o = root[f];
					if(!Lambda.has(debug_Out.dumpedObjects,_o)) {
						debug_Out._dumpObjectTree(_o,Type.typeof(_o),true,i);
					}
				}
			}
		}
	} catch( _g ) {
		var ex = haxe_Exception.caught(_g).unwrap();
		haxe_Log.trace(ex,{ fileName : "../lib/debug/Out.hx", lineNumber : 282, className : "debug.Out", methodName : "_dumpObjectTree"});
	}
};
debug_Out.dumpObject = function(ob,i) {
	var tClass = js_Boot.getClass(ob);
	var m = "dumpObject:" + Std.string(ob != null ? js_Boot.getClass(ob) : ob) + "\n";
	var names = [];
	names = js_Boot.getClass(ob) != null ? Type.getInstanceFields(js_Boot.getClass(ob)) : Reflect.fields(ob);
	if(js_Boot.getClass(ob) != null) {
		var c = js_Boot.getClass(ob);
		m = c.__name__ + ":\n";
	}
	var _g = 0;
	while(_g < names.length) {
		var name = names[_g];
		++_g;
		if(Lambda.has(debug_Out.skipFields,name)) {
			m += "" + name + ":skipped\n";
			continue;
		}
		try {
			var t = Std.string(Type.typeof(Reflect.field(ob,name)));
			var tmp = debug_Out.skipFunctions && t == "TFunction";
			m += name + ":" + Std.string(Reflect.field(ob,name)) + ":" + t + "\n";
		} catch( _g1 ) {
			var ex = haxe_Exception.caught(_g1).unwrap();
			m += name + ":" + Std.string(ex);
		}
	}
	debug_Out._trace(m,i);
};
debug_Out.dumpStack = function(sA,i) {
	var b = new StringBuf();
	b.b += Std.string("StackDump:" + "\n");
	var _g = 0;
	while(_g < sA.length) {
		var item = sA[_g];
		++_g;
		debug_Out.itemToString(item,b);
		b.b += "\n";
	}
	haxe_Log.trace(b.b,{ fileName : "../lib/debug/Out.hx", lineNumber : 350, className : "debug.Out", methodName : "dumpStack", customParams : [i]});
};
debug_Out.itemToString = function(s,b) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var _g = s.column;
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		if(s1 != null) {
			debug_Out.itemToString(s1,b);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")\n";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		b.b += "\n";
		break;
	case 4:
		var v = s.v;
		b.b += Std.string("LocalFunction:" + v);
		break;
	}
};
debug_Out.fTrace = function(str,arr,i) {
	var str_arr = str.split(" @");
	var str_buf_b = "";
	var _g = 0;
	var _g1 = str_arr.length;
	while(_g < _g1) {
		var i1 = _g++;
		str_buf_b += Std.string(str_arr[i1]);
		if(arr[i1] != null) {
			str_buf_b += Std.string(arr[i1]);
		}
	}
	debug_Out._trace(str_buf_b,i);
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_message:"get_message"}
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var h = v1.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					this.serializeString(k);
					this.serialize(v1.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var b = data.b.bufferValue;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = (c_crc ^ b.bytes[i]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.make = function(b) {
	var h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(16));
	var p = 0;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >>> 24;
	return out;
};
haxe_crypto_Md5.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	while(i < b.length) {
		blks[i >> 2] |= b.b[i] << (((b.length << 3) + i & 3) << 3);
		++i;
	}
	blks[i >> 2] |= 128 << (b.length * 8 + i) % 4 * 8;
	var l = b.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__:"haxe.ds.Either",__constructs__:null
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Left",$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Right",$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__constructs__ = [haxe_ds_Either.Left,haxe_ds_Either.Right];
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,setParameter: function(name,value) {
		var _g = 0;
		var _g1 = this.params.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.params[i].name == name) {
				this.params[i] = { name : name, value : value};
				return;
			}
		}
		this.params.push({ name : name, value : value});
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
	,__properties__: {get_responseData:"get_responseData"}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	async: null
	,withCredentials: null
	,req: null
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postData;
		var _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				var bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			var str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var value = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = value + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addInt64: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_rtti_CType = $hxEnums["haxe.rtti.CType"] = { __ename__:"haxe.rtti.CType",__constructs__:null
	,CUnknown: {_hx_name:"CUnknown",_hx_index:0,__enum__:"haxe.rtti.CType",toString:$estr}
	,CEnum: ($_=function(name,params) { return {_hx_index:1,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CEnum",$_.__params__ = ["name","params"],$_)
	,CClass: ($_=function(name,params) { return {_hx_index:2,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CClass",$_.__params__ = ["name","params"],$_)
	,CTypedef: ($_=function(name,params) { return {_hx_index:3,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CTypedef",$_.__params__ = ["name","params"],$_)
	,CFunction: ($_=function(args,ret) { return {_hx_index:4,args:args,ret:ret,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CFunction",$_.__params__ = ["args","ret"],$_)
	,CAnonymous: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAnonymous",$_.__params__ = ["fields"],$_)
	,CDynamic: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CDynamic",$_.__params__ = ["t"],$_)
	,CAbstract: ($_=function(name,params) { return {_hx_index:7,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAbstract",$_.__params__ = ["name","params"],$_)
};
haxe_rtti_CType.__constructs__ = [haxe_rtti_CType.CUnknown,haxe_rtti_CType.CEnum,haxe_rtti_CType.CClass,haxe_rtti_CType.CTypedef,haxe_rtti_CType.CFunction,haxe_rtti_CType.CAnonymous,haxe_rtti_CType.CDynamic,haxe_rtti_CType.CAbstract];
var haxe_rtti_Rights = $hxEnums["haxe.rtti.Rights"] = { __ename__:"haxe.rtti.Rights",__constructs__:null
	,RNormal: {_hx_name:"RNormal",_hx_index:0,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RNo: {_hx_name:"RNo",_hx_index:1,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RCall: ($_=function(m) { return {_hx_index:2,m:m,__enum__:"haxe.rtti.Rights",toString:$estr}; },$_._hx_name="RCall",$_.__params__ = ["m"],$_)
	,RMethod: {_hx_name:"RMethod",_hx_index:3,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RDynamic: {_hx_name:"RDynamic",_hx_index:4,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RInline: {_hx_name:"RInline",_hx_index:5,__enum__:"haxe.rtti.Rights",toString:$estr}
};
haxe_rtti_Rights.__constructs__ = [haxe_rtti_Rights.RNormal,haxe_rtti_Rights.RNo,haxe_rtti_Rights.RCall,haxe_rtti_Rights.RMethod,haxe_rtti_Rights.RDynamic,haxe_rtti_Rights.RInline];
var haxe_rtti_TypeTree = $hxEnums["haxe.rtti.TypeTree"] = { __ename__:"haxe.rtti.TypeTree",__constructs__:null
	,TPackage: ($_=function(name,full,subs) { return {_hx_index:0,name:name,full:full,subs:subs,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TPackage",$_.__params__ = ["name","full","subs"],$_)
	,TClassdecl: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TClassdecl",$_.__params__ = ["c"],$_)
	,TEnumdecl: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TEnumdecl",$_.__params__ = ["e"],$_)
	,TTypedecl: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TTypedecl",$_.__params__ = ["t"],$_)
	,TAbstractdecl: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TAbstractdecl",$_.__params__ = ["a"],$_)
};
haxe_rtti_TypeTree.__constructs__ = [haxe_rtti_TypeTree.TPackage,haxe_rtti_TypeTree.TClassdecl,haxe_rtti_TypeTree.TEnumdecl,haxe_rtti_TypeTree.TTypedecl,haxe_rtti_TypeTree.TAbstractdecl];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_rtti_Rtti = function() { };
$hxClasses["haxe.rtti.Rtti"] = haxe_rtti_Rtti;
haxe_rtti_Rtti.__name__ = "haxe.rtti.Rtti";
haxe_rtti_Rtti.getRtti = function(c) {
	var rtti = Reflect.field(c,"__rtti");
	if(rtti == null) {
		throw haxe_Exception.thrown("Class " + c.__name__ + " has no RTTI information, consider adding @:rtti");
	}
	var x = Xml.parse(rtti).firstElement();
	var infos = new haxe_rtti_XmlParser().processElement(x);
	if(infos._hx_index == 1) {
		var c = infos.c;
		return c;
	} else {
		var t = infos;
		throw haxe_Exception.thrown("Enum mismatch: expected TClassDecl but found " + Std.string(t));
	}
};
var haxe_rtti_XmlParser = function() {
	this.root = [];
};
$hxClasses["haxe.rtti.XmlParser"] = haxe_rtti_XmlParser;
haxe_rtti_XmlParser.__name__ = "haxe.rtti.XmlParser";
haxe_rtti_XmlParser.prototype = {
	root: null
	,curplatform: null
	,mkPath: function(p) {
		return p;
	}
	,mkTypeParams: function(p) {
		var pl = p.split(":");
		if(pl[0] == "") {
			return [];
		}
		return pl;
	}
	,mkRights: function(r) {
		switch(r) {
		case "dynamic":
			return haxe_rtti_Rights.RDynamic;
		case "inline":
			return haxe_rtti_Rights.RInline;
		case "method":
			return haxe_rtti_Rights.RMethod;
		case "null":
			return haxe_rtti_Rights.RNo;
		default:
			return haxe_rtti_Rights.RCall(r);
		}
	}
	,xerror: function(c) {
		var tmp;
		if(c.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			tmp = c.nodeName;
		}
		throw haxe_Exception.thrown("Invalid " + tmp);
	}
	,processElement: function(x) {
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var this1 = x;
		var c = this1;
		var _g;
		if(c.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			_g = c.nodeName;
		}
		switch(_g) {
		case "abstract":
			return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
		case "class":
			return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
		case "enum":
			return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
		case "typedef":
			return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
		default:
			return this.xerror(c);
		}
	}
	,xmeta: function(x) {
		var ml = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(x,"m");
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(m,"e");
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				pl.push(haxe_xml_Access.get_innerHTML(p));
			}
			ml.push({ name : haxe_xml__$Access_AttribAccess.resolve(m,"n"), params : pl});
		}
		return ml;
	}
	,xoverloads: function(x) {
		var l = [];
		var m = x.elements();
		while(m.hasNext()) {
			var m1 = m.next();
			l.push(this.xclassfield(m1));
		}
		return l;
	}
	,xpath: function(x) {
		var path = this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path"));
		var params = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			params.push(this.xtype(c1));
		}
		return { path : path, params : params};
	}
	,xclass: function(x) {
		var csuper = null;
		var doc = null;
		var tdynamic = null;
		var interfaces = [];
		var fields = [];
		var statics = [];
		var meta = [];
		var isInterface = x.exists("interface");
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "extends":
				if(isInterface) {
					interfaces.push(this.xpath(c1));
				} else {
					csuper = this.xpath(c1);
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "haxe_dynamic":
				var x1 = c1.firstElement();
				if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
				}
				var this1 = x1;
				tdynamic = this.xtype(this1);
				break;
			case "implements":
				interfaces.push(this.xpath(c1));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			default:
				if(c1.exists("static")) {
					statics.push(this.xclassfield(c1));
				} else {
					fields.push(this.xclassfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), isFinal : x.exists("final"), isInterface : isInterface, params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), superClass : csuper, interfaces : interfaces, fields : fields, statics : statics, tdynamic : tdynamic, platforms : this.defplat(), meta : meta};
	}
	,xclassfield: function(x,defPublic) {
		if(defPublic == null) {
			defPublic = false;
		}
		var e = x.elements();
		var t = this.xtype(e.next());
		var doc = null;
		var meta = [];
		var overloads = null;
		var c = e;
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "overloads":
				overloads = this.xoverloads(c1);
				break;
			default:
				this.xerror(c1);
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		return { name : tmp, type : t, isPublic : x.exists("public") || defPublic, isFinal : x.exists("final"), isOverride : x.exists("override"), line : haxe_xml__$Access_HasAttribAccess.resolve(x,"line") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(x,"line")) : null, doc : doc, get : haxe_xml__$Access_HasAttribAccess.resolve(x,"get") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"get")) : haxe_rtti_Rights.RNormal, set : haxe_xml__$Access_HasAttribAccess.resolve(x,"set") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"set")) : haxe_rtti_Rights.RNormal, params : haxe_xml__$Access_HasAttribAccess.resolve(x,"params") ? this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")) : [], platforms : this.defplat(), meta : meta, overloads : overloads, expr : haxe_xml__$Access_HasAttribAccess.resolve(x,"expr") ? haxe_xml__$Access_AttribAccess.resolve(x,"expr") : null};
	}
	,xenum: function(x) {
		var cl = [];
		var doc = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					cl.push(this.xenumfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), constructors : cl, platforms : this.defplat(), meta : meta};
	}
	,xenumfield: function(x) {
		var args = null;
		var docElements = x.elementsNamed("haxe_doc");
		var xdoc = docElements.hasNext() ? docElements.next() : null;
		var meta = haxe_xml__$Access_HasNodeAccess.resolve(x,"meta") ? this.xmeta(haxe_xml__$Access_NodeAccess.resolve(x,"meta")) : [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(x,"a")) {
			var names = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var elts = x.elements();
			args = [];
			var _g = 0;
			while(_g < names.length) {
				var c = names[_g];
				++_g;
				var opt = false;
				if(c.charAt(0) == "?") {
					opt = true;
					c = HxOverrides.substr(c,1,null);
				}
				args.push({ name : c, opt : opt, t : this.xtype(elts.next())});
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		var tmp1;
		if(xdoc == null) {
			tmp1 = null;
		} else {
			if(xdoc.nodeType != Xml.Document && xdoc.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (xdoc.nodeType == null ? "null" : XmlType.toString(xdoc.nodeType)));
			}
			var this1 = xdoc;
			tmp1 = haxe_xml_Access.get_innerData(this1);
		}
		return { name : tmp, args : args, doc : tmp1, meta : meta, platforms : this.defplat()};
	}
	,xabstract: function(x) {
		var doc = null;
		var impl = null;
		var athis = null;
		var meta = [];
		var to = [];
		var from = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "from":
				var t = c1.elements();
				while(t.hasNext()) {
					var t1 = t.next();
					var x1 = t1.firstElement();
					if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
					}
					var this1 = x1;
					from.push({ t : this.xtype(this1), field : haxe_xml__$Access_HasAttribAccess.resolve(t1,"field") ? haxe_xml__$Access_AttribAccess.resolve(t1,"field") : null});
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "impl":
				impl = this.xclass(haxe_xml__$Access_NodeAccess.resolve(c1,"class"));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "this":
				var x2 = c1.firstElement();
				if(x2.nodeType != Xml.Document && x2.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x2.nodeType == null ? "null" : XmlType.toString(x2.nodeType)));
				}
				var this2 = x2;
				athis = this.xtype(this2);
				break;
			case "to":
				var t2 = c1.elements();
				while(t2.hasNext()) {
					var t3 = t2.next();
					var x3 = t3.firstElement();
					if(x3.nodeType != Xml.Document && x3.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x3.nodeType == null ? "null" : XmlType.toString(x3.nodeType)));
					}
					var this3 = x3;
					to.push({ t : this.xtype(this3), field : haxe_xml__$Access_HasAttribAccess.resolve(t3,"field") ? haxe_xml__$Access_AttribAccess.resolve(t3,"field") : null});
				}
				break;
			default:
				this.xerror(c1);
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), platforms : this.defplat(), meta : meta, athis : athis, to : to, from : from, impl : impl};
	}
	,xtypedef: function(x) {
		var doc = null;
		var t = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					t = this.xtype(c1);
				}
			}
		}
		var types = new haxe_ds_StringMap();
		if(this.curplatform != null) {
			types.h[this.curplatform] = t;
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), type : t, types : types, platforms : this.defplat(), meta : meta};
	}
	,xtype: function(x) {
		var _g;
		if(x.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			_g = x.nodeName;
		}
		switch(_g) {
		case "a":
			var fields = [];
			var f = x.elements();
			while(f.hasNext()) {
				var f1 = f.next();
				var f2 = this.xclassfield(f1,true);
				f2.platforms = [];
				fields.push(f2);
			}
			return haxe_rtti_CType.CAnonymous(fields);
		case "c":
			return haxe_rtti_CType.CClass(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "d":
			var t = null;
			var tx = x.firstElement();
			if(tx != null) {
				if(tx.nodeType != Xml.Document && tx.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (tx.nodeType == null ? "null" : XmlType.toString(tx.nodeType)));
				}
				var this1 = tx;
				t = this.xtype(this1);
			}
			return haxe_rtti_CType.CDynamic(t);
		case "e":
			return haxe_rtti_CType.CEnum(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "f":
			var args = [];
			var aname = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var eargs_current = 0;
			var eargs_array = aname;
			var evalues = haxe_xml__$Access_HasAttribAccess.resolve(x,"v") ? new haxe_iterators_ArrayIterator(haxe_xml__$Access_AttribAccess.resolve(x,"v").split(":")) : null;
			var e = x.elements();
			while(e.hasNext()) {
				var e1 = e.next();
				var opt = false;
				var a = eargs_current < eargs_array.length ? eargs_array[eargs_current++] : null;
				if(a == null) {
					a = "";
				}
				if(a.charAt(0) == "?") {
					opt = true;
					a = HxOverrides.substr(a,1,null);
				}
				var v = evalues == null || evalues.current >= evalues.array.length ? null : evalues.array[evalues.current++];
				args.push({ name : a, opt : opt, t : this.xtype(e1), value : v == "" ? null : v});
			}
			var ret = args[args.length - 1];
			HxOverrides.remove(args,ret);
			return haxe_rtti_CType.CFunction(args,ret.t);
		case "t":
			return haxe_rtti_CType.CTypedef(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "unknown":
			return haxe_rtti_CType.CUnknown;
		case "x":
			return haxe_rtti_CType.CAbstract(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		default:
			return this.xerror(x);
		}
	}
	,xtypeparams: function(x) {
		var p = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			p.push(this.xtype(c1));
		}
		return p;
	}
	,defplat: function() {
		var l = [];
		if(this.curplatform != null) {
			l.push(this.curplatform);
		}
		return l;
	}
	,__class__: haxe_rtti_XmlParser
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		var this1 = x1;
		l.push(this1);
	}
	return l;
};
var haxe_xml_Access = {};
haxe_xml_Access.__properties__ = {get_innerHTML:"get_innerHTML",get_innerData:"get_innerData"};
haxe_xml_Access.get_innerData = function(this1) {
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var it_current = 0;
	var it_array = this1.children;
	if(it_current >= it_array.length) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	var v = it_array[it_current++];
	if(it_current < it_array.length) {
		var n = it_array[it_current++];
		var tmp;
		if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
			if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
			}
			tmp = StringTools.trim(v.nodeValue) == "";
		} else {
			tmp = false;
		}
		if(tmp) {
			if(it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
			var n2 = it_array[it_current++];
			var tmp;
			if(n2.nodeType == Xml.PCData) {
				if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n2.nodeType == null ? "null" : XmlType.toString(n2.nodeType)));
				}
				tmp = StringTools.trim(n2.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp && it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
		}
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not only have data");
	}
	if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
	}
	return v.nodeValue;
};
haxe_xml_Access.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var _g_current = 0;
	var _g_array = this1.children;
	while(_g_current < _g_array.length) {
		var x = _g_array[_g_current++];
		s_b += Std.string(haxe_xml_Printer.print(x));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var history_BrowserHistory = require("history");
var hxbit_ConvertField = function(path,from,to) {
	this.path = path;
	this.from = from;
	this.to = to;
};
$hxClasses["hxbit.ConvertField"] = hxbit_ConvertField;
hxbit_ConvertField.__name__ = "hxbit.ConvertField";
hxbit_ConvertField.prototype = {
	path: null
	,index: null
	,same: null
	,defaultValue: null
	,from: null
	,to: null
	,conv: null
	,__class__: hxbit_ConvertField
};
var hxbit_Convert = function(classPath,ourSchema,schema) {
	var ourMap_h = Object.create(null);
	var _g = 0;
	var _g1 = ourSchema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		ourMap_h[ourSchema.fieldsNames[i]] = ourSchema.fieldsTypes[i];
	}
	this.read = [];
	this.hadCID = !schema.isFinal;
	this.hasCID = !ourSchema.isFinal;
	var map_h = Object.create(null);
	var _g = 0;
	var _g1 = schema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		var oldT = schema.fieldsTypes[i];
		var newT = ourMap_h[schema.fieldsNames[i]];
		var c = new hxbit_ConvertField(classPath + "." + schema.fieldsNames[i],oldT,newT);
		if(newT != null) {
			if(hxbit_Convert.sameType(oldT,newT)) {
				c.same = true;
			} else {
				c.conv = hxbit_Convert.convFuns.h[c.path];
				c.defaultValue = hxbit_Convert.getDefault(newT);
			}
		}
		c.index = this.read.length;
		this.read.push(c);
		map_h[schema.fieldsNames[i]] = c;
	}
	this.write = [];
	var _g = 0;
	var _g1 = ourSchema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		var newT = ourSchema.fieldsTypes[i];
		var c = map_h[ourSchema.fieldsNames[i]];
		if(c == null) {
			c = new hxbit_ConvertField(null,null,newT);
			c.defaultValue = hxbit_Convert.getDefault(newT);
		}
		this.write.push(c);
	}
};
$hxClasses["hxbit.Convert"] = hxbit_Convert;
hxbit_Convert.__name__ = "hxbit.Convert";
hxbit_Convert.sameType = function(a,b) {
	switch(a._hx_index) {
	case 0:
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 16:
			var _g = b.t;
			return true;
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		var _g = a.k;
		var _g1 = a.v;
		switch(b._hx_index) {
		case 7:
			var bk = b.k;
			var bv = b.v;
			var av = _g1;
			var ak = _g;
			if(hxbit_Convert.sameType(ak,bk)) {
				return hxbit_Convert.sameType(av,bv);
			} else {
				return false;
			}
			break;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		var _g = a.k;
		switch(b._hx_index) {
		case 8:
			var b1 = b.k;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		var _g = a.fields;
		switch(b._hx_index) {
		case 9:
			var fb = b.fields;
			var fa = _g;
			if(fa.length != fb.length) {
				return false;
			}
			var _g = 0;
			var _g1 = fa.length;
			while(_g < _g1) {
				var i = _g++;
				var a1 = fa[i];
				var b1 = fb[i];
				if(a1.name != b1.name || a1.opt != b1.opt || !hxbit_Convert.sameType(a1.type,b1.type)) {
					return false;
				}
			}
			return true;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		var _g = a.k;
		if(b._hx_index == 10) {
			var b1 = b.k;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		} else {
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b);
		}
		break;
	case 11:
		var _g = a.k;
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 11:
			var b1 = b.k;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		var _g = a.t;
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 12:
			var b1 = b.t;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		var _g = a.t;
		switch(b._hx_index) {
		case 0:
			return true;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	default:
		if(b._hx_index == 10) {
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		} else {
			return Type.enumEq(a,b);
		}
	}
};
hxbit_Convert.getDefault = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:
		return 0.;
	case 2:
		return false;
	case 5:
		var _g = t.name;
		return null;
	case 6:
		var _g = t.name;
		return null;
	case 7:
		var _g = t.v;
		var k = t.k;
		switch(k._hx_index) {
		case 0:
			return new haxe_ds_IntMap();
		case 3:
			return new haxe_ds_StringMap();
		default:
			return new haxe_ds_ObjectMap();
		}
		break;
	case 8:
		var _g = t.k;
		return [];
	case 9:
		var _g = t.fields;
		return null;
	case 10:
		var t1 = t.k;
		return hxbit_Convert.getDefault(t1);
	case 11:
		var _g = t.k;
		var this1 = new Array(0);
		return this1;
	case 12:
		var _g = t.t;
		return null;
	case 3:case 4:case 13:case 14:case 17:
		return null;
	case 15:
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	case 16:
		var _g = t.t;
		return 0;
	}
};
hxbit_Convert.registerConverter = function(path,f) {
	hxbit_Convert.convFuns.h[path] = f;
};
hxbit_Convert.prototype = {
	read: null
	,write: null
	,hasCID: null
	,hadCID: null
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.write.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var w = this.write[i];
			if(w.from == null) {
				_g.push("insert:" + Std.string(w.defaultValue));
			} else if(w.same) {
				_g.push(i == w.index ? "s" : "@" + w.index);
			} else {
				_g.push("@" + w.index + ":" + Std.string(w.to));
			}
		}
		return _g.toString();
	}
	,__class__: hxbit_Convert
};
var hxbit_RpcMode = $hxEnums["hxbit.RpcMode"] = { __ename__:"hxbit.RpcMode",__constructs__:null
	,All: {_hx_name:"All",_hx_index:0,__enum__:"hxbit.RpcMode",toString:$estr}
	,Clients: {_hx_name:"Clients",_hx_index:1,__enum__:"hxbit.RpcMode",toString:$estr}
	,Server: {_hx_name:"Server",_hx_index:2,__enum__:"hxbit.RpcMode",toString:$estr}
	,Owner: {_hx_name:"Owner",_hx_index:3,__enum__:"hxbit.RpcMode",toString:$estr}
	,Immediate: {_hx_name:"Immediate",_hx_index:4,__enum__:"hxbit.RpcMode",toString:$estr}
};
hxbit_RpcMode.__constructs__ = [hxbit_RpcMode.All,hxbit_RpcMode.Clients,hxbit_RpcMode.Server,hxbit_RpcMode.Owner,hxbit_RpcMode.Immediate];
var hxbit_PropTypeDesc = $hxEnums["hxbit.PropTypeDesc"] = { __ename__:"hxbit.PropTypeDesc",__constructs__:null
	,PInt: {_hx_name:"PInt",_hx_index:0,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFloat: {_hx_name:"PFloat",_hx_index:1,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBool: {_hx_name:"PBool",_hx_index:2,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PString: {_hx_name:"PString",_hx_index:3,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBytes: {_hx_name:"PBytes",_hx_index:4,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PSerializable: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PSerializable",$_.__params__ = ["name"],$_)
	,PEnum: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PEnum",$_.__params__ = ["name"],$_)
	,PMap: ($_=function(k,v) { return {_hx_index:7,k:k,v:v,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PMap",$_.__params__ = ["k","v"],$_)
	,PArray: ($_=function(k) { return {_hx_index:8,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PArray",$_.__params__ = ["k"],$_)
	,PObj: ($_=function(fields) { return {_hx_index:9,fields:fields,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PObj",$_.__params__ = ["fields"],$_)
	,PAlias: ($_=function(k) { return {_hx_index:10,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PAlias",$_.__params__ = ["k"],$_)
	,PVector: ($_=function(k) { return {_hx_index:11,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PVector",$_.__params__ = ["k"],$_)
	,PNull: ($_=function(t) { return {_hx_index:12,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PNull",$_.__params__ = ["t"],$_)
	,PUnknown: {_hx_name:"PUnknown",_hx_index:13,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PDynamic: {_hx_name:"PDynamic",_hx_index:14,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PInt64: {_hx_name:"PInt64",_hx_index:15,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFlags: ($_=function(t) { return {_hx_index:16,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PFlags",$_.__params__ = ["t"],$_)
	,PStruct: {_hx_name:"PStruct",_hx_index:17,__enum__:"hxbit.PropTypeDesc",toString:$estr}
};
hxbit_PropTypeDesc.__constructs__ = [hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PFloat,hxbit_PropTypeDesc.PBool,hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PBytes,hxbit_PropTypeDesc.PSerializable,hxbit_PropTypeDesc.PEnum,hxbit_PropTypeDesc.PMap,hxbit_PropTypeDesc.PArray,hxbit_PropTypeDesc.PObj,hxbit_PropTypeDesc.PAlias,hxbit_PropTypeDesc.PVector,hxbit_PropTypeDesc.PNull,hxbit_PropTypeDesc.PUnknown,hxbit_PropTypeDesc.PDynamic,hxbit_PropTypeDesc.PInt64,hxbit_PropTypeDesc.PFlags,hxbit_PropTypeDesc.PStruct];
var hxbit_Macros = function() { };
$hxClasses["hxbit.Macros"] = hxbit_Macros;
hxbit_Macros.__name__ = "hxbit.Macros";
var hxbit_Schema = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.fieldsNames = [];
	this.fieldsTypes = [];
};
$hxClasses["hxbit.Schema"] = hxbit_Schema;
hxbit_Schema.__name__ = "hxbit.Schema";
hxbit_Schema.__interfaces__ = [hxbit_Serializable];
hxbit_Schema.prototype = {
	isFinal: null
	,fieldsNames: null
	,fieldsTypes: null
	,get_checkSum: function() {
		var s = new hxbit_Serializer();
		s.begin();
		var old = this.__uid;
		this.__uid = 0;
		s.addKnownRef(this);
		this.__uid = old;
		var bytes = s.end();
		return haxe_crypto_Crc32.make(bytes);
	}
	,__uid: null
	,getCLID: function() {
		return hxbit_Schema.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.addByte(this.isFinal ? 1 : 0);
		var a = this.fieldsNames;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v = a[_g];
				++_g;
				if(v == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(v);
					var v1 = b.length + 1;
					if(v1 >= 0 && v1 < 128) {
						__ctx.out.addByte(v1);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v1);
					}
					__ctx.out.add(b);
				}
			}
		}
		var a = this.fieldsTypes;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v = a[_g];
				++_g;
				hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(__ctx,v);
			}
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("isFinal");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("fieldsNames");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("fieldsTypes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")));
		schema.isFinal = hxbit_Serializer.isClassFinal(hxbit_Schema.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.isFinal = __ctx.input.b[__ctx.inPos++] != 0;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len = v;
				if(len == 0) {
					e0 = null;
				} else {
					--len;
					var s = __ctx.input.getString(__ctx.inPos,len);
					__ctx.inPos += len;
					e0 = s;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.fieldsNames = tmp;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(__ctx);
				e0 = __e;
				a[i] = e0;
			}
			tmp = a;
		}
		this.fieldsTypes = tmp;
	}
	,__class__: hxbit_Schema
	,__properties__: {get_checkSum:"get_checkSum"}
};
var hxbit_SerializableEnum = function() { };
$hxClasses["hxbit.SerializableEnum"] = hxbit_SerializableEnum;
hxbit_SerializableEnum.__name__ = "hxbit.SerializableEnum";
var hxbit_StructSerializable = function() { };
$hxClasses["hxbit.StructSerializable"] = hxbit_StructSerializable;
hxbit_StructSerializable.__name__ = "hxbit.StructSerializable";
hxbit_StructSerializable.__isInterface__ = true;
hxbit_StructSerializable.prototype = {
	customSerialize: null
	,customUnserialize: null
	,__class__: hxbit_StructSerializable
};
var hxbit_enumSer_Hxbit_$PropTypeDesc = function() { };
$hxClasses["hxbit.enumSer.Hxbit_PropTypeDesc"] = hxbit_enumSer_Hxbit_$PropTypeDesc;
hxbit_enumSer_Hxbit_$PropTypeDesc.__name__ = "hxbit.enumSer.Hxbit_PropTypeDesc";
hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			ctx.out.addByte(1);
			break;
		case 1:
			ctx.out.addByte(2);
			break;
		case 2:
			ctx.out.addByte(3);
			break;
		case 3:
			ctx.out.addByte(4);
			break;
		case 4:
			ctx.out.addByte(5);
			break;
		case 5:
			var name = v.name;
			ctx.out.addByte(6);
			if(name == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(name);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.addByte(v1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v1);
				}
				ctx.out.add(b);
			}
			break;
		case 6:
			var name = v.name;
			ctx.out.addByte(7);
			if(name == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(name);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.addByte(v1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v1);
				}
				ctx.out.add(b);
			}
			break;
		case 7:
			var k = v.k;
			var v1 = v.v;
			ctx.out.addByte(8);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,v1);
			break;
		case 8:
			var k = v.k;
			ctx.out.addByte(9);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k);
			break;
		case 9:
			var fields = v.fields;
			ctx.out.addByte(10);
			if(fields == null) {
				ctx.out.addByte(0);
			} else {
				var v1 = fields.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.addByte(v1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v1);
				}
				var _g = 0;
				while(_g < fields.length) {
					var v1 = fields[_g];
					++_g;
					var v2 = v1;
					if(v2 == null) {
						ctx.out.addByte(0);
					} else {
						var fbits = 0;
						if(v2.name != null) {
							fbits |= 1;
						}
						if(v2.type != null) {
							fbits |= 2;
						}
						var v3 = fbits + 1;
						if(v3 >= 0 && v3 < 128) {
							ctx.out.addByte(v3);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v3);
						}
						if((fbits & 1) != 0) {
							var s = v2.name;
							if(s == null) {
								ctx.out.addByte(0);
							} else {
								var b = haxe_io_Bytes.ofString(s);
								var v4 = b.length + 1;
								if(v4 >= 0 && v4 < 128) {
									ctx.out.addByte(v4);
								} else {
									ctx.out.addByte(128);
									ctx.out.addInt32(v4);
								}
								ctx.out.add(b);
							}
						}
						ctx.out.addByte(v2.opt ? 1 : 0);
						if((fbits & 2) != 0) {
							hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,v2.type);
						}
					}
				}
			}
			break;
		case 10:
			var k = v.k;
			ctx.out.addByte(11);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k);
			break;
		case 11:
			var k = v.k;
			ctx.out.addByte(12);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k);
			break;
		case 12:
			var t = v.t;
			ctx.out.addByte(13);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,t);
			break;
		case 13:
			ctx.out.addByte(14);
			break;
		case 14:
			ctx.out.addByte(15);
			break;
		case 15:
			ctx.out.addByte(16);
			break;
		case 16:
			var t = v.t;
			ctx.out.addByte(17);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,t);
			break;
		case 17:
			ctx.out.addByte(18);
			break;
		}
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		return hxbit_PropTypeDesc.PInt;
	case 2:
		return hxbit_PropTypeDesc.PFloat;
	case 3:
		return hxbit_PropTypeDesc.PBool;
	case 4:
		return hxbit_PropTypeDesc.PString;
	case 5:
		return hxbit_PropTypeDesc.PBytes;
	case 6:
		var _name;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		return hxbit_PropTypeDesc.PSerializable(_name);
	case 7:
		var _name;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		return hxbit_PropTypeDesc.PEnum(_name);
	case 8:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		var _v;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_v = __e;
		return hxbit_PropTypeDesc.PMap(_k,_v);
	case 9:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PArray(_k);
	case 10:
		var _fields;
		var e0;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			_fields = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var v = ctx.input.b[ctx.inPos++];
				if(v == 128) {
					v = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				var fbits = v;
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var name = null;
					if((fbits & 1) != 0) {
						var v1 = ctx.input.b[ctx.inPos++];
						if(v1 == 128) {
							v1 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len = v1;
						if(len == 0) {
							name = null;
						} else {
							--len;
							var s = ctx.input.getString(ctx.inPos,len);
							ctx.inPos += len;
							name = s;
						}
					}
					var opt = ctx.input.b[ctx.inPos++] != 0;
					if((fbits & 2) != 0) {
						var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
						type = __e;
					}
					e0 = { name : name, opt : opt, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PObj(_fields);
	case 11:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PAlias(_k);
	case 12:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PVector(_k);
	case 13:
		var _t;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e;
		return hxbit_PropTypeDesc.PNull(_t);
	case 14:
		return hxbit_PropTypeDesc.PUnknown;
	case 15:
		return hxbit_PropTypeDesc.PDynamic;
	case 16:
		return hxbit_PropTypeDesc.PInt64;
	case 17:
		var _t;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e;
		return hxbit_PropTypeDesc.PFlags(_t);
	case 18:
		return hxbit_PropTypeDesc.PStruct;
	default:
		throw haxe_Exception.thrown("Invalid enum index " + b);
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PFloat");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBool");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PString");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBytes");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PString;
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PSerializable");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PString;
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PEnum");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var v;
	var t = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PMap");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PArray");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ name : "name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "opt", opt : false, type : hxbit_PropTypeDesc.PBool},{ name : "type", opt : false, type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")}]));
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PObj");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PAlias");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PVector");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PNull");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PUnknown");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PDynamic");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt64");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PFlags");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PStruct");
	return s;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_supported:"get_supported"};
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var js_Cookie = function() { };
$hxClasses["js.Cookie"] = js_Cookie;
js_Cookie.__name__ = "js.Cookie";
js_Cookie.all = function() {
	var h = new haxe_ds_StringMap();
	var a = window.document.cookie.split(";");
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		e = StringTools.ltrim(e);
		var t = e.split("=");
		if(t.length < 2) {
			continue;
		}
		var value = decodeURIComponent(t[1].split("+").join(" "));
		h.h[t[0]] = value;
	}
	return h;
};
js_Cookie.get = function(name) {
	return js_Cookie.all().h[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var loader_BinaryLoader = function(url) {
	this.url = url;
	this.xhr = new XMLHttpRequest();
};
$hxClasses["loader.BinaryLoader"] = loader_BinaryLoader;
loader_BinaryLoader.__name__ = "loader.BinaryLoader";
loader_BinaryLoader.create = function(url,p,onLoaded) {
	return loader_BinaryLoader.dbQuery(url,p,onLoaded);
};
loader_BinaryLoader.dbQuery = function(url,dbAP,onLoaded) {
	haxe_Log.trace(url,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 30, className : "loader.BinaryLoader", methodName : "dbQuery"});
	var s = new hxbit_Serializer();
	var bl = new loader_BinaryLoader(url);
	var dbQuery = new db_DbQuery(dbAP);
	var b = s.serialize(dbQuery);
	bl.param = b.b.bufferValue;
	bl.cB = onLoaded;
	bl.load();
	return bl.xhr;
};
loader_BinaryLoader.go = function(url,dbAP,onLoaded) {
	haxe_Log.trace(dbAP,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 51, className : "loader.BinaryLoader", methodName : "go"});
	var s = new hxbit_Serializer();
	var bl = new loader_BinaryLoader(url);
	var dbQuery = new db_DbQuery(dbAP);
	haxe_Log.trace(dbQuery,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 55, className : "loader.BinaryLoader", methodName : "go"});
	var b = s.serialize(dbQuery);
	bl.param = b.b.bufferValue;
	bl.dBa = onLoaded;
	bl.loadJson();
	return bl.xhr;
};
loader_BinaryLoader.prototype = {
	cB: null
	,dBa: null
	,param: null
	,xhr: null
	,url: null
	,onLoaded: function(bytes) {
		if(bytes != null && bytes.length > 0) {
			var u = new hxbit_Serializer();
			var data = u.unserialize(bytes,shared_DbData);
			this.cB(data);
		} else {
			haxe_Log.trace("got nothing",{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 89, className : "loader.BinaryLoader", methodName : "onLoaded"});
		}
	}
	,onProgress: function(cur,max) {
	}
	,onError: function(msg) {
		debug_Out.dumpStack(haxe_CallStack.callStack(),{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 97, className : "loader.BinaryLoader", methodName : "onError"});
		haxe_Log.trace(msg,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 98, className : "loader.BinaryLoader", methodName : "onError"});
		throw haxe_Exception.thrown(msg);
	}
	,load: function() {
		var _gthis = this;
		this.xhr.open("POST",this.url,true);
		this.xhr.responseType = "arraybuffer";
		this.xhr.onerror = function(e) {
			haxe_Log.trace(e,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 110, className : "loader.BinaryLoader", methodName : "load"});
			haxe_Log.trace(e.type,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 111, className : "loader.BinaryLoader", methodName : "load"});
		};
		this.xhr.withCredentials = true;
		this.xhr.onload = function(e) {
			if(_gthis.xhr.status != 200) {
				_gthis.onError(_gthis.xhr.statusText);
				return;
			}
			_gthis.onLoaded(haxe_io_Bytes.ofData(_gthis.xhr.response));
		};
		this.xhr.send(this.param);
	}
	,loadJson: function() {
		var _gthis = this;
		this.xhr.open("POST",this.url,true);
		this.xhr.responseType = "arraybuffer";
		this.xhr.onerror = function(e) {
			haxe_Log.trace(e,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 142, className : "loader.BinaryLoader", methodName : "loadJson"});
			haxe_Log.trace(e.type,{ fileName : "src/loader/BinaryLoader.hx", lineNumber : 143, className : "loader.BinaryLoader", methodName : "loadJson"});
		};
		this.xhr.withCredentials = true;
		this.xhr.onload = function(e) {
			if(_gthis.xhr.status != 200) {
				_gthis.onError(_gthis.xhr.statusText);
				return;
			}
		};
		this.xhr.send(this.param);
	}
	,__class__: loader_BinaryLoader
};
var macrotools_AbstractEnumTools = function() { };
$hxClasses["macrotools.AbstractEnumTools"] = macrotools_AbstractEnumTools;
macrotools_AbstractEnumTools.__name__ = "macrotools.AbstractEnumTools";
var model_ORM = function(data) {
	this.fields = haxe_rtti_Meta.getFields(js_Boot.getClass(this));
	this.fields.id = { dataType : ["bigint"]};
	this.fieldsInitalized = [];
	this.fieldsModified = [];
	this.formBuilder = new view_shared_FormBuilder(this);
	this.propertyNames = Reflect.fields(this.fields);
	this.state = { };
	this.fieldsInitalized = [];
	this.fieldsModified = [];
	var _g = 0;
	var _g1 = this.propertyNames;
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		if(Object.prototype.hasOwnProperty.call(data.h,f)) {
			var nv = data.h[f];
			var _g2 = Reflect.field(this.fields,f).dataType[0];
			var _hx_tmp;
			var tmp;
			switch(_g2) {
			case "bigint[]":
				tmp = nv == null ? [] : nv;
				break;
			case "date":
				_hx_tmp = _g2.indexOf("timestamp");
				tmp = _hx_tmp == 0 ? nv == null ? "" : nv : nv == null ? "" : nv;
				break;
			default:
				_hx_tmp = _g2.indexOf("timestamp");
				tmp = _hx_tmp == 0 ? nv == null ? "" : nv : nv;
			}
			Reflect.setProperty(this,f,tmp);
		}
	}
};
$hxClasses["model.ORM"] = model_ORM;
model_ORM.__name__ = "model.ORM";
model_ORM.prototype = {
	id: null
	,set_id: function(id) {
		if(this.initialized("id")) {
			this.modified("id");
		}
		this.id = id;
		return id;
	}
	,fieldsInitalized: null
	,fieldsModified: null
	,fieldFormat: null
	,formBuilder: null
	,propertyNames: null
	,state: null
	,fields: null
	,allModified: function() {
		var data = { };
		var _g = 0;
		var _g1 = this.fieldsModified;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var nv = Reflect.field(this,f);
			var dType = Reflect.field(this.fields,f).dataType[0];
			haxe_Log.trace(nv + (" => " + model_ORM.dsep + " : " + dType + "::") + dType.indexOf("numeric"),{ fileName : "src/model/ORM.hx", lineNumber : 80, className : "model.ORM", methodName : "allModified"});
			var value;
			var _hx_tmp;
			var _hx_tmp1;
			switch(dType) {
			case "bigint[]":
				value = nv == null ? [] : nv;
				break;
			case "date":
				_hx_tmp1 = dType.indexOf("timestamp");
				value = _hx_tmp1 == 0 ? nv == null ? "" : nv : nv == null ? "" : nv;
				break;
			default:
				_hx_tmp1 = dType.indexOf("timestamp");
				if(_hx_tmp1 == 0) {
					value = nv == null ? "" : nv;
				} else {
					_hx_tmp = dType.indexOf("numeric");
					if(_hx_tmp == 0) {
						nv = nv.split(" ")[0];
						var dvals = nv.split(model_ORM.dsep);
						haxe_Log.trace(dvals,{ fileName : "src/model/ORM.hx", lineNumber : 92, className : "model.ORM", methodName : "allModified"});
						value = "" + dvals[0] + "." + dvals[1];
					} else {
						value = nv;
					}
				}
			}
			data[f] = value;
		}
		return data;
	}
	,initFields: function() {
		var me = js_Boot.getClass(this);
		var rtti = haxe_rtti_Rtti.getRtti(me);
		var rttiFields = rtti.fields;
		var dTypes = [];
		var _g = 0;
		while(_g < rttiFields.length) {
			var fld = rttiFields[_g];
			++_g;
			if(Lambda.has(this.propertyNames,fld.name)) {
				if(!Lambda.has(dTypes,fld.meta[0].params[0])) {
					dTypes.push(fld.meta[0].params[0]);
				}
			}
		}
	}
	,initialized: function(attName) {
		if(attName == null) {
			return this.fieldsInitalized.length > 0;
		}
		if(!Lambda.has(this.fieldsInitalized,attName)) {
			this.fieldsInitalized.push(attName);
			return false;
		}
		return true;
	}
	,modified: function(attName) {
		if(attName == null) {
			return this.fieldsModified.length > 0;
		}
		if(!Lambda.has(this.fieldsModified,attName)) {
			this.fieldsModified.push(attName);
			return false;
		}
		return true;
	}
	,reset: function(attName) {
		var r = this.fieldsModified.length;
		if(this.fieldsModified.length == 0) {
			return 0;
		}
		if(attName != null) {
			if(HxOverrides.remove(this.fieldsModified,attName)) {
				return 1;
			} else {
				return 0;
			}
		}
		this.fieldsModified = [];
		return r;
	}
	,save: function() {
	}
	,__class__: model_ORM
};
var model_Contact = function(data) {
	model_ORM.call(this,data);
};
$hxClasses["model.Contact"] = model_Contact;
model_Contact.__name__ = "model.Contact";
model_Contact.__super__ = model_ORM;
model_Contact.prototype = $extend(model_ORM.prototype,{
	mandator: null
	,set_mandator: function(mandator) {
		if(this.initialized("mandator")) {
			this.modified("mandator");
		}
		this.mandator = mandator;
		return mandator;
	}
	,creation_date: null
	,set_creation_date: function(creation_date) {
		if(this.initialized("creation_date")) {
			this.modified("creation_date");
		}
		this.creation_date = creation_date;
		return creation_date;
	}
	,status: null
	,set_status: function(status) {
		if(this.initialized("status")) {
			this.modified("status");
		}
		this.status = status;
		return status;
	}
	,use_email: null
	,set_use_email: function(use_email) {
		if(this.initialized("use_email")) {
			this.modified("use_email");
		}
		this.use_email = use_email;
		return use_email;
	}
	,company_name: null
	,set_company_name: function(company_name) {
		if(this.initialized("company_name")) {
			this.modified("company_name");
		}
		this.company_name = company_name;
		return company_name;
	}
	,care_of: null
	,set_care_of: function(care_of) {
		if(this.initialized("care_of")) {
			this.modified("care_of");
		}
		this.care_of = care_of;
		return care_of;
	}
	,phone_code: null
	,set_phone_code: function(phone_code) {
		if(this.initialized("phone_code")) {
			this.modified("phone_code");
		}
		this.phone_code = phone_code;
		return phone_code;
	}
	,phone_number: null
	,set_phone_number: function(phone_number) {
		if(this.initialized("phone_number")) {
			this.modified("phone_number");
		}
		this.phone_number = phone_number;
		return phone_number;
	}
	,fax: null
	,set_fax: function(fax) {
		if(this.initialized("fax")) {
			this.modified("fax");
		}
		this.fax = fax;
		return fax;
	}
	,title: null
	,set_title: function(title) {
		if(this.initialized("title")) {
			this.modified("title");
		}
		this.title = title;
		return title;
	}
	,first_name: null
	,set_first_name: function(first_name) {
		if(this.initialized("first_name")) {
			this.modified("first_name");
		}
		this.first_name = first_name;
		return first_name;
	}
	,last_name: null
	,set_last_name: function(last_name) {
		if(this.initialized("last_name")) {
			this.modified("last_name");
		}
		this.last_name = last_name;
		return last_name;
	}
	,address: null
	,set_address: function(address) {
		if(this.initialized("address")) {
			this.modified("address");
		}
		this.address = address;
		return address;
	}
	,address_2: null
	,set_address_2: function(address_2) {
		if(this.initialized("address_2")) {
			this.modified("address_2");
		}
		this.address_2 = address_2;
		return address_2;
	}
	,city: null
	,set_city: function(city) {
		if(this.initialized("city")) {
			this.modified("city");
		}
		this.city = city;
		return city;
	}
	,postal_code: null
	,set_postal_code: function(postal_code) {
		if(this.initialized("postal_code")) {
			this.modified("postal_code");
		}
		this.postal_code = postal_code;
		return postal_code;
	}
	,country_code: null
	,set_country_code: function(country_code) {
		if(this.initialized("country_code")) {
			this.modified("country_code");
		}
		this.country_code = country_code;
		return country_code;
	}
	,gender: null
	,set_gender: function(gender) {
		if(this.initialized("gender")) {
			this.modified("gender");
		}
		this.gender = gender;
		return gender;
	}
	,date_of_birth: null
	,set_date_of_birth: function(date_of_birth) {
		if(this.initialized("date_of_birth")) {
			this.modified("date_of_birth");
		}
		this.date_of_birth = date_of_birth;
		return date_of_birth;
	}
	,mobile: null
	,set_mobile: function(mobile) {
		if(this.initialized("mobile")) {
			this.modified("mobile");
		}
		this.mobile = mobile;
		return mobile;
	}
	,email: null
	,set_email: function(email) {
		if(this.initialized("email")) {
			this.modified("email");
		}
		this.email = email;
		return email;
	}
	,comments: null
	,set_comments: function(comments) {
		if(this.initialized("comments")) {
			this.modified("comments");
		}
		this.comments = comments;
		return comments;
	}
	,edited_by: null
	,set_edited_by: function(edited_by) {
		if(this.initialized("edited_by")) {
			this.modified("edited_by");
		}
		this.edited_by = edited_by;
		return edited_by;
	}
	,merged: null
	,set_merged: function(merged) {
		if(this.initialized("merged")) {
			this.modified("merged");
		}
		this.merged = merged;
		return merged;
	}
	,last_updated: null
	,set_last_updated: function(last_updated) {
		if(this.initialized("last_updated")) {
			this.modified("last_updated");
		}
		this.last_updated = last_updated;
		return last_updated;
	}
	,owner: null
	,set_owner: function(owner) {
		if(this.initialized("owner")) {
			this.modified("owner");
		}
		this.owner = owner;
		return owner;
	}
	,__class__: model_Contact
	,__properties__: {set_owner:"set_owner",set_last_updated:"set_last_updated",set_merged:"set_merged",set_edited_by:"set_edited_by",set_comments:"set_comments",set_email:"set_email",set_mobile:"set_mobile",set_date_of_birth:"set_date_of_birth",set_gender:"set_gender",set_country_code:"set_country_code",set_postal_code:"set_postal_code",set_city:"set_city",set_address_2:"set_address_2",set_address:"set_address",set_last_name:"set_last_name",set_first_name:"set_first_name",set_title:"set_title",set_fax:"set_fax",set_phone_number:"set_phone_number",set_phone_code:"set_phone_code",set_care_of:"set_care_of",set_company_name:"set_company_name",set_use_email:"set_use_email",set_status:"set_status",set_creation_date:"set_creation_date",set_mandator:"set_mandator"}
});
var React_PureComponent = require("react").PureComponent;
var react_DateControl = function(props) {
	haxe_Log.trace(props.value,{ fileName : "lib/react/DateControl.hx", lineNumber : 30, className : "react.DateControl", methodName : "new"});
	React_PureComponent.call(this,props);
	this.fpRef = React.createRef();
};
$hxClasses["react.DateControl"] = react_DateControl;
react_DateControl.__name__ = "react.DateControl";
react_DateControl.__super__ = React_PureComponent;
react_DateControl.prototype = $extend(React_PureComponent.prototype,{
	fpRef: null
	,fpInstance: null
	,tip: null
	,componentDidMount: function() {
		var fP = App.flatpickr;
		var val = this.props.value == null ? "" : "00.00.0000";
		haxe_Log.trace("" + val + " =>" + Std.string(this.props.value) + "<<",{ fileName : "lib/react/DateControl.hx", lineNumber : 44, className : "react.DateControl", methodName : "componentDidMount"});
		this.fpInstance = fP(react_ReactRef.get_current(this.fpRef),{ allowInput : !this.props.disabled, altFormat : this.props.options.dateFormat, clickOpens : !this.props.disabled, dateFormat : "Y-m-d", altInput : true, defaultValue : this.props.value, locale : "de", onChange : $bind(this,this.onChange), onClose : $bind(this,this.onClose), onOpen : $bind(this,this.onOpen), onReady : $bind(this,this.onReady)});
		haxe_Log.trace("fpInstance.input.value:" + Std.string(this.fpInstance.input.value),{ fileName : "lib/react/DateControl.hx", lineNumber : 59, className : "react.DateControl", methodName : "componentDidMount"});
	}
	,onOpen: function(e) {
		haxe_Log.trace(e,{ fileName : "lib/react/DateControl.hx", lineNumber : 63, className : "react.DateControl", methodName : "onOpen"});
	}
	,onChange: function(_) {
		if(this.props.comp != null) {
			view_shared_io_BaseForm.doChange(this.props.comp,this.props.name,this.fpInstance.input.value);
		}
	}
	,onClose: function(sDates,val,me) {
		haxe_Log.trace(val,{ fileName : "lib/react/DateControl.hx", lineNumber : 75, className : "react.DateControl", methodName : "onClose"});
		if(this.tip != null) {
			this.tip.clear();
		}
	}
	,onReady: function(sDates,val,me) {
		haxe_Log.trace("" + Std.string(sDates) + " " + val + " ",{ fileName : "lib/react/DateControl.hx", lineNumber : 84, className : "react.DateControl", methodName : "onReady"});
	}
	,render: function() {
		if(this.props == null) {
			haxe_Log.trace(null,{ fileName : "lib/react/DateControl.hx", lineNumber : 92, className : "react.DateControl", methodName : "render"});
			return null;
		}
		return React.createElement(react_ReactType.fromString("input"),{ ref : this.fpRef, className : "h100", name : this.props.name, id : this.props.name, defaultValue : this.props.value});
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `DateControl`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: react_DateControl
});
var react_DateTimeControl = function(props) {
	React_PureComponent.call(this,props);
	this.fpRef = React.createRef();
};
$hxClasses["react.DateTimeControl"] = react_DateTimeControl;
react_DateTimeControl.__name__ = "react.DateTimeControl";
react_DateTimeControl.parseTimestampz = function(tz) {
	var _this = new EReg("[^0-9]","g").split(tz);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Std.parseInt(_this[i]);
	}
	var b = result;
	b[1] -= 1;
	haxe_Log.trace(b.join("-"),{ fileName : "lib/react/DateTimeControl.hx", lineNumber : 134, className : "react.DateTimeControl", methodName : "parseTimestampz"});
	b.pop();
	haxe_Log.trace("DateTools has makeUtc:" + (Type.getClassFields(DateTools).indexOf("makeUtc") != -1 ? "Y" : "N"),{ fileName : "lib/react/DateTimeControl.hx", lineNumber : 136, className : "react.DateTimeControl", methodName : "parseTimestampz"});
	return new Date(Date.UTC(b[0],b[1],b[2],b[3],b[4],b[5]));
};
react_DateTimeControl.__super__ = React_PureComponent;
react_DateTimeControl.prototype = $extend(React_PureComponent.prototype,{
	fpRef: null
	,fpInstance: null
	,tip: null
	,componentDidMount: function() {
		var _gthis = this;
		var fP = App.flatpickr;
		var val = this.props.value == null ? null : react_DateTimeControl.parseTimestampz(this.props.value);
		haxe_Log.trace("given:" + Std.string(this.props.value) + " got:" + Std.string(val) + " format:" + this.props.options.dateFormat,{ fileName : "lib/react/DateTimeControl.hx", lineNumber : 40, className : "react.DateTimeControl", methodName : "componentDidMount"});
		this.fpInstance = fP(react_ReactRef.get_current(this.fpRef),{ allowInput : !this.props.disabled, altFormat : this.props.options.dateFormat, dateFormat : "Y-m-d H:i:S", altInput : true, altInputClass : "form-control input", defaultValue : this.props.value, onClose : $bind(this,this.onClose), onReady : $bind(this,this.onReady)});
		var altInput = this.fpInstance.altInput;
		if(!this.props.disabled) {
			var tmp = this.props.value == null ? "" : this.fpInstance.formatDate(HxOverrides.strDate(this.props.value),this.fpInstance.config.altFormat);
			altInput.value = tmp;
			haxe_Log.trace(this.fpInstance.input.value,{ fileName : "lib/react/DateTimeControl.hx", lineNumber : 62, className : "react.DateTimeControl", methodName : "componentDidMount"});
			altInput.addEventListener("keyup",function(ev) {
				_gthis.fpInstance.close();
				if(ev.key == "Enter") {
					var dF = shared_DateFormat.parseDE(altInput.value);
					if(dF.result == "OK") {
						if(_gthis.tip != null) {
							_gthis.tip.clear();
						}
					} else {
						ev.preventDefault();
						ev.stopImmediatePropagation();
						_gthis.tip = new view_shared_io_Tooltip(altInput.parentElement,{ data : Std.string(dF.result), classes : ["danger","active"]});
						return;
					}
				}
				var val = altInput.value;
				var pd = _gthis.fpInstance.parseDate(val,_gthis.fpInstance.config.altFormat);
				var fD = _gthis.fpInstance.formatDate(pd,_gthis.fpInstance.config.altFormat);
				if(val == fD) {
					_gthis.fpInstance.setDate(val,true,_gthis.fpInstance.config.altFormat);
				}
			});
			altInput.addEventListener("blur",function(ev) {
				var dF = shared_DateFormat.parseDE(altInput.value);
				if(dF.result == "OK") {
					if(_gthis.tip != null) {
						_gthis.tip.clear();
					}
				} else {
					ev.preventDefault();
					ev.stopImmediatePropagation();
					_gthis.tip = new view_shared_io_Tooltip(altInput.parentElement,{ data : Std.string(dF.result), classes : ["danger","active"]});
				}
				var val = altInput.value;
				var pd = _gthis.fpInstance.parseDate(val,_gthis.fpInstance.config.altFormat);
				var fD = _gthis.fpInstance.formatDate(pd,_gthis.fpInstance.config.altFormat);
				haxe_Log.trace("" + val + "==" + fD,{ fileName : "lib/react/DateTimeControl.hx", lineNumber : 118, className : "react.DateTimeControl", methodName : "componentDidMount"});
				if(val == fD) {
					_gthis.fpInstance.setDate(val,true,_gthis.fpInstance.config.altFormat);
					if(_gthis.tip != null) {
						_gthis.tip.clear();
					}
				}
			});
		}
	}
	,onChange: function(_) {
		if(this.props.comp != null) {
			this.props.comp.doChange(this.props.name,this.fpInstance.input.value);
		}
	}
	,onClose: function(sDates,val,me) {
		if(this.tip != null) {
			this.tip.clear();
		}
		if(this.fpInstance.altInput.value == null) {
			if(val != this.fpInstance.formatDate(this.fpInstance.parseDate(this.fpInstance.altInput.value),this.fpInstance.config.altFormat)) {
				this.fpInstance.altInput.value = this.fpInstance.formatDate(this.fpInstance.input.value,this.fpInstance.config.altFormat);
				this.tip = new view_shared_io_Tooltip(this.fpInstance.altInput.parentElement,{ data : "DateFormat", classes : ["danger","active"]});
			}
		}
	}
	,onReady: function(sDates,val,me) {
		haxe_Log.trace("" + Std.string(sDates) + " " + val + " ",{ fileName : "lib/react/DateTimeControl.hx", lineNumber : 174, className : "react.DateTimeControl", methodName : "onReady"});
	}
	,render: function() {
		if(this.props == null) {
			haxe_Log.trace(null,{ fileName : "lib/react/DateTimeControl.hx", lineNumber : 182, className : "react.DateTimeControl", methodName : "render"});
			return null;
		}
		return React.createElement(react_ReactType.fromString("input"),{ ref : this.fpRef, className : "h100", name : this.props.name, id : this.props.name, disabled : this.props.disabled, defaultValue : this.props.value});
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `DateTimeControl`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: react_DateTimeControl
});
var react_DateTimePicker = require("react-flatpickr").default;
var React_Fragment = require("react").Fragment;
var react_NumberFormat = require("react-number-format").default;
var react_Partial = function() { };
$hxClasses["react.Partial"] = react_Partial;
react_Partial.__name__ = "react.Partial";
var react_ReactComponent = function() { };
$hxClasses["react.ReactComponent"] = react_ReactComponent;
react_ReactComponent.__name__ = "react.ReactComponent";
var react_ReactContext = {};
react_ReactContext.toReactType = function(this1) {
	return this1;
};
var ReactDOM = require("react-dom");
var react_ReactDateTimeClock = function(props) {
	React_Component.call(this,props);
};
$hxClasses["react.ReactDateTimeClock"] = react_ReactDateTimeClock;
react_ReactDateTimeClock.__name__ = "react.ReactDateTimeClock";
react_ReactDateTimeClock.__super__ = React_Component;
react_ReactDateTimeClock.prototype = $extend(React_Component.prototype,{
	render: function() {
		return React.createElement(react_ReactType.fromComp(react_DateTimePicker),{ value : this.props.value, className : this.props.className, locale : "de-DE", disabled : true, clearIcon : null, calendarIcon : null});
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `ReactDateTimeClock`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: react_ReactDateTimeClock
});
var react_ReactPaginate = require("react-paginate").default;
var PropTypes = require("prop-types");
var react_ReactRef = {};
react_ReactRef.__properties__ = {get_current:"get_current"};
react_ReactRef.get_current = function(this1) {
	return this1.current;
};
var react_ReactType = {};
react_ReactType.fromString = function(s) {
	if(s == null) {
		return react_ReactType.isNull();
	}
	return s;
};
react_ReactType.fromFunction = function(f) {
	if(f == null) {
		return react_ReactType.isNull();
	}
	return f;
};
react_ReactType.fromFunctionWithProps = function(f) {
	if(f == null) {
		return react_ReactType.isNull();
	}
	return f;
};
react_ReactType.fromComp = function(cls) {
	if(cls == null) {
		return react_ReactType.isNull();
	}
	if(cls.__jsxStatic != null) {
		return cls.__jsxStatic;
	}
	return cls;
};
react_ReactType.isNull = function() {
	$global.console.error("Runtime value for ReactType is null." + " Something may be wrong with your externs.");
	return "div";
};
var react_ReactTypeOf = {};
react_ReactTypeOf._new = function(node) {
	var this1 = node;
	return this1;
};
react_ReactTypeOf.fromFunctionWithProps = function(f) {
	var this1 = react_ReactType.fromFunctionWithProps(f);
	return this1;
};
react_ReactTypeOf.fromComp = function(cls) {
	var this1 = react_ReactType.fromComp(cls);
	return this1;
};
react_ReactTypeOf.fromFunctionWithoutProps = function(f) {
	var this1 = react_ReactType.fromFunction(f);
	return this1;
};
react_ReactTypeOf.fromCompWithoutProps = function(cls) {
	var this1 = react_ReactType.fromComp(cls);
	return this1;
};
var react_ReactUtil = function() { };
$hxClasses["react.ReactUtil"] = react_ReactUtil;
react_ReactUtil.__name__ = "react.ReactUtil";
react_ReactUtil.cx = function(arrayOrObject) {
	var array;
	if(((arrayOrObject) instanceof Array)) {
		array = arrayOrObject;
	} else {
		array = [arrayOrObject];
	}
	var classes = [];
	var _g = 0;
	while(_g < array.length) {
		var value = array[_g];
		++_g;
		if(value == null) {
			continue;
		}
		if(typeof(value) == "string") {
			classes.push(value);
		} else {
			var _g1 = 0;
			var _g2 = Reflect.fields(value);
			while(_g1 < _g2.length) {
				var field = _g2[_g1];
				++_g1;
				if(Reflect.field(value,field) == true) {
					classes.push(field);
				}
			}
		}
	}
	return classes.join(" ");
};
react_ReactUtil.assign = function(target,sources) {
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		if(source != null) {
			var _g1 = 0;
			var _g2 = Reflect.fields(source);
			while(_g1 < _g2.length) {
				var field = _g2[_g1];
				++_g1;
				target[field] = Reflect.field(source,field);
			}
		}
	}
	return target;
};
react_ReactUtil.copy = function(source1,source2) {
	var target = { };
	var _g = 0;
	var _g1 = Reflect.fields(source1);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		target[field] = Reflect.field(source1,field);
	}
	if(source2 != null) {
		var _g = 0;
		var _g1 = Reflect.fields(source2);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			target[field] = Reflect.field(source2,field);
		}
	}
	return target;
};
react_ReactUtil.copyWithout = function(source1,source2,fields) {
	var target = { };
	var _g = 0;
	var _g1 = Reflect.fields(source1);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Lambda.has(fields,field)) {
			target[field] = Reflect.field(source1,field);
		}
	}
	if(source2 != null) {
		var _g = 0;
		var _g1 = Reflect.fields(source2);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(!Lambda.has(fields,field)) {
				target[field] = Reflect.field(source2,field);
			}
		}
	}
	return target;
};
react_ReactUtil.mapi = function(items,map) {
	if(items == null) {
		return null;
	}
	var newItems = [];
	var _g = 0;
	var _g1 = items.length;
	while(_g < _g1) {
		var i = _g++;
		newItems.push(map(i,items[i]));
	}
	return newItems;
};
react_ReactUtil.cloneChildren = function(children,props) {
	if(Reflect.isFunction(props)) {
		return React.Children.map(children,function(child) {
			if(!React.isValidElement(child)) {
				return child;
			}
			return React.cloneElement(child,props(child));
		});
	} else {
		return React.Children.map(children,function(child) {
			if(!React.isValidElement(child)) {
				return child;
			}
			return React.cloneElement(child,props);
		});
	}
};
react_ReactUtil.shouldComponentUpdate = function(component,nextProps,nextState) {
	if(react_ReactUtil.shallowCompare(component.props,nextProps)) {
		return !react_ReactUtil.shallowCompare(component.state,nextState);
	} else {
		return true;
	}
};
react_ReactUtil.shallowCompare = function(a,b) {
	var aFields = Reflect.fields(a);
	var bFields = Reflect.fields(b);
	if(aFields.length != bFields.length) {
		return false;
	}
	var _g = 0;
	while(_g < aFields.length) {
		var field = aFields[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(b,field) || Reflect.field(b,field) != Reflect.field(a,field)) {
			return false;
		}
	}
	return true;
};
react_ReactUtil.shallowChanges = function(obj,obj2,ignoreEqual) {
	var keys1 = react_ReactUtil.getKeys(obj);
	var keys2 = react_ReactUtil.getKeys(obj2);
	var added = [];
	var deleted = [];
	var updated = [];
	var hasRet = false;
	var _g = 0;
	var _g1 = keys1.length;
	while(_g < _g1) {
		var i = _g++;
		var key = keys1[i];
		if(Lambda.has(keys2,key)) {
			if(Reflect.field(obj,key) != Reflect.field(obj2,key)) {
				updated.push(key);
				hasRet = true;
			}
		} else {
			deleted.push(key);
			hasRet = true;
		}
	}
	var _g = 0;
	var _g1 = keys2.length;
	while(_g < _g1) {
		var i = _g++;
		var key = keys2[i];
		if(!Lambda.has(keys1,key)) {
			added.push(key);
			hasRet = true;
		}
	}
	if(!hasRet) {
		return null;
	}
	var ret = { };
	if(added.length > 0) {
		ret.added = added;
	}
	if(deleted.length > 0) {
		ret.deleted = deleted;
	}
	if(updated.length > 0) {
		ret.updated = updated;
	}
	return ret;
};
react_ReactUtil.getKeys = function(obj) {
	var _g = [];
	var _g1 = 0;
	var _g2 = Reflect.fields(obj);
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(Reflect.field(obj,v) != null) {
			_g.push(v);
		}
	}
	return _g;
};
var react_intl_ReactIntl = require("react-intl");
var react_intl_comp_IntlProvider = require("react-intl").IntlProvider;
var react_macro_ReactDebugMacro = function() { };
$hxClasses["react.macro.ReactDebugMacro"] = react_macro_ReactDebugMacro;
react_macro_ReactDebugMacro.__name__ = "react.macro.ReactDebugMacro";
var react_router_NavLink = require("react-router-dom").NavLink;
var react_router_ReactRouter = require("react-router");
var react_router_Redirect = require("react-router").Redirect;
var react_router_Route = require("react-router").Route;
var react_router_Router = require("react-router").Router;
var react_router_bundle_Bundle = function() { };
$hxClasses["react.router.bundle.Bundle"] = react_router_bundle_Bundle;
react_router_bundle_Bundle.__name__ = "react.router.bundle.Bundle";
var redux_IMiddleware = function() { };
$hxClasses["redux.IMiddleware"] = redux_IMiddleware;
redux_IMiddleware.__name__ = "redux.IMiddleware";
redux_IMiddleware.__isInterface__ = true;
redux_IMiddleware.prototype = {
	store: null
	,middleware: null
	,__class__: redux_IMiddleware
};
var redux_IReducer = function() { };
$hxClasses["redux.IReducer"] = redux_IReducer;
redux_IReducer.__name__ = "redux.IReducer";
redux_IReducer.__isInterface__ = true;
redux_IReducer.prototype = {
	initState: null
	,reduce: null
	,__class__: redux_IReducer
};
var redux_Redux = require("redux");
var redux_Action = {};
redux_Action._new = function(a) {
	var this1 = a;
	return this1;
};
redux_Action.map = function(ev) {
	var e = Type.getEnum(ev);
	var this1 = { type : e.__ename__, value : ev};
	return this1;
};
var redux_Store = function() { };
$hxClasses["redux.Store"] = redux_Store;
redux_Store.__name__ = "redux.Store";
redux_Store.__isInterface__ = true;
redux_Store.prototype = {
	getState: null
	,dispatch: null
	,subscribe: null
	,replaceReducer: null
	,__class__: redux_Store
};
var redux_StoreBuilder = function() { };
$hxClasses["redux.StoreBuilder"] = redux_StoreBuilder;
redux_StoreBuilder.__name__ = "redux.StoreBuilder";
redux_StoreBuilder.mapReducer = function(of,service) {
	var type = of.__ename__;
	return function(state,action) {
		if(state == null) {
			state = service.initState;
		}
		if(action.type == type) {
			return service.reduce(state,action.value);
		} else {
			return state;
		}
	};
};
redux_StoreBuilder.mapMiddleware = function(of,service) {
	var type = of.__ename__;
	return function(store) {
		service.store = store;
		return function(next) {
			return function(action) {
				if(action.type == type) {
					var skip = function() {
						return next(action);
					};
					return service.middleware(action.value,skip);
				}
				return next(action);
			};
		};
	};
};
redux_StoreBuilder.createStore = function(rootReducer,initState,enhancer) {
	if(initState == null) {
		initState = { };
	}
	if(window.__REDUX_DEVTOOLS_EXTENSION__) {
		if(enhancer == null) {
			enhancer = window.__REDUX_DEVTOOLS_EXTENSION__();
		} else {
			enhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(enhancer);
		}
	}
	return redux_Redux.createStore(rootReducer,initState,enhancer);
};
var redux_react_IConnectedComponent = function() { };
$hxClasses["redux.react.IConnectedComponent"] = redux_react_IConnectedComponent;
redux_react_IConnectedComponent.__name__ = "redux.react.IConnectedComponent";
redux_react_IConnectedComponent.__isInterface__ = true;
var redux_react_Provider = function(props) {
	React_Component.call(this,props);
};
$hxClasses["redux.react.Provider"] = redux_react_Provider;
redux_react_Provider.__name__ = "redux.react.Provider";
redux_react_Provider.__super__ = React_Component;
redux_react_Provider.prototype = $extend(React_Component.prototype,{
	getChildContext: function() {
		return { store : this.props.store};
	}
	,render: function() {
		return React.Children.only(this.props.children);
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `Provider`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: redux_react_Provider
});
var redux_react_ReactRedux = require("react-redux");
var redux_thunk_Thunk = $hxEnums["redux.thunk.Thunk"] = { __ename__:"redux.thunk.Thunk",__constructs__:null
	,Action: ($_=function(cb) { return {_hx_index:0,cb:cb,__enum__:"redux.thunk.Thunk",toString:$estr}; },$_._hx_name="Action",$_.__params__ = ["cb"],$_)
	,WithParams: ($_=function(cb) { return {_hx_index:1,cb:cb,__enum__:"redux.thunk.Thunk",toString:$estr}; },$_._hx_name="WithParams",$_.__params__ = ["cb"],$_)
};
redux_thunk_Thunk.__constructs__ = [redux_thunk_Thunk.Action,redux_thunk_Thunk.WithParams];
var redux_thunk_ThunkMiddleware = function(params) {
	this.params = params;
};
$hxClasses["redux.thunk.ThunkMiddleware"] = redux_thunk_ThunkMiddleware;
redux_thunk_ThunkMiddleware.__name__ = "redux.thunk.ThunkMiddleware";
redux_thunk_ThunkMiddleware.__interfaces__ = [redux_IMiddleware];
redux_thunk_ThunkMiddleware.prototype = {
	store: null
	,params: null
	,middleware: function(action,next) {
		switch(action._hx_index) {
		case 0:
			var cb = action.cb;
			return cb(($_=this.store,$bind($_,$_.dispatch)),($_=this.store,$bind($_,$_.getState)));
		case 1:
			var cb = action.cb;
			return cb(($_=this.store,$bind($_,$_.dispatch)),($_=this.store,$bind($_,$_.getState)),this.params);
		}
	}
	,__class__: redux_thunk_ThunkMiddleware
};
var shared_DBMetaData = function(server) {
	if(server == null) {
		server = false;
	}
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	if(server) {
		this.dataErrors = new haxe_ds_StringMap();
		this.dataInfo = new haxe_ds_StringMap();
		this.dataRows = [];
	} else {
		this.dataFields = new haxe_ds_IntMap();
	}
};
$hxClasses["shared.DBMetaData"] = shared_DBMetaData;
shared_DBMetaData.__name__ = "shared.DBMetaData";
shared_DBMetaData.__interfaces__ = [hxbit_Serializable];
shared_DBMetaData.prototype = {
	dataErrors: null
	,dataInfo: null
	,dataParams: null
	,dataRows: null
	,dataFields: null
	,stateToDataParams: function(dT) {
		var dM = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = Reflect.fields(dT);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var key = Std.parseInt(f);
			var value = this.dynToDataField(Reflect.field(dT,f));
			dM.h[key] = value;
		}
		return dM;
	}
	,dynToDataField: function(d) {
		return { id : d.id, mandator : d.mandator, table_name : d.table_name, field_name : d.field_name, field_type : d.field_type, format_display : d.format_display, format_store : d.format_store, admin_only : d.admin_only, required : d.required, readonly : d.readonly, use_as_index : d.use_as_index};
	}
	,__uid: null
	,getCLID: function() {
		return shared_DBMetaData.__clid;
	}
	,serialize: function(__ctx) {
		var a = this.dataErrors;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				__ctx.addDynamic(a.h[k]);
			}
		}
		var a = this.dataInfo;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				__ctx.addDynamic(a.h[k]);
			}
		}
		var a = this.dataParams;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				var v1 = a.h[k];
				if(v1 == null) {
					__ctx.out.addByte(0);
				} else {
					var _g1 = [];
					var h = v1.h;
					var k_h = h;
					var k_keys = Object.keys(h);
					var k_length = k_keys.length;
					var k_current = 0;
					while(k_current < k_length) {
						var k1 = k_keys[k_current++];
						_g1.push(k1);
					}
					var keys1 = _g1;
					var v2 = keys1.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.addByte(v2);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v2);
					}
					var _g2 = 0;
					while(_g2 < keys1.length) {
						var k2 = keys1[_g2];
						++_g2;
						if(k2 == null) {
							__ctx.out.addByte(0);
						} else {
							var b1 = haxe_io_Bytes.ofString(k2);
							var v3 = b1.length + 1;
							if(v3 >= 0 && v3 < 128) {
								__ctx.out.addByte(v3);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v3);
							}
							__ctx.out.add(b1);
						}
						__ctx.addDynamic(v1.h[k2]);
					}
				}
			}
		}
		var a = this.dataRows;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v = a[_g];
				++_g;
				if(v == null) {
					__ctx.out.addByte(0);
				} else {
					var _g1 = [];
					var h = v.h;
					var k_h = h;
					var k_keys = Object.keys(h);
					var k_length = k_keys.length;
					var k_current = 0;
					while(k_current < k_length) {
						var k = k_keys[k_current++];
						_g1.push(k);
					}
					var keys = _g1;
					var v1 = keys.length + 1;
					if(v1 >= 0 && v1 < 128) {
						__ctx.out.addByte(v1);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v1);
					}
					var _g2 = 0;
					while(_g2 < keys.length) {
						var k1 = keys[_g2];
						++_g2;
						if(k1 == null) {
							__ctx.out.addByte(0);
						} else {
							var b = haxe_io_Bytes.ofString(k1);
							var v2 = b.length + 1;
							if(v2 >= 0 && v2 < 128) {
								__ctx.out.addByte(v2);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v2);
							}
							__ctx.out.add(b);
						}
						__ctx.addDynamic(v.h[k1]);
					}
				}
			}
		}
		var a = this.dataFields;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var k = a.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				_g.push(k1);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k >= 0 && k < 128) {
					__ctx.out.addByte(k);
				} else {
					__ctx.out.addByte(128);
					__ctx.out.addInt32(k);
				}
				var v = a.h[k];
				if(v == null) {
					__ctx.out.addByte(0);
				} else {
					var fbits = 0;
					if(v.field_name != null) {
						fbits |= 1;
					}
					if(v.field_type != null) {
						fbits |= 2;
					}
					if(v.format_display != null) {
						fbits |= 4;
					}
					if(v.format_store != null) {
						fbits |= 8;
					}
					if(v.table_name != null) {
						fbits |= 16;
					}
					var v1 = fbits + 1;
					if(v1 >= 0 && v1 < 128) {
						__ctx.out.addByte(v1);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v1);
					}
					__ctx.out.addByte(v.admin_only ? 1 : 0);
					if((fbits & 1) != 0) {
						var s = v.field_name;
						if(s == null) {
							__ctx.out.addByte(0);
						} else {
							var b = haxe_io_Bytes.ofString(s);
							var v2 = b.length + 1;
							if(v2 >= 0 && v2 < 128) {
								__ctx.out.addByte(v2);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v2);
							}
							__ctx.out.add(b);
						}
					}
					if((fbits & 2) != 0) {
						var s1 = v.field_type;
						if(s1 == null) {
							__ctx.out.addByte(0);
						} else {
							var b1 = haxe_io_Bytes.ofString(s1);
							var v3 = b1.length + 1;
							if(v3 >= 0 && v3 < 128) {
								__ctx.out.addByte(v3);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v3);
							}
							__ctx.out.add(b1);
						}
					}
					if((fbits & 4) != 0) {
						var s2 = v.format_display;
						if(s2 == null) {
							__ctx.out.addByte(0);
						} else {
							var b2 = haxe_io_Bytes.ofString(s2);
							var v4 = b2.length + 1;
							if(v4 >= 0 && v4 < 128) {
								__ctx.out.addByte(v4);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v4);
							}
							__ctx.out.add(b2);
						}
					}
					if((fbits & 8) != 0) {
						var s3 = v.format_store;
						if(s3 == null) {
							__ctx.out.addByte(0);
						} else {
							var b3 = haxe_io_Bytes.ofString(s3);
							var v5 = b3.length + 1;
							if(v5 >= 0 && v5 < 128) {
								__ctx.out.addByte(v5);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v5);
							}
							__ctx.out.add(b3);
						}
					}
					var v6 = v.id;
					if(v6 >= 0 && v6 < 128) {
						__ctx.out.addByte(v6);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v6);
					}
					var v7 = v.mandator;
					if(v7 >= 0 && v7 < 128) {
						__ctx.out.addByte(v7);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v7);
					}
					__ctx.out.addByte(v.readonly ? 1 : 0);
					__ctx.out.addByte(v.required ? 1 : 0);
					if((fbits & 16) != 0) {
						var s4 = v.table_name;
						if(s4 == null) {
							__ctx.out.addByte(0);
						} else {
							var b4 = haxe_io_Bytes.ofString(s4);
							var v8 = b4.length + 1;
							if(v8 >= 0 && v8 < 128) {
								__ctx.out.addByte(v8);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v8);
							}
							__ctx.out.add(b4);
						}
					}
					__ctx.out.addByte(v.use_as_index ? 1 : 0);
				}
			}
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("dataErrors");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PDynamic));
		schema.fieldsNames.push("dataInfo");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PDynamic));
		schema.fieldsNames.push("dataParams");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PDynamic)));
		schema.fieldsNames.push("dataRows");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PDynamic)));
		schema.fieldsNames.push("dataFields");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PObj([{ name : "admin_only", opt : false, type : hxbit_PropTypeDesc.PBool},{ name : "field_name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "field_type", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "format_display", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "format_store", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "id", opt : false, type : hxbit_PropTypeDesc.PInt},{ name : "mandator", opt : false, type : hxbit_PropTypeDesc.PInt},{ name : "readonly", opt : false, type : hxbit_PropTypeDesc.PBool},{ name : "required", opt : false, type : hxbit_PropTypeDesc.PBool},{ name : "table_name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "use_as_index", opt : false, type : hxbit_PropTypeDesc.PBool}])));
		schema.isFinal = hxbit_Serializer.isClassFinal(shared_DBMetaData.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				v0 = __ctx.getDynamic();
				var v1 = v0;
				m.h[k] = v1;
			}
			tmp = m;
		}
		this.dataErrors = tmp;
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				v0 = __ctx.getDynamic();
				var v1 = v0;
				m.h[k] = v1;
			}
			tmp = m;
		}
		this.dataInfo = tmp;
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				var k1;
				var v1;
				var v2 = __ctx.input.b[__ctx.inPos++];
				if(v2 == 128) {
					v2 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len2 = v2;
				if(len2 == 0) {
					v0 = null;
				} else {
					var m1 = new haxe_ds_StringMap();
					while(--len2 > 0) {
						var v3 = __ctx.input.b[__ctx.inPos++];
						if(v3 == 128) {
							v3 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len3 = v3;
						if(len3 == 0) {
							k1 = null;
						} else {
							--len3;
							var s1 = __ctx.input.getString(__ctx.inPos,len3);
							__ctx.inPos += len3;
							k1 = s1;
						}
						var k2 = k1;
						v1 = __ctx.getDynamic();
						var v4 = v1;
						m1.h[k2] = v4;
					}
					v0 = m1;
				}
				var v5 = v0;
				m.h[k] = v5;
			}
			tmp = m;
		}
		this.dataParams = tmp;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var k1;
				var v1;
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len = v;
				if(len == 0) {
					e0 = null;
				} else {
					var m = new haxe_ds_StringMap();
					while(--len > 0) {
						var v2 = __ctx.input.b[__ctx.inPos++];
						if(v2 == 128) {
							v2 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len1 = v2;
						if(len1 == 0) {
							k1 = null;
						} else {
							--len1;
							var s = __ctx.input.getString(__ctx.inPos,len1);
							__ctx.inPos += len1;
							k1 = s;
						}
						var k = k1;
						v1 = __ctx.getDynamic();
						var v3 = v1;
						m.h[k] = v3;
					}
					e0 = m;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.dataRows = tmp;
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_IntMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				k0 = v;
				var k = k0;
				var v1 = __ctx.input.b[__ctx.inPos++];
				if(v1 == 128) {
					v1 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var fbits = v1;
				if(fbits == 0) {
					v0 = null;
				} else {
					--fbits;
					var table_name = null;
					var format_store = null;
					var format_display = null;
					var field_type = null;
					var field_name = null;
					var admin_only = __ctx.input.b[__ctx.inPos++] != 0;
					if((fbits & 1) != 0) {
						var v2 = __ctx.input.b[__ctx.inPos++];
						if(v2 == 128) {
							v2 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len1 = v2;
						if(len1 == 0) {
							field_name = null;
						} else {
							--len1;
							var s = __ctx.input.getString(__ctx.inPos,len1);
							__ctx.inPos += len1;
							field_name = s;
						}
					}
					if((fbits & 2) != 0) {
						var v3 = __ctx.input.b[__ctx.inPos++];
						if(v3 == 128) {
							v3 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len2 = v3;
						if(len2 == 0) {
							field_type = null;
						} else {
							--len2;
							var s1 = __ctx.input.getString(__ctx.inPos,len2);
							__ctx.inPos += len2;
							field_type = s1;
						}
					}
					if((fbits & 4) != 0) {
						var v4 = __ctx.input.b[__ctx.inPos++];
						if(v4 == 128) {
							v4 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len3 = v4;
						if(len3 == 0) {
							format_display = null;
						} else {
							--len3;
							var s2 = __ctx.input.getString(__ctx.inPos,len3);
							__ctx.inPos += len3;
							format_display = s2;
						}
					}
					if((fbits & 8) != 0) {
						var v5 = __ctx.input.b[__ctx.inPos++];
						if(v5 == 128) {
							v5 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len4 = v5;
						if(len4 == 0) {
							format_store = null;
						} else {
							--len4;
							var s3 = __ctx.input.getString(__ctx.inPos,len4);
							__ctx.inPos += len4;
							format_store = s3;
						}
					}
					var v6 = __ctx.input.b[__ctx.inPos++];
					if(v6 == 128) {
						v6 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					var id = v6;
					var v7 = __ctx.input.b[__ctx.inPos++];
					if(v7 == 128) {
						v7 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					var mandator = v7;
					var readonly = __ctx.input.b[__ctx.inPos++] != 0;
					var required = __ctx.input.b[__ctx.inPos++] != 0;
					if((fbits & 16) != 0) {
						var v8 = __ctx.input.b[__ctx.inPos++];
						if(v8 == 128) {
							v8 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len5 = v8;
						if(len5 == 0) {
							table_name = null;
						} else {
							--len5;
							var s4 = __ctx.input.getString(__ctx.inPos,len5);
							__ctx.inPos += len5;
							table_name = s4;
						}
					}
					var use_as_index = __ctx.input.b[__ctx.inPos++] != 0;
					v0 = { admin_only : admin_only, field_name : field_name, field_type : field_type, format_display : format_display, format_store : format_store, id : id, mandator : mandator, readonly : readonly, required : required, table_name : table_name, use_as_index : use_as_index};
				}
				var v9 = v0;
				m.h[k] = v9;
			}
			tmp = m;
		}
		this.dataFields = tmp;
	}
	,__class__: shared_DBMetaData
};
var shared_DateFormat = function() { };
$hxClasses["shared.DateFormat"] = shared_DateFormat;
shared_DateFormat.__name__ = "shared.DateFormat";
shared_DateFormat.parseDE = function(dS,required) {
	dS = StringTools.trim(dS);
	if(dS == "") {
		return { result : required ? "IsEmpty" : "OK"};
	}
	if(dS.length != 10 || new EReg("\\s|[a-zA-Z]","").match(dS)) {
		return { result : "DateFormat"};
	}
	var _this = dS.split(".");
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Std.parseInt(_this[i]);
	}
	var dP = result;
	if(dP.length != 3) {
		return { result : "DateFormat"};
	}
	if(dP[1] == null || dP[1] == 0 || dP[1] > 12) {
		return { result : "MonthFormatRange"};
	}
	if(dP[2] == null || dP[2] == 0 || dP[2] < 1000 || dP[2] > 2999) {
		return { result : "YearFormatRange"};
	}
	var day = App.sprintf("%02d",dP[0]);
	var month = App.sprintf("%02d",dP[1]);
	var year = App.sprintf("%d",dP[2]);
	var checkDayDate = HxOverrides.strDate("01-" + month + "-" + year);
	var lastDay = DateTools.getMonthDays(checkDayDate);
	if(dP[0] == null || dP[0] == 0 || dP[0] > lastDay) {
		return { result : "DayFormatRange"};
	}
	return { date : HxOverrides.strDate("" + year + "-" + month + "-" + day), result : "OK"};
};
shared_DateFormat.parseTimestampz = function(tz) {
	var _this = new EReg("[^0-9]","g").split(tz);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Std.parseInt(_this[i]);
	}
	var b = result;
	b[1] -= 1;
	b[6] = 0;
	haxe_Log.trace(b.join("-"),{ fileName : "../lib/shared/DateFormat.hx", lineNumber : 69, className : "shared.DateFormat", methodName : "parseTimestampz"});
	b.pop();
	return new Date(Reflect.field(DateTools,"makeUtc").apply(DateTools,b));
};
var shared_DbData = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.dataErrors = new haxe_ds_StringMap();
	this.dataInfo = new haxe_ds_StringMap();
	this.dataParams = new haxe_ds_StringMap();
	this.dataRows = [];
};
$hxClasses["shared.DbData"] = shared_DbData;
shared_DbData.__name__ = "shared.DbData";
shared_DbData.__interfaces__ = [hxbit_Serializable];
shared_DbData.prototype = {
	dataErrors: null
	,dataInfo: null
	,dataParams: null
	,dataRows: null
	,__uid: null
	,getCLID: function() {
		return shared_DbData.__clid;
	}
	,serialize: function(__ctx) {
		var a = this.dataErrors;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				var v1 = a.h[k];
				if(v1 == null) {
					__ctx.out.addByte(0);
				} else {
					var b1 = haxe_io_Bytes.ofString(v1);
					var v2 = b1.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.addByte(v2);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v2);
					}
					__ctx.out.add(b1);
				}
			}
		}
		var a = this.dataInfo;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				__ctx.addDynamic(a.h[k]);
			}
		}
		var a = this.dataParams;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var _g = [];
			var h = a.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(k);
			}
			var keys = _g;
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(k);
					var v = b.length + 1;
					if(v >= 0 && v < 128) {
						__ctx.out.addByte(v);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v);
					}
					__ctx.out.add(b);
				}
				var v1 = a.h[k];
				if(v1 == null) {
					__ctx.out.addByte(0);
				} else {
					var _g1 = [];
					var h = v1.h;
					var k_h = h;
					var k_keys = Object.keys(h);
					var k_length = k_keys.length;
					var k_current = 0;
					while(k_current < k_length) {
						var k1 = k_keys[k_current++];
						_g1.push(k1);
					}
					var keys1 = _g1;
					var v2 = keys1.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.addByte(v2);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v2);
					}
					var _g2 = 0;
					while(_g2 < keys1.length) {
						var k2 = keys1[_g2];
						++_g2;
						if(k2 == null) {
							__ctx.out.addByte(0);
						} else {
							var b1 = haxe_io_Bytes.ofString(k2);
							var v3 = b1.length + 1;
							if(v3 >= 0 && v3 < 128) {
								__ctx.out.addByte(v3);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v3);
							}
							__ctx.out.add(b1);
						}
						var v4 = v1.h[k2];
						if(v4 == null) {
							__ctx.out.addByte(0);
						} else {
							var b2 = haxe_io_Bytes.ofString(v4);
							var v5 = b2.length + 1;
							if(v5 >= 0 && v5 < 128) {
								__ctx.out.addByte(v5);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v5);
							}
							__ctx.out.add(b2);
						}
					}
				}
			}
		}
		var a = this.dataRows;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v = a[_g];
				++_g;
				if(v == null) {
					__ctx.out.addByte(0);
				} else {
					var _g1 = [];
					var h = v.h;
					var k_h = h;
					var k_keys = Object.keys(h);
					var k_length = k_keys.length;
					var k_current = 0;
					while(k_current < k_length) {
						var k = k_keys[k_current++];
						_g1.push(k);
					}
					var keys = _g1;
					var v1 = keys.length + 1;
					if(v1 >= 0 && v1 < 128) {
						__ctx.out.addByte(v1);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v1);
					}
					var _g2 = 0;
					while(_g2 < keys.length) {
						var k1 = keys[_g2];
						++_g2;
						if(k1 == null) {
							__ctx.out.addByte(0);
						} else {
							var b = haxe_io_Bytes.ofString(k1);
							var v2 = b.length + 1;
							if(v2 >= 0 && v2 < 128) {
								__ctx.out.addByte(v2);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v2);
							}
							__ctx.out.add(b);
						}
						var v3 = v.h[k1];
						if(v3 == null) {
							__ctx.out.addByte(0);
						} else {
							var b1 = haxe_io_Bytes.ofString(v3);
							var v4 = b1.length + 1;
							if(v4 >= 0 && v4 < 128) {
								__ctx.out.addByte(v4);
							} else {
								__ctx.out.addByte(128);
								__ctx.out.addInt32(v4);
							}
							__ctx.out.add(b1);
						}
					}
				}
			}
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("dataErrors");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("dataInfo");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PDynamic));
		schema.fieldsNames.push("dataParams");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PString)));
		schema.fieldsNames.push("dataRows");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PString)));
		schema.isFinal = hxbit_Serializer.isClassFinal(shared_DbData.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				var v1 = __ctx.input.b[__ctx.inPos++];
				if(v1 == 128) {
					v1 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len2 = v1;
				if(len2 == 0) {
					v0 = null;
				} else {
					--len2;
					var s1 = __ctx.input.getString(__ctx.inPos,len2);
					__ctx.inPos += len2;
					v0 = s1;
				}
				var v2 = v0;
				m.h[k] = v2;
			}
			tmp = m;
		}
		this.dataErrors = tmp;
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				v0 = __ctx.getDynamic();
				var v1 = v0;
				m.h[k] = v1;
			}
			tmp = m;
		}
		this.dataInfo = tmp;
		var k0;
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v;
				if(len1 == 0) {
					k0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k0 = s;
				}
				var k = k0;
				var k1;
				var v1;
				var v2 = __ctx.input.b[__ctx.inPos++];
				if(v2 == 128) {
					v2 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len2 = v2;
				if(len2 == 0) {
					v0 = null;
				} else {
					var m1 = new haxe_ds_StringMap();
					while(--len2 > 0) {
						var v3 = __ctx.input.b[__ctx.inPos++];
						if(v3 == 128) {
							v3 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len3 = v3;
						if(len3 == 0) {
							k1 = null;
						} else {
							--len3;
							var s1 = __ctx.input.getString(__ctx.inPos,len3);
							__ctx.inPos += len3;
							k1 = s1;
						}
						var k2 = k1;
						var v4 = __ctx.input.b[__ctx.inPos++];
						if(v4 == 128) {
							v4 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len4 = v4;
						if(len4 == 0) {
							v1 = null;
						} else {
							--len4;
							var s2 = __ctx.input.getString(__ctx.inPos,len4);
							__ctx.inPos += len4;
							v1 = s2;
						}
						var v5 = v1;
						m1.h[k2] = v5;
					}
					v0 = m1;
				}
				var v6 = v0;
				m.h[k] = v6;
			}
			tmp = m;
		}
		this.dataParams = tmp;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var k1;
				var v1;
				var v = __ctx.input.b[__ctx.inPos++];
				if(v == 128) {
					v = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len = v;
				if(len == 0) {
					e0 = null;
				} else {
					var m = new haxe_ds_StringMap();
					while(--len > 0) {
						var v2 = __ctx.input.b[__ctx.inPos++];
						if(v2 == 128) {
							v2 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len1 = v2;
						if(len1 == 0) {
							k1 = null;
						} else {
							--len1;
							var s = __ctx.input.getString(__ctx.inPos,len1);
							__ctx.inPos += len1;
							k1 = s;
						}
						var k = k1;
						var v3 = __ctx.input.b[__ctx.inPos++];
						if(v3 == 128) {
							v3 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len2 = v3;
						if(len2 == 0) {
							v1 = null;
						} else {
							--len2;
							var s1 = __ctx.input.getString(__ctx.inPos,len2);
							__ctx.inPos += len2;
							v1 = s1;
						}
						var v4 = v1;
						m.h[k] = v4;
					}
					e0 = m;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.dataRows = tmp;
	}
	,__class__: shared_DbData
};
var shared_DbDataTools = function() { };
$hxClasses["shared.DbDataTools"] = shared_DbDataTools;
shared_DbDataTools.__name__ = "shared.DbDataTools";
shared_DbDataTools.create = function(dataErrors,dataInfo,dataParams,dataRows) {
	var dbData = new shared_DbData();
	dbData.dataErrors = dataErrors == null ? new haxe_ds_StringMap() : dataErrors;
	var tmp;
	if(dataInfo == null) {
		var _g = new haxe_ds_StringMap();
		var value = DateTools.format(new Date(),"%Y-%m-%d_%H:%M:%S");
		_g.h["datetime"] = value;
		tmp = _g;
	} else {
		tmp = new haxe_ds_StringMap();
	}
	dbData.dataInfo = tmp;
	dbData.dataParams = dataParams;
	dbData.dataRows = dataRows;
	return dbData;
};
var shared_FieldFormat = function() { };
$hxClasses["shared.FieldFormat"] = shared_FieldFormat;
shared_FieldFormat.__name__ = "shared.FieldFormat";
shared_FieldFormat.display = function(v,dv) {
	if(dv.field_type == "Date") {
		return DateTools.format(HxOverrides.strDate(v),dv.format_display);
	} else {
		return null;
	}
};
var shared_Utils = function() { };
$hxClasses["shared.Utils"] = shared_Utils;
shared_Utils.__name__ = "shared.Utils";
shared_Utils.compare = function(ob1,ob2) {
	var keys = Reflect.fields(ob1);
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		var tmp = Reflect.field(ob1,k) != Reflect.field(ob2,k);
	}
};
shared_Utils.getAllByKey = function(am,key) {
	if(key == null) {
		key = "id";
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < am.length) {
		var ma = am[_g1];
		++_g1;
		_g.push(ma.h[key]);
	}
	return _g;
};
shared_Utils.keysList = function(ki) {
	var l = [];
	var k = ki;
	while(k.hasNext()) {
		var k1 = k.next();
		l.push(k1);
	}
	return l;
};
shared_Utils.sKeysList = function(ki) {
	var l = [];
	var k = ki;
	while(k.hasNext()) {
		var k1 = k.next();
		l.push(k1);
	}
	return l;
};
shared_Utils.argList = function(path,keys,del) {
	if(del == null) {
		del = "/";
	}
	var segments = path.split(del);
	segments.shift();
	var key = null;
	var lastKey = keys.pop();
	var aL = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		var value = segments.shift();
		aL.h[k] = value;
	}
	var value = segments.length > 0 ? del + segments.join(del) : del;
	aL.h[lastKey] = value;
	return aL;
};
shared_Utils.extend = function(obj1,obj2) {
	var keys = Reflect.fields(obj2);
	if(obj1 == null) {
		obj1 = { };
	}
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		var value = Reflect.field(obj2,k);
		obj1[k] = value;
	}
	return obj1;
};
shared_Utils.each = function(object,cb) {
	var keys = Reflect.fields(object);
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		cb(k,Reflect.field(object,k));
	}
};
shared_Utils.dynaMap = function(object) {
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g2 = Reflect.fields(object);
	while(_g1 < _g2.length) {
		var k = _g2[_g1];
		++_g1;
		_g.h[k] = Std.string(Reflect.field(object,k));
	}
	return _g;
};
shared_Utils.dynaDynMap = function(object) {
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g2 = Reflect.fields(object);
	while(_g1 < _g2.length) {
		var k = _g2[_g1];
		++_g1;
		var value = shared_Utils.dynaMap(Reflect.field(object,k));
		_g.h[k] = value;
	}
	return _g;
};
shared_Utils.genKey = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.methodName + ":" + i.lineNumber + ":" : "";
	var key = i.methodName + "_" + Std.string(++shared_Utils.kIndex);
	return key;
};
shared_Utils.stateToDataParams = function(dT) {
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g2 = Reflect.fields(dT);
	while(_g1 < _g2.length) {
		var f = _g2[_g1];
		++_g1;
		var value = shared_Utils.dynToMap(Reflect.field(dT,f));
		_g.h[f] = value;
	}
	return _g;
};
shared_Utils.dynArray2MapArray = function(dT) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < dT.length) {
		var dR = dT[_g1];
		++_g1;
		_g.push(shared_Utils.dynToMap(dR));
	}
	return _g;
};
shared_Utils.dynToMap = function(d) {
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g2 = Reflect.fields(d);
	while(_g1 < _g2.length) {
		var f = _g2[_g1];
		++_g1;
		_g.h[f] = Reflect.field(d,f);
	}
	return _g;
};
shared_Utils.MapToDyn = function(map) {
	var obj = { };
	var h = map.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var k = _g1_key;
		var v = _g1_value;
		obj[k] = v;
	}
	return obj;
};
shared_Utils.errorStatus = function(status) {
	return "<span className=\"error\">" + status + "</span>";
};
shared_Utils.keyMax = function(d,key) {
	var res = 0;
	if(d.length == 0) {
		return res;
	}
	haxe_Log.trace(Type.typeof(d[0]),{ fileName : "../lib/shared/Utils.hx", lineNumber : 163, className : "shared.Utils", methodName : "keyMax"});
	var _g = 0;
	while(_g < d.length) {
		var el = d[_g];
		++_g;
		var v = parseFloat(el.get(key));
		if(!isNaN(v) && v > res) {
			res = v;
		}
	}
	return res;
};
shared_Utils.updateDyn = function(obj1,obj2) {
	var keys = Reflect.fields(obj1);
	if(obj1 == null) {
		return null;
	}
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		var value = Reflect.field(obj2,k);
		if(Object.prototype.hasOwnProperty.call(obj2,k)) {
			obj1[k] = value;
		}
	}
	return obj1;
};
var state_CState = function() { };
$hxClasses["state.CState"] = state_CState;
state_CState.__name__ = "state.CState";
state_CState.store = null;
state_CState.confirmTransition = function(message,callback) {
	haxe_Log.trace(message,{ fileName : "src/state/CState.hx", lineNumber : 22, className : "state.CState", methodName : "confirmTransition"});
	if(state_CState.store.getState().locationStore.history.location.pathname == "/") {
		callback(true);
		return;
	}
	callback(true);
};
state_CState.blockTransition = function(location,action) {
	haxe_Log.trace(location.pathname,{ fileName : "src/state/CState.hx", lineNumber : 32, className : "state.CState", methodName : "blockTransition"});
	haxe_Log.trace(action,{ fileName : "src/state/CState.hx", lineNumber : 33, className : "state.CState", methodName : "blockTransition"});
	return location.pathname;
};
state_CState.historyChange = function(location,action) {
	haxe_Log.trace(location,{ fileName : "src/state/CState.hx", lineNumber : 39, className : "state.CState", methodName : "historyChange"});
	haxe_Log.trace(action,{ fileName : "src/state/CState.hx", lineNumber : 40, className : "state.CState", methodName : "historyChange"});
	return false;
};
state_CState.init = function(store) {
	state_CState.store = store;
};
var store_AppStore = function() {
	this.initState = { status : { date : new Date(), path : $global.location.pathname, text : ""}};
	haxe_Log.trace(this.store,{ fileName : "src/store/AppStore.hx", lineNumber : 52, className : "store.AppStore", methodName : "new"});
};
$hxClasses["store.AppStore"] = store_AppStore;
store_AppStore.__name__ = "store.AppStore";
store_AppStore.__interfaces__ = [redux_IMiddleware,redux_IReducer];
store_AppStore.prototype = {
	initState: null
	,store: null
	,reduce: function(state,action) {
		haxe_Log.trace(Reflect.fields(state),{ fileName : "src/store/AppStore.hx", lineNumber : 57, className : "store.AppStore", methodName : "reduce"});
		haxe_Log.trace(action,{ fileName : "src/store/AppStore.hx", lineNumber : 58, className : "store.AppStore", methodName : "reduce"});
		switch(action._hx_index) {
		case 0:
			var subState = action.state;
			return react_ReactUtil.copy(state,subState);
		case 3:
			var dataAction = action.action;
			haxe_Log.trace(dataAction,{ fileName : "src/store/AppStore.hx", lineNumber : 64, className : "store.AppStore", methodName : "reduce"});
			if(dataAction._hx_index == 3) {
				var data = dataAction.data;
				haxe_Log.trace(data.dataRows,{ fileName : "src/store/AppStore.hx", lineNumber : 68, className : "store.AppStore", methodName : "reduce"});
				return react_ReactUtil.copy(state,{ dataStore : { contactsDbData : data}});
			} else {
				return state;
			}
			break;
		default:
			return state;
		}
	}
	,middleware: function(action,next) {
		switch(action._hx_index) {
		case 5:
			var action1 = action.action;
			return this.store.dispatch(redux_Action.map(action1));
		case 6:
			var action1 = action.action;
			return this.store.dispatch(redux_Action.map(action1));
		default:
			return next();
		}
	}
	,__class__: store_AppStore
};
var store_ConfigStore = function(p) {
	this.initState = p;
	haxe_Log.trace("ok",{ fileName : "src/store/ConfigStore.hx", lineNumber : 17, className : "store.ConfigStore", methodName : "new"});
};
$hxClasses["store.ConfigStore"] = store_ConfigStore;
store_ConfigStore.__name__ = "store.ConfigStore";
store_ConfigStore.__interfaces__ = [redux_IReducer];
store_ConfigStore.prototype = {
	initState: null
	,reduce: function(state,action) {
		haxe_Log.trace(state,{ fileName : "src/store/ConfigStore.hx", lineNumber : 22, className : "store.ConfigStore", methodName : "reduce"});
		haxe_Log.trace(action,{ fileName : "src/store/ConfigStore.hx", lineNumber : 23, className : "store.ConfigStore", methodName : "reduce"});
		if(action._hx_index == 0) {
			var p = action.p;
			haxe_Log.trace(p,{ fileName : "src/store/ConfigStore.hx", lineNumber : 27, className : "store.ConfigStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,p);
		} else {
			return state;
		}
	}
	,__class__: store_ConfigStore
};
var store_DataStore = function() {
	this.initState = { contactData : new haxe_ds_IntMap(), dealData : new haxe_ds_IntMap(), accountData : new haxe_ds_IntMap()};
	haxe_Log.trace("ok",{ fileName : "src/store/DataStore.hx", lineNumber : 35, className : "store.DataStore", methodName : "new"});
};
$hxClasses["store.DataStore"] = store_DataStore;
store_DataStore.__name__ = "store.DataStore";
store_DataStore.__interfaces__ = [redux_IMiddleware,redux_IReducer];
store_DataStore.prototype = {
	initState: null
	,store: null
	,reduce: function(state,action) {
		haxe_Log.trace(action,{ fileName : "src/store/DataStore.hx", lineNumber : 40, className : "store.DataStore", methodName : "reduce"});
		haxe_Log.trace(Reflect.fields(state),{ fileName : "src/store/DataStore.hx", lineNumber : 41, className : "store.DataStore", methodName : "reduce"});
		switch(action._hx_index) {
		case 1:
			var uData = action.uData;
			haxe_Log.trace(uData,{ fileName : "src/store/DataStore.hx", lineNumber : 82, className : "store.DataStore", methodName : "reduce"});
			var cData = state.contactData;
			var uDataIt = uData.iterator();
			var row = null;
			var map = uData;
			var _g_map = map;
			var _g_keys = map.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g1_value = _g_map.get(key);
				var _g1_key = key;
				var i = _g1_key;
				var row = _g1_value;
				cData.h[i] = row;
			}
			return react_ReactUtil.copy(state,{ contactData : cData});
		case 3:
			var data = action.data;
			if(data.dataRows != null) {
				haxe_Log.trace(data.dataRows.length,{ fileName : "src/store/DataStore.hx", lineNumber : 48, className : "store.DataStore", methodName : "reduce"});
				haxe_Log.trace(react_ReactUtil.copy(state,{ contactsDbData : data}).contactsDbData.dataRows.length,{ fileName : "src/store/DataStore.hx", lineNumber : 49, className : "store.DataStore", methodName : "reduce"});
			}
			return react_ReactUtil.copy(state,{ contactsDbData : data});
		case 4:
			return state;
		case 5:
			var sData = action.sData;
			return react_ReactUtil.copy(state,{ contactData : sData});
		case 6:
			var sData = action.sData;
			haxe_Log.trace(sData,{ fileName : "src/store/DataStore.hx", lineNumber : 65, className : "store.DataStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,{ contactActData : sData});
		case 7:
			var sData = action.sData;
			haxe_Log.trace(sData,{ fileName : "src/store/DataStore.hx", lineNumber : 71, className : "store.DataStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,{ contactData : sData});
		case 8:
			var sData = action.sData;
			haxe_Log.trace(shared_Utils.keysList(sData.keys()),{ fileName : "src/store/DataStore.hx", lineNumber : 77, className : "store.DataStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,{ dealData : sData});
		default:
			return state;
		}
	}
	,middleware: function(action,next) {
		haxe_Log.trace($hxEnums[action.__enum__].__constructs__[action._hx_index]._hx_name,{ fileName : "src/store/DataStore.hx", lineNumber : 100, className : "store.DataStore", methodName : "middleware"});
		switch(action._hx_index) {
		case 0:
			var data = action.dataAccess;
			return this.store.dispatch(redux_Action.map(action_async_DBAccess.execute(data)));
		case 3:
			var data = action.data;
			this.store.dispatch(redux_Action.map(action_AppAction.Data(action)));
			return next();
		case 10:
			var data = action.dataAccess;
			return this.store.dispatch(action_async_LivePBXSync.importContacts(data));
		default:
			return next();
		}
	}
	,__class__: store_DataStore
};
var store_LocationStore = function(history) {
	this._trace = false;
	var tmp = new Date();
	var tmp1;
	if(StringTools.startsWith($global.location.pathname,"/ChangePassword") == true) {
		var args = shared_Utils.argList($global.location.pathname,["action","jwt","user_name","opath"]);
		if(this._trace) {
			haxe_Log.trace(args == null ? "null" : haxe_ds_StringMap.stringify(args.h),{ fileName : "src/store/LocationStore.hx", lineNumber : 38, className : "store.LocationStore", methodName : "new"});
		}
		tmp1 = args.h["opath"];
	} else {
		tmp1 = $global.location.pathname == "/" ? "/DashBoard" : $global.location.pathname;
	}
	this.initState = { history : history, lastModified : tmp, redirectAfterLogin : tmp1};
};
$hxClasses["store.LocationStore"] = store_LocationStore;
store_LocationStore.__name__ = "store.LocationStore";
store_LocationStore.__interfaces__ = [redux_IMiddleware,redux_IReducer];
store_LocationStore.prototype = {
	initState: null
	,store: null
	,_trace: null
	,reduce: function(state,action) {
		if(this._trace) {
			haxe_Log.trace(state.history.location,{ fileName : "src/store/LocationStore.hx", lineNumber : 48, className : "store.LocationStore", methodName : "reduce"});
		}
		if(this.store != null) {
			if(this._trace) {
				haxe_Log.trace(Reflect.fields(this.store),{ fileName : "src/store/LocationStore.hx", lineNumber : 50, className : "store.LocationStore", methodName : "reduce"});
			}
		}
		switch(action._hx_index) {
		case 6:
			var history = action.history;
			if(this._trace) {
				debug_Out.dumpObject(state,{ fileName : "src/store/LocationStore.hx", lineNumber : 54, className : "store.LocationStore", methodName : "reduce"});
			}
			return react_ReactUtil.copy(state,{ history : history});
		case 7:
			var location = action.location;
			return react_ReactUtil.copy(state,location);
		default:
			return state;
		}
	}
	,middleware: function(action,next) {
		if(this._trace) {
			haxe_Log.trace(action,{ fileName : "src/store/LocationStore.hx", lineNumber : 68, className : "store.LocationStore", methodName : "middleware"});
		}
		if(this._trace) {
			haxe_Log.trace(Reflect.fields(this.store.getState()),{ fileName : "src/store/LocationStore.hx", lineNumber : 69, className : "store.LocationStore", methodName : "middleware"});
		}
		var history = this.store.getState().locationStore.history;
		return next();
	}
	,__class__: store_LocationStore
};
var store_StatusStore = function() {
	this.initState = { path : $global.location.pathname, text : "", date : new Date()};
	haxe_Log.trace(this.initState,{ fileName : "src/store/StatusStore.hx", lineNumber : 20, className : "store.StatusStore", methodName : "new"});
};
$hxClasses["store.StatusStore"] = store_StatusStore;
store_StatusStore.__name__ = "store.StatusStore";
store_StatusStore.__interfaces__ = [redux_IReducer];
store_StatusStore.prototype = {
	initState: null
	,reduce: function(state,action) {
		haxe_Log.trace(state,{ fileName : "src/store/StatusStore.hx", lineNumber : 24, className : "store.StatusStore", methodName : "reduce"});
		var status = action.status;
		return react_ReactUtil.copy(state,status);
	}
	,__class__: store_StatusStore
};
var store_UserStore = function() {
	this.initState = { loginTask : null, waiting : true, dbUser : new db_DbUser({ first_name : js_Cookie.get("userState.dbUser.first_name") == null ? "" : js_Cookie.get("userState.dbUser.first_name"), id : js_Cookie.get("userState.dbUser.id") == null ? 0 : Std.parseInt(js_Cookie.get("userState.dbUser.id")), last_name : js_Cookie.get("userState.dbUser.last_name") == null ? "" : js_Cookie.get("userState.dbUser.last_name"), mandator : js_Cookie.get("userState.dbUser.mandator") == null ? 1 : Std.parseInt(js_Cookie.get("userState.dbUser.mandator")), user_name : js_Cookie.get("userState.dbUser.user_name") == null ? "" : js_Cookie.get("userState.dbUser.user_name"), email : js_Cookie.get("userState.dbUser.email") == null ? "" : js_Cookie.get("userState.dbUser.email"), password : "", change_pass_required : false, online : false, last_login : null, jwt : js_Cookie.get("userState.dbUser.jwt") == null ? "" : js_Cookie.get("userState.dbUser.jwt")})};
};
$hxClasses["store.UserStore"] = store_UserStore;
store_UserStore.__name__ = "store.UserStore";
store_UserStore.__interfaces__ = [redux_IMiddleware,redux_IReducer];
store_UserStore.prototype = {
	initState: null
	,store: null
	,reduce: function(state,action) {
		switch(action._hx_index) {
		case 0:
			var uState = action.state;
			haxe_Log.trace("...",{ fileName : "src/store/UserStore.hx", lineNumber : 58, className : "store.UserStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,uState);
		case 1:
			var uState = action.state;
			if(uState.dbUser != null) {
				haxe_Log.trace(uState.dbUser.id + ":" + Std.string(uState.dbUser.online),{ fileName : "src/store/UserStore.hx", lineNumber : 71, className : "store.UserStore", methodName : "reduce"});
			}
			return react_ReactUtil.copy(state,uState);
		case 2:
			var err = action.state;
			haxe_Log.trace(err,{ fileName : "src/store/UserStore.hx", lineNumber : 62, className : "store.UserStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,err);
		case 3:
			var uState = action.state;
			debug_Out.dumpObject(uState,{ fileName : "src/store/UserStore.hx", lineNumber : 66, className : "store.UserStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,uState);
		case 4:
			var uState = action.state;
			return react_ReactUtil.copy(state,uState);
		case 5:
			var uState = action.state;
			return react_ReactUtil.copy(state,uState);
		case 6:
			var uState = action.state;
			haxe_Log.trace("...",{ fileName : "src/store/UserStore.hx", lineNumber : 58, className : "store.UserStore", methodName : "reduce"});
			return react_ReactUtil.copy(state,uState);
		}
	}
	,middleware: function(action,next) {
		haxe_Log.trace(this.store,{ fileName : "src/store/UserStore.hx", lineNumber : 87, className : "store.UserStore", methodName : "middleware"});
		return next();
	}
	,__class__: store_UserStore
};
var tink_core_Noise = {};
tink_core_Noise.ofAny = function(t) {
	return null;
};
var tink_macro_Bouncer = function() { };
$hxClasses["tink.macro.Bouncer"] = tink_macro_Bouncer;
tink_macro_Bouncer.__name__ = "tink.macro.Bouncer";
tink_macro_Bouncer.makeOuter = function(a) {
	return null;
};
var view_DevTest = function(props) {
	this.renderCount = 0;
	this.rendered = false;
	this.mounted = false;
	this.state = { hasError : false, mounted : false};
	React_Component.call(this,props);
	this._trace = true;
	if(this._trace) {
		haxe_Log.trace(props.match,{ fileName : "src/view/DevTest.hx", lineNumber : 45, className : "view.DevTest", methodName : "new"});
	}
	if(this._trace) {
		haxe_Log.trace(props.store,{ fileName : "src/view/DevTest.hx", lineNumber : 46, className : "view.DevTest", methodName : "new"});
	}
	if(this.state == null) {
		$global.console.error("Warning: component DevTest is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["view.DevTest"] = view_DevTest;
view_DevTest.__name__ = "view.DevTest";
view_DevTest._strace = null;
view_DevTest.mapDispatchToProps = function(dispatch) {
	return { };
};
view_DevTest.__super__ = React_Component;
view_DevTest.prototype = $extend(React_Component.prototype,{
	mounted: null
	,rendered: null
	,renderCount: null
	,_trace: null
	,componentDidMount: function() {
		this.mounted = true;
	}
	,componentDidCatch: function(error,info) {
		if(this.mounted) {
			this.setState({ hasError : true});
		}
		if(this._trace) {
			haxe_Log.trace(error,{ fileName : "src/view/DevTest.hx", lineNumber : 59, className : "view.DevTest", methodName : "componentDidCatch"});
		}
		if(this._trace) {
			haxe_Log.trace(info,{ fileName : "src/view/DevTest.hx", lineNumber : 60, className : "view.DevTest", methodName : "componentDidCatch"});
		}
	}
	,shouldComponentUpdate: function(nextProps,nextState) {
		if(this._trace) {
			haxe_Log.trace("propsChanged:" + Std.string(nextProps != this.props),{ fileName : "src/view/DevTest.hx", lineNumber : 65, className : "view.DevTest", methodName : "shouldComponentUpdate"});
		}
		if(nextProps != this.props) {
			shared_Utils.compare(this.props,nextProps);
		}
		if(this._trace) {
			haxe_Log.trace("stateChanged:" + Std.string(nextState != this.state),{ fileName : "src/view/DevTest.hx", lineNumber : 67, className : "view.DevTest", methodName : "shouldComponentUpdate"});
		}
		if(nextState != this.state || nextProps != this.props) {
			return true;
		}
		return nextProps != this.props;
	}
	,render: function() {
		if(this._trace) {
			haxe_Log.trace(Reflect.fields(this.props),{ fileName : "src/view/DevTest.hx", lineNumber : 86, className : "view.DevTest", methodName : "render"});
		}
		if(this._trace) {
			haxe_Log.trace(Reflect.fields(this.state),{ fileName : "src/view/DevTest.hx", lineNumber : 87, className : "view.DevTest", methodName : "render"});
		}
		var tmp = react_ReactType.fromComp(React_Fragment);
		var tmp1 = React.createElement(react_ReactType.fromString("div"),{ className : "tabContent2"},"HelloWorld");
		var tmp2 = React.createElement(view_StatusBar._renderWrapper,this.props);
		return React.createElement(tmp,{ },tmp1,tmp2);
	}
	,setState: null
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `DevTest`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_DevTest
});
var view_NavTabs = function(props,context) {
	haxe_Log.trace(Reflect.fields(props),{ fileName : "src/view/NavTabs.hx", lineNumber : 31, className : "view.NavTabs", methodName : "new"});
	React_Component.call(this,props);
};
$hxClasses["view.NavTabs"] = view_NavTabs;
view_NavTabs.__name__ = "view.NavTabs";
view_NavTabs.__super__ = React_Component;
view_NavTabs.prototype = $extend(React_Component.prototype,{
	render: function() {
		return React.createElement(react_ReactType.fromComp(bulma_$components_Tabs),{ className : "is-centered"},this.buildNav());
	}
	,buildNav: function() {
		var tmp = react_ReactType.fromComp(React_Fragment);
		var tmp1 = React.createElement(react_ReactType.fromComp(view_shared_TabLink),Object.assign({ },this.props,{ to : "/DevTest"}),"DevTest");
		return React.createElement(tmp,{ },tmp1);
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `NavTabs`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_NavTabs
});
var view_StatusBar = function(props,context) {
	this.mounted = false;
	haxe_Log.trace("setState:" + Std.string(Reflect.field(this,"setState")),{ fileName : "src/view/StatusBar.hx", lineNumber : 59, className : "view.StatusBar", methodName : "new"});
	this.state = react_ReactUtil.copy(props,{ date : new Date()});
	React_Component.call(this,props);
	if(this.state == null) {
		$global.console.error("Warning: component StatusBar is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["view.StatusBar"] = view_StatusBar;
view_StatusBar.__name__ = "view.StatusBar";
view_StatusBar.mapStateToProps = function(astate) {
	return { className : astate.status.className == null ? "" : astate.status.className, path : astate.status.path, text : astate.status.text};
};
view_StatusBar.__super__ = React_Component;
view_StatusBar.prototype = $extend(React_Component.prototype,{
	mounted: null
	,timer: null
	,componentDidMount: function() {
		var _gthis = this;
		this.mounted = true;
		var d = new Date();
		var s = d.getSeconds();
		haxe_Log.trace("start delay at " + s + " set timer start in " + (60 - s) + " seconds",{ fileName : "src/view/StatusBar.hx", lineNumber : 69, className : "view.StatusBar", methodName : "componentDidMount"});
		haxe_Timer.delay(function() {
			if(!_gthis.mounted) {
				haxe_Log.trace("not mounted - will do nothing",{ fileName : "src/view/StatusBar.hx", lineNumber : 73, className : "view.StatusBar", methodName : "componentDidMount"});
				return;
			}
			haxe_Log.trace("timer start at " + new Date().getSeconds(),{ fileName : "src/view/StatusBar.hx", lineNumber : 76, className : "view.StatusBar", methodName : "componentDidMount"});
			_gthis.setState({ date : new Date()});
			_gthis.timer = new haxe_Timer(60000);
			_gthis.timer.run = function() {
				_gthis.setState({ date : new Date()});
			};
		},(60 - d.getSeconds()) * 1000);
		haxe_Log.trace(this.props.children,{ fileName : "src/view/StatusBar.hx", lineNumber : 82, className : "view.StatusBar", methodName : "componentDidMount"});
	}
	,componentWillUnmount: function() {
		this.mounted = false;
		if(this.timer != null) {
			this.timer.stop();
		}
	}
	,render: function() {
		var display_name = "Gast";
		var userIcon = "fa fa-user-o";
		if(typeof(this.props.text) != "string") {
			debug_Out.dumpObject(this.props.text,{ fileName : "src/view/StatusBar.hx", lineNumber : 107, className : "view.StatusBar", methodName : "render"});
			return null;
		}
		display_name = "Guest";
		userIcon = "fa fa-user";
		var tmp = react_ReactType.fromComp(bulma_$components_Footer);
		var tmp1 = react_ReactType.fromString("div");
		var tmp2 = React.createElement(react_ReactType.fromString("span"),{ className : "column"},this.props.path);
		var tmp3 = "main column " + this.props.className;
		var tmp4 = React.createElement(react_ReactType.fromString("span"),{ className : tmp3},this.props.text);
		var tmp3 = React.createElement(react_ReactType.fromString("span"),{ className : "column flex-end"},React.createElement(react_ReactType.fromString("i"),{ className : userIcon})," ",display_name);
		var tmp5 = React.createElement(tmp1,{ className : "statusbar"},tmp2,tmp4,tmp3,React.createElement(view_shared_DateTime._renderWrapper,{ }));
		return React.createElement(tmp,{ },tmp5);
	}
	,setState: null
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `StatusBar`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_StatusBar
});
var view_UiView = function(props) {
	haxe_Log.trace(Reflect.fields(props),{ fileName : "src/view/UiView.hx", lineNumber : 68, className : "view.UiView", methodName : "new"});
	React_Component.call(this,props);
	this.state = { hasError : false};
	this.browserHistory = App.store.getState().locationStore.history;
	this.mounted = false;
	App.modalBox = React.createRef();
	if(this.state == null) {
		$global.console.error("Warning: component UiView is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["view.UiView"] = view_UiView;
view_UiView.__name__ = "view.UiView";
view_UiView.mapStateToProps = function(aState) {
	return { };
};
view_UiView.__super__ = React_Component;
view_UiView.prototype = $extend(React_Component.prototype,{
	browserHistory: null
	,dispatchInitial: null
	,mounted: null
	,componentDidCatch: function(error,info) {
		if(this.mounted) {
			this.setState({ hasError : true});
		}
		haxe_Log.trace(error,{ fileName : "src/view/UiView.hx", lineNumber : 85, className : "view.UiView", methodName : "componentDidCatch"});
	}
	,componentDidMount: function() {
		this.mounted = true;
	}
	,render: function() {
		if(this.state.hasError) {
			return React.createElement(react_ReactType.fromString("h1"),{ },"Something went wrong.");
		}
		var tmp = react_ReactType.fromComp(react_router_Router);
		var tmp1 = { history : this.browserHistory};
		var tmp2 = react_ReactType.fromComp(React_Fragment);
		var tmp3 = react_ReactType.fromString("div");
		var tmp4 = react_ReactType.fromComp(react_router_Route);
		var tmp5 = Object.assign({ },this.props,{ path : "/DevTest", component : react_ReactType.fromComp(view_NavTabs)});
		var tmp6 = React.createElement(tmp3,{ className : "topNav"},React.createElement(tmp4,tmp5));
		var tmp3 = react_ReactType.fromString("div");
		var tmp4 = React.createElement(react_ReactType.fromComp(react_router_Route),{ path : "/", render : $bind(this,this.renderRedirect), exact : true});
		var tmp5 = react_ReactType.fromComp(react_router_Route);
		var tmp7 = React.createElement(tmp3,{ className : "tabComponent", id : "development"},tmp4,React.createElement(tmp5,{ path : "/DevTest", component : react_ReactType.fromComp(view_DevTest)}));
		return React.createElement(tmp,tmp1,React.createElement(tmp2,{ },tmp6,tmp7));
	}
	,renderRedirect: function(p) {
		haxe_Log.trace("...",{ fileName : "src/view/UiView.hx", lineNumber : 135, className : "view.UiView", methodName : "renderRedirect"});
		return React.createElement(react_ReactType.fromComp(react_router_Redirect),{ to : "/DevTest"});
	}
	,setState: null
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `UiView`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_UiView
});
var view_dashboard_model_DBSyncModel = function() { };
$hxClasses["view.dashboard.model.DBSyncModel"] = view_dashboard_model_DBSyncModel;
view_dashboard_model_DBSyncModel.__name__ = "view.dashboard.model.DBSyncModel";
view_dashboard_model_DBSyncModel.formatBool = function(v) {
	if(v) {
		return "Y";
	} else {
		return "N";
	}
};
view_dashboard_model_DBSyncModel.formatElementSelection = function(v) {
	if(v) {
		return "Y";
	} else {
		return "N";
	}
};
view_dashboard_model_DBSyncModel.formatPhone = function(p) {
	haxe_Log.trace(p,{ fileName : "src/view/dashboard/model/DBSyncModel.hx", lineNumber : 17, className : "view.dashboard.model.DBSyncModel", methodName : "formatPhone"});
	if(p) {
		return p.login;
	} else {
		return "";
	}
};
view_dashboard_model_DBSyncModel.dataSource = function(action) {
	switch(action) {
	case "importClientList":
		var _g = new haxe_ds_StringMap();
		var _g1 = new haxe_ds_StringMap();
		_g1.h["alias"] = "co";
		_g1.h["fields"] = "";
		_g1.h["jCond"] = "contact=co.id";
		_g.h["contacts"] = _g1;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["alias"] = "da";
		_g1.h["fields"] = null;
		_g1.h["jCond"] = "contact=co.id";
		_g.h["deals"] = _g1;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["alias"] = "ac";
		_g1.h["fields"] = "";
		_g.h["accounts"] = _g1;
		return _g;
	case "loadClientData":
		var _g = new haxe_ds_StringMap();
		var _g1 = new haxe_ds_StringMap();
		_g1.h["alias"] = "co";
		_g1.h["fields"] = "";
		_g1.h["jCond"] = "contact=co.id";
		_g.h["contacts"] = _g1;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["alias"] = "da";
		_g1.h["fields"] = null;
		_g1.h["jCond"] = "contact=co.id";
		_g.h["deals"] = _g1;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["alias"] = "ac";
		_g1.h["fields"] = "";
		_g.h["accounts"] = _g1;
		return _g;
	default:
		return null;
	}
};
view_dashboard_model_DBSyncModel.formFields = function(action) {
	switch(action) {
	case "editTableFields":
		var _g = new haxe_ds_StringMap();
		_g.h["table_name"] = { label : "Tabelle", disabled : true};
		_g.h["field_name"] = { label : "Feldname", disabled : true};
		_g.h["field_type"] = { label : "Datentyp", type : "Select"};
		_g.h["element"] = { label : "Eingabefeld", type : "Select"};
		_g.h["disabled"] = { label : "Readonly", type : "Checkbox"};
		_g.h["required"] = { label : "Required", type : "Checkbox"};
		_g.h["use_as_index"] = { label : "Index", type : "Checkbox"};
		_g.h["any"] = { label : "Eigenschaften", disabled : true, type : "Hidden"};
		_g.h["id"] = { type : "Hidden"};
		return _g;
	case "importClientList":
		var _g = new haxe_ds_StringMap();
		_g.h["import_contacts"] = { label : "Kontakte", type : "Checkbox", preset : true};
		_g.h["contacts_limit"] = { label : "Anzahl", type : "Input"};
		_g.h["import_deals"] = { label : "Aufträge", type : "Checkbox", preset : true};
		_g.h["import_accounts"] = { label : "Kontent", type : "Checkbox", preset : true};
		return _g;
	default:
		return null;
	}
};
view_dashboard_model_DBSyncModel.dataAccess = function(action) {
	switch(action) {
	case "editTableFields":
		var _g = new haxe_ds_StringMap();
		var _g1 = new haxe_ds_StringMap();
		_g1.h["selectedRows"] = null;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["table_name"] = { label : "Tabelle", disabled : true};
		_g2.h["field_name"] = { label : "Feldname", disabled : true};
		_g2.h["field_type"] = { label : "Datentyp", type : "Select"};
		_g2.h["element"] = { label : "Eingabefeld", type : "Select"};
		_g2.h["disabled"] = { label : "Readonly", type : "Checkbox"};
		_g2.h["required"] = { label : "Required", type : "Checkbox"};
		_g2.h["use_as_index"] = { label : "Index", type : "Checkbox"};
		_g2.h["any"] = { label : "Eigenschaften", disabled : true, type : "Hidden"};
		_g2.h["id"] = { type : "Hidden"};
		_g.h["" + action] = { source : _g1, view : _g2};
		return _g;
	case "importClientList":
		var _g = new haxe_ds_StringMap();
		var _g1 = new haxe_ds_StringMap();
		_g1.h["selectedRows"] = null;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["import_contacts"] = { label : "Kontakte", type : "Checkbox", preset : true};
		_g2.h["contacts_limit"] = { label : "Anzahl", type : "Input"};
		_g2.h["import_deals"] = { label : "Aufträge", type : "Checkbox", preset : true};
		_g2.h["import_accounts"] = { label : "Kontent", type : "Checkbox", preset : true};
		_g.h["" + action] = { source : _g1, view : _g2};
		return _g;
	case "saveTableFields":
		var _g = new haxe_ds_StringMap();
		_g.h["" + action] = { source : null, view : null};
		return _g;
	default:
		return null;
	}
};
var view_grid_Grid = function(props) {
	React_Component.call(this,props);
	this.headerUpdated = false;
	this.gridRef = React.createRef();
	this.headerRef = React.createRef();
	this.visibleColumns = 0;
	this.fieldNames = [];
	var h = props.dataState.columns.h;
	var k_h = h;
	var k_keys = Object.keys(h);
	var k_length = k_keys.length;
	var k_current = 0;
	while(k_current < k_length) {
		var k = k_keys[k_current++];
		this.fieldNames.push(k);
	}
	haxe_Log.trace(this.fieldNames,{ fileName : "src/view/grid/Grid.hx", lineNumber : 162, className : "view.grid.Grid", methodName : "new"});
	this.state = { _prevent : false, _selecting : false, selectedRow : null, selectedRows : new haxe_ds_IntMap(), _rowCells : [], _selectedCells : []};
	if(this.state == null) {
		$global.console.error("Warning: component Grid is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["view.grid.Grid"] = view_grid_Grid;
view_grid_Grid.__name__ = "view.grid.Grid";
view_grid_Grid.__super__ = React_Component;
view_grid_Grid.prototype = $extend(React_Component.prototype,{
	fieldNames: null
	,gridRef: null
	,headerRef: null
	,gridStyle: null
	,visibleColumns: null
	,headerUpdated: null
	,render: function() {
		if(this.props.data != null) {
			haxe_Log.trace(this.props.data.length,{ fileName : "src/view/grid/Grid.hx", lineNumber : 176, className : "view.grid.Grid", methodName : "render"});
		}
		haxe_Log.trace(this.props.className,{ fileName : "src/view/grid/Grid.hx", lineNumber : 177, className : "view.grid.Grid", methodName : "render"});
		if(this.props.data == null || this.props.data.length == 0) {
			var tmp = react_ReactType.fromString("section");
			var tmp1 = react_ReactType.fromString("div");
			return React.createElement(tmp,{ className : "hero is-alt"},React.createElement(tmp1,{ className : "hero-body"},React.createElement(react_ReactType.fromString("div"),{ className : "loader", style : { width : "3rem", height : "3rem", margin : "auto", borderWidth : "0.58rem"}})));
		}
		var headerRows = this.renderHeaderDisplay();
		haxe_Log.trace(this.gridStyle,{ fileName : "src/view/grid/Grid.hx", lineNumber : 197, className : "view.grid.Grid", methodName : "render"});
		return React.createElement(react_ReactType.fromString("div"),{ ref : this.gridRef, className : "grid-container"},headerRows,this.renderRows());
	}
	,renderHeaderDisplay: function() {
		if(this.props.dataState == null) {
			return null;
		}
		var headerRow = [];
		this.gridStyle = "";
		var h = this.props.dataState.columns.h;
		var field_h = h;
		var field_keys = Object.keys(h);
		var field_length = field_keys.length;
		var field_current = 0;
		while(field_current < field_length) {
			var field = field_keys[field_current++];
			var hC = this.props.dataState.columns.h[field];
			if(hC.show == false) {
				continue;
			}
			this.visibleColumns++;
			this.gridStyle += hC.flexGrow != null ? " " + hC.flexGrow + "fr" : " max-content";
			headerRow.push(React.createElement(react_ReactType.fromString("div"),{ key : field, className : "gridHeadItem " + (hC.headerClassName != null ? hC.headerClassName : hC.className != null ? hC.className : "")},hC.label != null ? hC.label : hC.name,React.createElement(react_ReactType.fromString("span"),{ className : "sort-box fa fa-sort"})));
		}
		haxe_Log.trace("" + this.visibleColumns + " " + this.gridStyle,{ fileName : "src/view/grid/Grid.hx", lineNumber : 228, className : "view.grid.Grid", methodName : "renderHeaderDisplay"});
		return headerRow;
	}
	,map2DataCell: function(rdMap,fN,column,row,rowClass) {
		var columnDataState = this.props.dataState.columns.h[fN];
		if(rdMap.h[fN] == "") {
			var v = null;
			rdMap.h[fN] = v;
		}
		return { cellFormat : columnDataState.cellFormat, className : columnDataState.className == null ? rowClass : columnDataState.className + " " + rowClass, data : rdMap.h[fN], dataDisplay : columnDataState.cellFormat != null ? columnDataState.cellFormat(rdMap.h[fN]) : rdMap.h[fN], id : rdMap.h["id"], name : fN, pos : { column : column, row : row}, show : columnDataState.show != false};
	}
	,renderCells: function(rdMap,row) {
		var _gthis = this;
		var column = 0;
		var rowClass = row % 2 == 0 ? "gridItem even" : "gridItem odd";
		if(this.state.selectedRows.h.hasOwnProperty(rdMap.h["id"])) {
			rowClass += " selected";
		}
		var _this = this.fieldNames;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _gthis.map2DataCell(rdMap,_this[i],column++,row,rowClass);
		}
		var cells = result;
		var rCs = [];
		var _g = 0;
		while(_g < cells.length) {
			var cD = cells[_g];
			++_g;
			if(!cD.show) {
				continue;
			}
			rCs.push(React.createElement(react_ReactType.fromString("div"),{ key : cD.id + "_" + cD.name, className : cD.className, 'data-value' : cD.data, 'data-id' : cD.id, 'data-name' : cD.name, 'data-gridpos' : cD.pos.row + "_" + cD.pos.column, onClick : $bind(this,this.select), onDoubleClick : $bind(this,this.editRow)},cD.dataDisplay == null || cD.dataDisplay == "" ? React.createElement(react_ReactType.fromString("span"),{ }," ") : cD.dataDisplay));
		}
		return rCs;
	}
	,renderRows: function(dRows) {
		if(dRows == null) {
			dRows = this.props.data;
		}
		var dRs = [];
		var row = 0;
		var _g = 0;
		while(_g < dRows.length) {
			var dR = dRows[_g];
			++_g;
			dRs.push(this.renderCells(dR,row++));
		}
		return dRs;
	}
	,componentDidMount: function() {
		if(this.gridRef == null || react_ReactRef.get_current(this.gridRef) == null) {
			var c = js_Boot.getClass(this.props.parentComponent);
			haxe_Log.trace(c.__name__,{ fileName : "src/view/grid/Grid.hx", lineNumber : 300, className : "view.grid.Grid", methodName : "componentDidMount"});
			return;
		}
		haxe_Log.trace("ok " + Std.string(this.gridRef),{ fileName : "src/view/grid/Grid.hx", lineNumber : 303, className : "view.grid.Grid", methodName : "componentDidMount"});
		this.props.parentComponent.state.dataGrid = this;
		var grid = react_ReactRef.get_current(this.gridRef);
		grid.style.setProperty("grid-template-columns",this.gridStyle);
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `Grid`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
		haxe_Log.trace(Std.string(this.headerUpdated) + ":" + Std.string(this.headerRef) + " cmp state:" + (prevState == this.state ? "Y" : "N"),{ fileName : "src/view/grid/Grid.hx", lineNumber : 311, className : "view.grid.Grid", methodName : "componentDidUpdate"});
	}
	,editRow: function(ev) {
		var _gthis = this;
		this.state.selectTimer.stop();
		this.state._prevent = true;
		var el = js_Boot.__cast(ev.target , HTMLElement);
		if(!el.classList.contains("selected")) {
			this.highLightRow(ev);
		}
		haxe_Timer.delay(function() {
			_gthis.state._prevent = false;
		},view_grid_Grid.clickDelay * 2);
		haxe_Log.trace("here we go :)",{ fileName : "src/view/grid/Grid.hx", lineNumber : 323, className : "view.grid.Grid", methodName : "editRow"});
		if(this.props.onDoubleClick != null) {
			this.props.onDoubleClick(ev);
		}
	}
	,select: function(e) {
		var _gthis = this;
		e.persist();
		this.state.selectTimer = haxe_Timer.delay(function() {
			if(!_gthis.state._prevent) {
				_gthis.highLightRow(e);
			}
		},view_grid_Grid.clickDelay);
	}
	,highLightRow: function(evtOrId) {
		haxe_Log.trace("evtOrId",{ fileName : "src/view/grid/Grid.hx", lineNumber : 340, className : "view.grid.Grid", methodName : "highLightRow"});
		if(this.state._selecting) {
			return;
		}
		this.state._selecting = true;
		var el = typeof(evtOrId) == "number" && ((evtOrId | 0) === evtOrId) ? window.document.querySelector(".gridItem[data-id=\"" + Std.string(evtOrId) + "\"]") : js_Boot.__cast(evtOrId._targetInst.stateNode , HTMLElement);
		var rN = Std.parseInt(el.dataset.id);
		var selectedNow = this.state.selectedRows.copy();
		haxe_Log.trace(el.dataset.id + ":" + Std.string(this.state._selecting) + " ctrlKey:" + Std.string(evtOrId.ctrlKey),{ fileName : "src/view/grid/Grid.hx", lineNumber : 351, className : "view.grid.Grid", methodName : "highLightRow"});
		if(!evtOrId.ctrlKey && !evtOrId.shiftKey) {
			this.state.selectedRows = new haxe_ds_IntMap();
			if(selectedNow.h.hasOwnProperty(rN)) {
				this.setState({ selectedRows : this.state.selectedRows});
				this.state._selecting = false;
				return;
			} else {
				this.state.selectedRows.h[rN] = true;
				haxe_Log.trace(this.state.selectedRows,{ fileName : "src/view/grid/Grid.hx", lineNumber : 364, className : "view.grid.Grid", methodName : "highLightRow"});
			}
		}
		var rowCells = window.document.querySelectorAll(".gridItem[data-id=\"" + el.dataset.id + "\"]");
		var rowEls = Array.from(rowCells);
		this.setState({ selectedRows : this.state.selectedRows});
		var tmp = this.props.parentComponent.props.select;
		var el1 = el.dataset.id;
		var _g = new haxe_ds_StringMap();
		var key = el.dataset.id;
		var value = this.getRowData(rowEls);
		_g.h[key] = value;
		tmp(el1,_g,this.props.parentComponent,"One");
		this.state._selecting = false;
	}
	,showDims: function(ref) {
		var i = 0;
		var s = 0;
		var cells = ref.current != null ? ref.current.cells : ref.cells;
		var _g = 0;
		while(_g < cells.length) {
			var cell = cells[_g];
			++_g;
			haxe_Log.trace(cell.getBoundingClientRect().toJSON(),{ fileName : "src/view/grid/Grid.hx", lineNumber : 387, className : "view.grid.Grid", methodName : "showDims"});
			s += cell.getBoundingClientRect().width;
		}
		haxe_Log.trace(" sum:" + s,{ fileName : "src/view/grid/Grid.hx", lineNumber : 390, className : "view.grid.Grid", methodName : "showDims"});
	}
	,nodeDims: function(n) {
		var i = 0;
		var s = 0;
		var cells = n.childNodes;
		var _g = 0;
		while(_g < cells.length) {
			var cell = cells[_g];
			++_g;
			var dRect = (js_Boot.__cast(cell , HTMLElement)).getBoundingClientRect().toJSON();
			haxe_Log.trace(dRect,{ fileName : "src/view/grid/Grid.hx", lineNumber : 401, className : "view.grid.Grid", methodName : "nodeDims"});
			s += (js_Boot.__cast(cell , HTMLElement)).getBoundingClientRect().width;
		}
		haxe_Log.trace(" sum:" + s,{ fileName : "src/view/grid/Grid.hx", lineNumber : 405, className : "view.grid.Grid", methodName : "nodeDims"});
	}
	,getRowData: function(rCs) {
		if(rCs.length == 0) {
			return null;
		}
		var _g = new haxe_ds_StringMap();
		var _g1 = 0;
		while(_g1 < rCs.length) {
			var el = rCs[_g1];
			++_g1;
			_g.h[el.dataset.name] = el.dataset.value;
		}
		return _g;
	}
	,setState: null
	,__class__: view_grid_Grid
});
var view_shared_DateTime = function(props,context) {
	React_Component.call(this,props,context);
};
$hxClasses["view.shared.DateTime"] = view_shared_DateTime;
view_shared_DateTime.__name__ = "view.shared.DateTime";
view_shared_DateTime.__super__ = React_Component;
view_shared_DateTime.prototype = $extend(React_Component.prototype,{
	render: function() {
		return React.createElement(react_ReactType.fromFunctionWithProps($bind(this,this.DateDisplay)),{ className : "column flex-end", intl : this.props.intl, year : "numeric", month : "numeric", day : "numeric", hour : "numeric", minute : "numeric"});
	}
	,DateDisplay: function(props) {
		var props1 = props.intl;
		var now = new Date();
		var now1 = props1.formatDate(now,{ year : props.year, month : props.month, day : props.day, hour : props.hour, minute : props.minute});
		now1 = StringTools.replace(now1,",","");
		return React.createElement(react_ReactType.fromString("span"),{ className : "column flex-end"},now1);
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `DateTime`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_shared_DateTime
});
var view_shared_FormBuilder = function(rc) {
	this.comp = rc;
	this.i = 1;
	this.requests = [];
	if(rc.props != null) {
		haxe_Log.trace(Reflect.fields(this.comp),{ fileName : "src/view/shared/FormBuilder.hx", lineNumber : 62, className : "view.shared.FormBuilder", methodName : "new"});
	}
};
$hxClasses["view.shared.FormBuilder"] = view_shared_FormBuilder;
view_shared_FormBuilder.__name__ = "view.shared.FormBuilder";
view_shared_FormBuilder.prototype = {
	requests: null
	,dataAccess: null
	,dbData: null
	,dbMetaData: null
	,formColElements: null
	,_menuItems: null
	,fState: null
	,_fstate: null
	,initialState: null
	,section: null
	,comp: null
	,sM: null
	,i: null
	,renderElement: function(el,ki,label) {
		return React.createElement(react_ReactType.fromString("div"),{ key : this.i++, className : "g_row_2", role : "rowgroup"},React.createElement(react_ReactType.fromString("div"),{ className : "g_cell", role : "cell"},label),React.createElement(react_ReactType.fromString("div"),{ className : "g_cell_r", role : "cell"},el));
	}
	,renderOption: function(si,label,value) {
		if(value == null) {
			return React.createElement(react_ReactType.fromString("option"),{ key : this.i++},label);
		} else {
			return React.createElement(react_ReactType.fromString("option"),{ key : this.i++, value : value},label);
		}
	}
	,renderSelect: function(name,options) {
		var si = 1;
		var _g = [];
		var h = options.h;
		var _g1_h = h;
		var _g1_keys = Object.keys(h);
		var _g1_length = _g1_keys.length;
		var _g1_current = 0;
		while(_g1_current < _g1_length) {
			var key = _g1_keys[_g1_current++];
			var _g2_key = key;
			var _g2_value = _g1_h[key];
			var value = _g2_key;
			var label = _g2_value;
			_g.push(this.renderOption(si++,label,value));
		}
		return Lambda.array(_g);
	}
	,renderRadio: function(name,options,actValue) {
		var si = 1;
		var _g = [];
		var h = options.h;
		var _g1_h = h;
		var _g1_keys = Object.keys(h);
		var _g1_length = _g1_keys.length;
		var _g1_current = 0;
		while(_g1_current < _g1_length) {
			var key = _g1_keys[_g1_current++];
			var _g2_key = key;
			var _g2_value = _g1_h[key];
			var value = _g2_key;
			var label = _g2_value;
			var check = actValue == value ? "on" : "";
			var tmp = react_ReactType.fromComp(React_Fragment);
			var tmp1 = React.createElement(react_ReactType.fromString("label"),{ key : this.i++},label);
			var tmp2 = React.createElement(react_ReactType.fromString("input"),{ key : this.i++, type : "radio", name : name, defaultChecked : check, onChange : $bind(this,this.onChange), value : value});
			_g.push(React.createElement(tmp,{ },tmp1,tmp2));
		}
		return Lambda.array(_g);
	}
	,renderFormInputElements: function(fields,initialData,compOnChange) {
		var ki = 0;
		var _g = [];
		var h = fields.h;
		var _g1_h = h;
		var _g1_keys = Object.keys(h);
		var _g1_length = _g1_keys.length;
		var _g1_current = 0;
		while(_g1_current < _g1_length) {
			var key = _g1_keys[_g1_current++];
			var _g2_key = key;
			var _g2_value = _g1_h[key];
			var name = _g2_key;
			var field = _g2_value;
			var value = Reflect.field(initialData,name);
			var _g1 = field.type;
			var tmp;
			if(_g1 == null) {
				tmp = this.renderElement(React.createElement(react_ReactType.fromString("input"),{ name : name, onChange : $bind(this,this.onChange), type : "text", defaultValue : value, disabled : field.disabled, required : field.required}),ki++,field.label);
			} else {
				switch(_g1) {
				case "Button":
					tmp = React.createElement(react_ReactType.fromString("button"),{ key : this.i++, type : "submit"},value);
					break;
				case "Checkbox":
					var checked;
					switch(value) {
					case "1":case "TRUE":case "on":case true:
						checked = true;
						break;
					default:
						checked = false;
					}
					tmp = this.renderElement(React.createElement(react_ReactType.fromString("input"),{ key : this.i++, name : name, type : "checkbox", defaultChecked : checked, onChange : $bind(this,this.onChange)}),ki++,field.label);
					break;
				case "DatePicker":
					var dC = { comp : this.comp, disabled : field.disabled, name : name, onChange : $bind(this,this.onChange), options : { dateFormat : field.displayFormat, defaultDate : "00.00.0000", _inline : field.disabled}, value : value};
					tmp = React.createElement(react_ReactType.fromString("div"),{ key : this.i++, className : "g_row_2", role : "rowgroup"},React.createElement(react_ReactType.fromString("div"),{ className : "g_cell", role : "cell"},field.label),React.createElement(react_ReactType.fromString("div"),{ className : "g_cell_r", role : "cell"},React.createElement(react_ReactType.fromComp(react_DateControl),dC)));
					break;
				case "DateTimePicker":
					var dTC = { comp : this.comp, name : name, disabled : field.disabled, onChange : $bind(this,this.onChange), options : { dateFormat : field.displayFormat, defaultDate : value, time_24hr : true, _inline : field.disabled}, value : value};
					tmp = React.createElement(react_ReactType.fromString("div"),{ key : this.i++, className : "g_row_2", role : "rowgroup"},React.createElement(react_ReactType.fromString("div"),{ className : "g_cell", role : "cell"},field.label),React.createElement(react_ReactType.fromString("div"),{ className : "g_cell_r", role : "cell"},React.createElement(react_ReactType.fromComp(react_DateTimeControl),dTC)));
					break;
				case "Hidden":
					tmp = React.createElement(react_ReactType.fromString("input"),{ key : this.i++, type : "hidden", name : name, defaultValue : value});
					break;
				case "NFormat":
					var nfP = { decimalScale : 2, decimalSeparator : ",", fixedDecimalScale : true, isNumericString : true, name : name, onChange : $bind(this,this.onChange), onValueChange : function(values) {
						haxe_Log.trace(values,{ fileName : "src/view/shared/FormBuilder.hx", lineNumber : 219, className : "view.shared.FormBuilder", methodName : "renderFormInputElements"});
					}, removeFormatting : function(fV) {
						haxe_Log.trace(Std.string(parseFloat(fV)),{ fileName : "src/view/shared/FormBuilder.hx", lineNumber : 223, className : "view.shared.FormBuilder", methodName : "renderFormInputElements"});
						return Std.string(parseFloat(fV));
					}, suffix : " €", value : value};
					tmp = React.createElement(react_ReactType.fromString("div"),{ key : this.i++, className : "g_row_2", role : "rowgroup"},React.createElement(react_ReactType.fromString("div"),{ className : "g_cell", role : "cell"},field.label),React.createElement(react_ReactType.fromString("div"),{ className : "g_cell_r", role : "cell"},React.createElement(react_ReactType.fromComp(react_NumberFormat),nfP)));
					break;
				case "Radio":
					var tmp1 = react_ReactType.fromString("div");
					var tmp2 = { key : this.i++, className : "g_row_2", role : "rowgroup"};
					var tmp3 = React.createElement(react_ReactType.fromString("div"),{ className : "g_cell", role : "cell"},field.label);
					var tmp4 = react_ReactType.fromString("div");
					var tmp5 = this.renderRadio(name,field.options,value);
					tmp = React.createElement(tmp1,tmp2,tmp3,React.createElement(tmp4,{ className : "g_cell_r optLabel", role : "cell"},tmp5));
					break;
				case "Select":
					tmp = this.renderElement(React.createElement(react_ReactType.fromString("select"),{ key : this.i++, name : name, onChange : $bind(this,this.onChange), defaultValue : value, multiple : field.multiple},this.renderSelect(name,field.options)),ki++,field.label);
					break;
				case "Upload":
					tmp = React.createElement(react_ReactType.fromString("div"),{ key : this.i++, className : "g_row_2", role : "rowgroup"},React.createElement(react_ReactType.fromString("div"),{ className : "g_cell", role : "cell"},field.label),React.createElement(react_ReactType.fromString("div"),{ className : "g_cell_r", role : "cell"},"Dummy"));
					break;
				default:
					tmp = this.renderElement(React.createElement(react_ReactType.fromString("input"),{ name : name, onChange : $bind(this,this.onChange), type : "text", defaultValue : value, disabled : field.disabled, required : field.required}),ki++,field.label);
				}
			}
			_g.push(tmp);
		}
		return Lambda.array(_g);
	}
	,renderForm: function(props,initialState) {
		var sK = 0;
		var tmp = react_ReactType.fromString("form");
		var tmp1 = { key : props.model, ref : props.formRef, name : props.model, className : "tabComponentForm formField"};
		var tmp2 = react_ReactType.fromString("div");
		var tmp3 = React.createElement(react_ReactType.fromString("div"),{ className : "g_caption"},props.title);
		var tmp4 = this.renderFormInputElements(props.fields,initialState);
		return React.createElement(tmp,tmp1,React.createElement(tmp2,{ className : "grid_box", role : "table", 'aria-label' : "Destinations"},tmp3,tmp4));
	}
	,renderButton: function(mItem,i) {
		if(mItem.onlySm) {
			return null;
		}
		if(mItem.separator) {
			return React.createElement(react_ReactType.fromString("hr"),{ className : "menuSeparator"});
		}
		return React.createElement(react_ReactType.fromComp(bulma_$components_Button),{ key : i++, onClick : mItem.handler, 'data-section' : mItem.section, disabled : mItem.disabled, type : "button"},mItem.label);
	}
	,itemHandler: function(e) {
		e.preventDefault();
		var action = (js_Boot.__cast(e.target , HTMLElement)).getAttribute("data-action");
		haxe_Log.trace(action,{ fileName : "src/view/shared/FormBuilder.hx", lineNumber : 299, className : "view.shared.FormBuilder", methodName : "itemHandler"});
		var mP = Reflect.field(this.comp.state.formApi,"callMethod");
		mP.apply(this.comp.state.formApi,[action,e]);
	}
	,hidden: function(cm) {
		return React.createElement(react_ReactType.fromString("input"),{ type : "hidden", name : cm});
	}
	,onChange: function(ev) {
		haxe_Log.trace(ev.target.type,{ fileName : "src/view/shared/FormBuilder.hx", lineNumber : 312, className : "view.shared.FormBuilder", methodName : "onChange"});
		switch(ev.target.type) {
		case "checkbox":
			haxe_Log.trace("" + Std.string(ev.target.name) + ":" + Std.string(ev.target.value) + ":" + Std.string(ev.target.checked),{ fileName : "src/view/shared/FormBuilder.hx", lineNumber : 316, className : "view.shared.FormBuilder", methodName : "onChange"});
			var tmp;
			switch(ev.target.checked) {
			case "1":case "TRUE":case "on":case true:
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			view_shared_io_BaseForm.doChange(this.comp,ev.target.name,tmp);
			haxe_Log.trace("" + Std.string(ev.target.name) + ":" + Std.string(ev.target.value) + ":" + Std.string(ev.target.checked),{ fileName : "src/view/shared/FormBuilder.hx", lineNumber : 326, className : "view.shared.FormBuilder", methodName : "onChange"});
			break;
		case "select-multiple":case "select-one":
			view_shared_io_BaseForm.doChange(this.comp,ev.target.name,ev.target.value);
			break;
		default:
			view_shared_io_BaseForm.doChange(this.comp,ev.target.name,ev.target.value);
		}
	}
	,__class__: view_shared_FormBuilder
};
var view_shared_Menu = function(props) {
	React_Component.call(this,props);
	haxe_Log.trace(Reflect.fields(props),{ fileName : "src/view/shared/Menu.hx", lineNumber : 73, className : "view.shared.Menu", methodName : "new"});
	this.state = { hidden : props.hidden};
	if(this.state == null) {
		$global.console.error("Warning: component Menu is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["view.shared.Menu"] = view_shared_Menu;
view_shared_Menu.__name__ = "view.shared.Menu";
view_shared_Menu.mapDispatchToProps = function(dispatch) {
	return { switchSection : function(url) {
		haxe_Log.trace(url,{ fileName : "src/view/shared/Menu.hx", lineNumber : 56, className : "view.shared.Menu", methodName : "mapDispatchToProps"});
		dispatch(redux_Action.map(action_LocationAction.Push(url)));
	}};
};
view_shared_Menu.mapStateToProps = function(state) {
	return { };
};
view_shared_Menu.__super__ = React_Component;
view_shared_Menu.prototype = $extend(React_Component.prototype,{
	menuRef: null
	,aW: null
	,renderHeader: function() {
		var _gthis = this;
		if(Lambda.empty(this.props.menuBlocks)) {
			return null;
		}
		var header = [];
		var i = 1;
		Lambda.iter(this.props.menuBlocks,function(block) {
			var check = _gthis.props.section == block.section;
			if(_gthis.props.section == null && i == 1) {
				check = true;
			}
			var header1 = header;
			var tmp = react_ReactType.fromString("input");
			var i1 = i;
			i += 1;
			header1.push(React.createElement(tmp,{ key : i1, type : "radio", id : "sMenuPanel-" + (i - 1), name : "accordion-select", checked : check, onChange : $bind(_gthis,_gthis.switchContent), 'data-section' : block.section}));
		});
		return header;
	}
	,renderPanels: function() {
		var _gthis = this;
		if(Lambda.empty(this.props.menuBlocks)) {
			return null;
		}
		var style = null;
		style = { minWidth : App.config.sidebarDims.minWidth, maxWidth : App.config.sidebarDims.maxWidth};
		style = null;
		var tmp = this.props.sameWidth && this.state.sameWidth > 0;
		var i = 1;
		var panels = [];
		Lambda.iter(this.props.menuBlocks,function(block) {
			var panels1 = panels;
			var tmp = react_ReactType.fromString("div");
			var tmp1 = { key : "pa" + i, className : "panel", style : style};
			var tmp2 = "sMenuPanel-" + i;
			var tmp3 = React.createElement(react_ReactType.fromString("label"),{ className : "panel-heading", htmlFor : tmp2},block.label);
			var tmp2 = react_ReactType.fromString("div");
			var tmp4 = "pblock" + i;
			i += 1;
			panels1.push(React.createElement(tmp,tmp1,tmp3,React.createElement(tmp2,{ id : tmp4, className : "panel-block body-" + (i - 1), children : _gthis.renderItems(block.items)})));
		});
		return panels;
	}
	,renderItems: function(items) {
		var _gthis = this;
		if(items == null || items.length == 0) {
			return null;
		}
		var i = 1;
		var result = new Array(items.length);
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i1 = _g++;
			var item = items[i1];
			var tmp;
			if(item.separator) {
				tmp = React.createElement(react_ReactType.fromString("hr"),{ key : i++, className : "menuSeparator"});
			} else {
				var type = item.formField == null || item.formField.type == null ? "Button" : item.formField.type;
				switch(type) {
				case "File":
					var tmp1 = react_ReactType.fromString("div");
					var tmp2 = React.createElement(react_ReactType.fromString("input"),{ id : item.formField.name, type : "file", name : item.formField.name, onChange : item.formField.handleChange, className : "fileinput"});
					var tmp3 = React.createElement(react_ReactType.fromString("label"),{ htmlFor : item.formField.name, className : "button"},item.label);
					tmp = React.createElement(tmp1,{ key : "uf" + i++, id : "uploadForm", className : "uploadBox"},tmp2,tmp3,React.createElement(react_ReactType.fromComp(bulma_$components_Button),{ onClick : item.handler, 'data-action' : item.action, 'data-section' : item.section, disabled : item.disabled},item.formField.submit));
					break;
				case "Upload":
					var tmp4 = react_ReactType.fromString("div");
					var tmp5 = React.createElement(react_ReactType.fromString("input"),{ id : item.formField.name, type : "file", name : item.formField.name, onChange : item.formField.handleChange, className : "fileinput"});
					var tmp6 = React.createElement(react_ReactType.fromString("label"),{ htmlFor : item.formField.name, className : "button"},item.label);
					tmp = React.createElement(tmp4,{ key : "up" + i++, id : "uploadForm", className : "uploadBox"},tmp5,tmp6,React.createElement(react_ReactType.fromComp(bulma_$components_Button),{ onClick : item.handler, 'data-action' : item.action, 'data-section' : item.section, disabled : item.disabled},item.formField.submit));
					break;
				default:
					tmp = React.createElement(react_ReactType.fromComp(bulma_$components_Button),{ key : "bu" + i++, onClick : _gthis.props.itemHandler, 'data-action' : item.action, 'data-then' : item.then, 'data-section' : item.section, disabled : item.disabled},item.label);
				}
			}
			result[i1] = tmp;
		}
		return Lambda.array(result);
	}
	,render: function() {
		if(this.props.menuBlocks == null) {
			return null;
		}
		if(this.props.parentComponent != null) {
			var c = js_Boot.getClass(this.props.parentComponent);
			haxe_Log.trace(c.__name__,{ fileName : "src/view/shared/Menu.hx", lineNumber : 197, className : "view.shared.Menu", methodName : "render"});
		}
		this.menuRef = React.createRef();
		var style = null;
		if(this.props.sameWidth && this.state.sameWidth == null) {
			style = { visibility : "hidden"};
		}
		style = { width : App.config.sidebarDims.maxWidth};
		var tmp = react_ReactType.fromString("div");
		var tmp1 = react_ReactType.fromString("aside");
		var tmp2 = { ref : this.menuRef, className : "menu"};
		var tmp3 = this.renderHeader();
		var tmp4 = this.renderPanels();
		return React.createElement(tmp,{ className : "sidebar is-right", style : style},React.createElement(tmp1,tmp2,tmp3,tmp4));
	}
	,switchContent: function(reactEventSource) {
		var section = reactEventSource.target.getAttribute("data-section");
		haxe_Log.trace("state.section:" + this.state.section + " section:" + section,{ fileName : "src/view/shared/Menu.hx", lineNumber : 227, className : "view.shared.Menu", methodName : "switchContent"});
		if(section != this.props.section) {
			var basePath = this.props.match.path.split("/:")[0];
			haxe_Log.trace(this.props.location.pathname,{ fileName : "src/view/shared/Menu.hx", lineNumber : 233, className : "view.shared.Menu", methodName : "switchContent"});
			this.props.history.push("" + basePath + "/" + section);
			haxe_Log.trace(this.props.history.location.pathname,{ fileName : "src/view/shared/Menu.hx", lineNumber : 236, className : "view.shared.Menu", methodName : "switchContent"});
		}
	}
	,layout: function() {
		var i = 0;
		var activePanel = null;
		this.aW = react_ReactRef.get_current(this.menuRef).getElementsByClassName("panel").item(0).offsetWidth;
		haxe_Log.trace(this.aW,{ fileName : "src/view/shared/Menu.hx", lineNumber : 246, className : "view.shared.Menu", methodName : "layout"});
		if(this.state.sameWidth == null) {
			this.setState({ sameWidth : this.aW},function() {
				haxe_Log.trace("what's up?",{ fileName : "src/view/shared/Menu.hx", lineNumber : 249, className : "view.shared.Menu", methodName : "layout"});
			});
		}
	}
	,componentDidMount: function() {
		if(this.props.sameWidth && this.state.sameWidth == null) {
			haxe_Log.trace(react_ReactRef.get_current(this.menuRef).offsetWidth,{ fileName : "src/view/shared/Menu.hx", lineNumber : 258, className : "view.shared.Menu", methodName : "componentDidMount"});
			this.layout();
			haxe_Log.trace(react_ReactRef.get_current(this.menuRef).offsetWidth,{ fileName : "src/view/shared/Menu.hx", lineNumber : 260, className : "view.shared.Menu", methodName : "componentDidMount"});
		}
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `Menu`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,setState: null
	,__class__: view_shared_Menu
});
var view_shared_OneOf = {};
view_shared_OneOf.fromA = function(a) {
	return haxe_ds_Either.Left(a);
};
view_shared_OneOf.fromB = function(b) {
	return haxe_ds_Either.Right(b);
};
view_shared_OneOf.toA = function(this1) {
	if(this1._hx_index == 0) {
		var a = this1.v;
		return a;
	} else {
		return null;
	}
};
view_shared_OneOf.toB = function(this1) {
	if(this1._hx_index == 1) {
		var b = this1.v;
		return b;
	} else {
		return null;
	}
};
var view_shared_SLink = function(props) {
	React_Component.call(this,props);
};
$hxClasses["view.shared.SLink"] = view_shared_SLink;
view_shared_SLink.__name__ = "view.shared.SLink";
view_shared_SLink.mapStateToProps = function(state) {
	return { };
};
view_shared_SLink.__super__ = React_Component;
view_shared_SLink.prototype = $extend(React_Component.prototype,{
	handleClick: function(event) {
		if(event.button != null && event.button != 0 || event.metaKey || event.altKey || event.ctrlKey || event.shiftKey || event.defaultPrevented) {
			return;
		}
		event.preventDefault();
		if(this.props.onClick != null) {
			this.props.onClick(event);
		}
		haxe_Log.trace("to: " + this.props.to,{ fileName : "src/view/shared/SLink.hx", lineNumber : 51, className : "view.shared.SLink", methodName : "handleClick"});
		this.props.dispatch(redux_Action.map(action_LocationAction.Push(this.props.to)));
	}
	,render: function() {
		return React.createElement(react_ReactType.fromString("a"),{ href : this.props.to, onClick : $bind(this,this.handleClick)},this.props.children);
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `SLink`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_shared_SLink
});
var view_shared_TabLink = function(props,context) {
	React_Component.call(this,props,context);
};
$hxClasses["view.shared.TabLink"] = view_shared_TabLink;
view_shared_TabLink.__name__ = "view.shared.TabLink";
view_shared_TabLink.__super__ = React_Component;
view_shared_TabLink.prototype = $extend(React_Component.prototype,{
	render: function() {
		var toCheck = Type.typeof(this.props.to) == ValueType.TObject ? this.props.to.pathname : this.props.to;
		return React.createElement(react_ReactType.fromString("li"),{ className : this.props.location.pathname.indexOf(toCheck) == 0 ? "is-active" : ""},React.createElement(react_ReactType.fromComp(react_router_NavLink),{ to : this.props.to},this.props.children));
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var cond = propsAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `TabLink`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_shared_TabLink
});
var view_shared_io_BaseForm = function() { };
$hxClasses["view.shared.io.BaseForm"] = view_shared_io_BaseForm;
view_shared_io_BaseForm.__name__ = "view.shared.io.BaseForm";
view_shared_io_BaseForm.compareStates = function(comp) {
	var dObj = js_Boot.__cast(comp.state.actualState , model_ORM);
	var _g = 0;
	var _g1 = Reflect.fields(dObj);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		haxe_Log.trace("" + f + ":" + Std.string(Reflect.field(comp.state.actualState,f)) + "<==>" + Std.string(Reflect.field(comp.state.initialState,f)) + "<",{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 44, className : "view.shared.io.BaseForm", methodName : "compareStates"});
	}
};
view_shared_io_BaseForm.doChange = function(comp,name,value) {
	var c = js_Boot.getClass(comp);
	haxe_Log.trace(c.__name__,{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 50, className : "view.shared.io.BaseForm", methodName : "doChange"});
	haxe_Log.trace("" + name + ": " + Std.string(value) + " ",{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 51, className : "view.shared.io.BaseForm", methodName : "doChange"});
	if(name != null && name != "") {
		haxe_Log.trace(Reflect.getProperty(comp.state.actualState,name),{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 55, className : "view.shared.io.BaseForm", methodName : "doChange"});
		Reflect.setProperty(comp.state.actualState,name,value);
	}
};
view_shared_io_BaseForm.initFieldNames = function(keys) {
	var fieldNames = [];
	var k = keys;
	while(k.hasNext()) {
		var k1 = k.next();
		fieldNames.push(k1);
	}
	return fieldNames;
};
view_shared_io_BaseForm.renderPager = function(comp) {
	haxe_Log.trace("pageCount=" + Std.string(comp.state.pageCount),{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 124, className : "view.shared.io.BaseForm", methodName : "renderPager"});
	var tmp = react_ReactType.fromString("div");
	var tmp1 = react_ReactType.fromString("nav");
	return React.createElement(tmp,{ className : "paginationContainer"},React.createElement(tmp1,{ },React.createElement(react_ReactType.fromComp(react_ReactPaginate),{ previousLabel : "<", breakLinkClassName : "pagination-link", pageLinkClassName : "pagination-link", nextLinkClassName : "pagination-next", previousLinkClassName : "pagination-previous", nextLabel : ">", breakLabel : "...", breakClassName : "break-me", pageCount : comp.state.pageCount, marginPagesDisplayed : 2, pageRangeDisplayed : 5, onPageChange : function(data) {
		haxe_Log.trace("" + Std.string(comp.props.match.params.action) + "  " + data.selected,{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 141, className : "view.shared.io.BaseForm", methodName : "renderPager"});
		var fun = Reflect.field(comp,comp.props.match.params.action);
		if(Reflect.isFunction(fun)) {
			fun.apply(comp,[{ page : data.selected}]);
		}
	}, containerClassName : "pagination  is-small", subContainerClassName : "pages pagination", activeLinkClassName : "is-current"})));
};
view_shared_io_BaseForm.prototype = {
	comp: null
	,handleChange: function(e) {
		var el = e.target;
		haxe_Log.trace(Type.typeof(el),{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 73, className : "view.shared.io.BaseForm", methodName : "handleChange"});
		if(el.name != "" && el.name != null) {
			haxe_Log.trace(">>" + Std.string(el.name) + "=>" + Std.string(el.value) + "<<",{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 77, className : "view.shared.io.BaseForm", methodName : "handleChange"});
			this.comp.state.actualState[el.name] = el.value;
			haxe_Log.trace(Reflect.field(this.comp.state.actualState,el.name),{ fileName : "src/view/shared/io/BaseForm.hx", lineNumber : 80, className : "view.shared.io.BaseForm", methodName : "handleChange"});
		}
	}
	,storeParams: function(path,params) {
		var _g = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g2 = Reflect.fields(params);
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.h[f] = Reflect.field(params,f);
		}
		var pMap = _g;
		var _g = new haxe_ds_StringMap();
		_g.h[path] = pMap;
		return _g;
	}
	,restoreParams: function(m) {
		var p = { };
		var h = m.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var k = _g1_key;
			var v = _g1_value;
			p[k] = v;
		}
		return p;
	}
	,__class__: view_shared_io_BaseForm
};
var view_shared_io_FormApi = function(rc,sM) {
	this.ky = shared_Utils.genKey;
	this.comp = rc;
	this._me = this;
	if(rc.props != null) {
		this.sM = sM == null ? rc.props.sideMenu : sM;
	}
	haxe_Log.trace(Reflect.fields(sM),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 94, className : "view.shared.io.FormApi", methodName : "new"});
};
$hxClasses["view.shared.io.FormApi"] = view_shared_io_FormApi;
view_shared_io_FormApi.__name__ = "view.shared.io.FormApi";
view_shared_io_FormApi.dyn2map = function(d) {
	if(d == null) {
		return null;
	}
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g2 = Reflect.fields(d);
	while(_g1 < _g2.length) {
		var f = _g2[_g1];
		++_g1;
		_g.h[f] = Reflect.field(d,f);
	}
	return _g;
};
view_shared_io_FormApi.getTableRoot = function(match) {
	var baseUrl = match.path.split("/:section")[0];
	var newUrl = "" + baseUrl + "/" + match.params.section + "/" + match.params.action;
	var _this_r = new RegExp("^/","".split("u").join(""));
	return baseUrl.replace(_this_r,"").split("/").concat([newUrl]);
};
view_shared_io_FormApi.mHandlers = function(e) {
	e.preventDefault();
};
view_shared_io_FormApi.renderSelectOptions = function(fel) {
	var sel = fel;
	var _this = ["Button","Hidden","DatePicker","DateTimePicker","Input","Password","Checkbox","Radio","Select","None","NFormat","TextArea","File","Upload"];
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i];
	}
	var opts = result;
	var rOpts = [];
	var k = 0;
	var _g = 0;
	while(_g < opts.length) {
		var opt = opts[_g];
		++_g;
		rOpts.push(React.createElement(react_ReactType.fromString("option"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 492, className : "view.shared.io.FormApi", methodName : "renderSelectOptions"})},opt));
	}
	return rOpts;
};
view_shared_io_FormApi.params = function(ids) {
	return view_shared_io_Param.pInts(ids);
};
view_shared_io_FormApi.sParams = function(ids) {
	return view_shared_io_Param.pStrings(ids);
};
view_shared_io_FormApi.initSideMenu = function(comp,sMb,sM) {
	return view_shared_io_FormApi.initSideMenu2(comp,[sMb],sM);
};
view_shared_io_FormApi.initSideMenu2 = function(comp,sMa,sM) {
	var sma;
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	while(_g1 < sMa.length) {
		var sma = sMa[_g1];
		++_g1;
		_g.h[sma.section] = sma;
	}
	sM.menuBlocks = _g;
	return sM;
};
view_shared_io_FormApi.localDate = function(d) {
	if(d == null) {
		d = HxOverrides.dateStr(new Date());
	}
	haxe_Log.trace(d,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 602, className : "view.shared.io.FormApi", methodName : "localDate"});
	haxe_Log.trace(Date.parse(d),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 603, className : "view.shared.io.FormApi", methodName : "localDate"});
	return DateTools.format(new Date(Date.parse(d)),"%d.%m.%Y %H:%M");
};
view_shared_io_FormApi.obj2map = function(obj,fields) {
	var m = new haxe_ds_StringMap();
	if(fields == null) {
		fields = Reflect.fields(obj);
	}
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		m.h[field] = Reflect.field(obj,field);
	}
	return m;
};
view_shared_io_FormApi.filterMap = function(m,keys) {
	var r = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		r.h[k] = m.h[k];
	}
	return r;
};
view_shared_io_FormApi.prototype = {
	requests: null
	,dataAccess: null
	,dbData: null
	,dbMetaData: null
	,formColElements: null
	,_menuItems: null
	,fState: null
	,_fstate: null
	,modalFormTableHeader: null
	,modalFormTableBody: null
	,autoFocus: null
	,initialState: null
	,section: null
	,comp: null
	,sM: null
	,_me: null
	,doAction: function(defaultAction) {
		if(this.comp.props.match != null && (this.comp.props.match.params.action != null || defaultAction != null)) {
			var action = this.comp.props.match.params.action != null ? this.comp.props.match.params.action : defaultAction;
			var c = js_Boot.getClass(this.comp);
			haxe_Log.trace("going 2 call " + c.__name__ + " " + action,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 102, className : "view.shared.io.FormApi", methodName : "doAction"});
			this.executeMethod(action);
		}
	}
	,createStateValuesArray: function(data,view) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < data.length) {
			var r = data[_g1];
			++_g1;
			_g.push(this.createStateValues(r,view));
		}
		return _g;
	}
	,createStateValues: function(data,view) {
		var vState = new haxe_ds_StringMap();
		haxe_Log.trace(new haxe_ds__$StringMap_StringMapKeyIterator(data.h),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 115, className : "view.shared.io.FormApi", methodName : "createStateValues"});
		haxe_Log.trace(new haxe_ds__$StringMap_StringMapKeyIterator(view.h),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 116, className : "view.shared.io.FormApi", methodName : "createStateValues"});
		var h = data.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			if(Object.prototype.hasOwnProperty.call(view.h,k)) {
				var v = data.h[k];
				vState.h[k] = v;
			}
		}
		haxe_Log.trace(vState == null ? "null" : haxe_ds_StringMap.stringify(vState.h),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 125, className : "view.shared.io.FormApi", methodName : "createStateValues"});
		return vState;
	}
	,selectedRowsMap: function(state) {
		var _g = [];
		var _g1 = 0;
		var _g2 = state.selectedRows;
		while(_g1 < _g2.length) {
			var r = _g2[_g1];
			++_g1;
			_g.push(this.selectedRowMap(r));
		}
		return _g;
	}
	,selectedRowMap: function(row) {
		var _g = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g2 = row.cells;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.h[c.dataset.name] = c.innerHTML;
		}
		var rM = _g;
		var v = row.dataset.id;
		rM.h["id"] = v;
		return rM;
	}
	,setSectionComponent: function(s) {
		this.section = s;
	}
	,itemHandler: function(e) {
		e.preventDefault();
		var action = (js_Boot.__cast(e.target , HTMLButtonElement)).getAttribute("data-action");
		haxe_Log.trace(action,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 171, className : "view.shared.io.FormApi", methodName : "itemHandler"});
		haxe_Log.trace(Reflect.field(this._me,"callMethod"),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 172, className : "view.shared.io.FormApi", methodName : "itemHandler"});
		this.callMethod(action,e);
	}
	,callMethod: function(method,e) {
		var eTarget = js_Boot.__cast(e.target , HTMLElement);
		var targetSection = eTarget.dataset.section;
		haxe_Log.trace(">>" + targetSection + "<< " + this.comp.props.match.params.section,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 181, className : "view.shared.io.FormApi", methodName : "callMethod"});
		if(eTarget.dataset.then != null) {
			shared_Utils.extend(this.comp.props.location.state,{ then : eTarget.dataset.then});
		}
		haxe_Log.trace(this.comp.props.location.state,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 184, className : "view.shared.io.FormApi", methodName : "callMethod"});
		if(targetSection != null && targetSection != this.comp.props.match.params.section) {
			haxe_Log.trace("" + targetSection + "." + method,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 187, className : "view.shared.io.FormApi", methodName : "callMethod"});
			if(method == "reset" && this.comp.props.location.state != null && this.comp.props.location.state.activeContactUrl != null) {
				haxe_Log.trace("goBack",{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 191, className : "view.shared.io.FormApi", methodName : "callMethod"});
				this.comp.props.history.goBack();
				return true;
			}
			var tmp = this.comp.props.history;
			var tmp1 = this.getUrl(eTarget.dataset.action,targetSection);
			tmp.push(tmp1,this.comp.props.location.state);
			return true;
		}
		if(targetSection != null) {
			haxe_Log.trace(this.getUrl(eTarget.dataset.action),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 200, className : "view.shared.io.FormApi", methodName : "callMethod"});
			var c = js_Boot.getClass(this.comp);
			haxe_Log.trace(c.__name__,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 201, className : "view.shared.io.FormApi", methodName : "callMethod"});
		}
		return this.executeMethod(method);
	}
	,executeMethod: function(method,r) {
		var fun = Reflect.field(this.comp,method);
		if(Reflect.isFunction(fun)) {
			fun.apply(this.comp,r);
			return true;
		} else {
			haxe_Log.trace("" + method + " not found",{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 226, className : "view.shared.io.FormApi", methodName : "executeMethod"});
		}
		return false;
	}
	,getUrl: function(action,targetSection) {
		var match = this.comp.props.match;
		var baseUrl = match.path.split(":section")[0];
		var section = match.params.section;
		haxe_Log.trace(this.comp.props.location,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 236, className : "view.shared.io.FormApi", methodName : "getUrl"});
		var id = this.comp.props.location.hash == "" || action == "insert" ? "" : "/" + HxOverrides.substr(this.comp.props.location.hash,1,null);
		return "" + baseUrl + (targetSection == null ? section : targetSection) + "/" + action + id;
	}
	,toParams: function(to) {
		var id = this.comp.props.match.params.id;
		if(id == null) {
			return "";
		} else {
			return "/" + id;
		}
	}
	,selectAllRows: function(state,unselect) {
		if(unselect == null) {
			unselect = false;
		}
		var _g = 0;
		var _g1 = state.selectedRows;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(unselect) {
				r.classList.remove("is-selected");
			} else {
				r.classList.add("is-selected");
			}
		}
	}
	,render: function(content) {
		if(this.sM == null) {
			return null;
		}
		if(this.sM.section != null) {
			haxe_Log.trace(this.sM.section + ":" + this.comp.props.match.params.section,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 280, className : "view.shared.io.FormApi", methodName : "render"});
			if(this.sM.section != this.comp.props.match.params.section && this.comp.props.match.params.section != null) {
				this.sM.section = this.comp.props.match.params.section;
			}
		}
		var tmp = react_ReactType.fromString("div");
		var tmp1 = React.createElement(react_ReactType.fromString("div"),{ className : "formsContainer"},content);
		var tmp2 = view_shared_Menu._renderWrapper;
		var tmp3 = Object.assign({ },this.sM,{ className : "menu", parentComponent : this.comp, itemHandler : $bind(this,this.itemHandler)});
		return React.createElement(tmp,{ className : "columns"},tmp1,React.createElement(tmp2,tmp3));
	}
	,renderField: function(name,k,state) {
		var formField = state.fields.h[name];
		if(k == 0) {
			haxe_Log.trace(state.handleChange,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 298, className : "view.shared.io.FormApi", methodName : "renderField"});
		}
		var _g = formField.type;
		if(_g == null) {
			return [React.createElement(react_ReactType.fromString("label"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 306, className : "view.shared.io.FormApi", methodName : "renderField"})},formField.label),React.createElement(react_ReactType.fromString("input"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 306, className : "view.shared.io.FormApi", methodName : "renderField"}), name : name, defaultValue : state.values.h[name], onChange : formField.disabled ? null : state.handleChange, readOnly : formField.disabled})];
		} else if(_g == "Hidden") {
			return React.createElement(react_ReactType.fromString("input"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 304, className : "view.shared.io.FormApi", methodName : "renderField"}), name : name, type : "hidden", defaultValue : state.values.h[name], readOnly : formField.disabled});
		} else {
			return [React.createElement(react_ReactType.fromString("label"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 306, className : "view.shared.io.FormApi", methodName : "renderField"})},formField.label),React.createElement(react_ReactType.fromString("input"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 306, className : "view.shared.io.FormApi", methodName : "renderField"}), name : name, defaultValue : state.values.h[name], onChange : formField.disabled ? null : state.handleChange, readOnly : formField.disabled})];
		}
	}
	,renderElements: function(cState) {
		haxe_Log.trace(Lambda.empty(cState.data),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 315, className : "view.shared.io.FormApi", methodName : "renderElements"});
		if(Lambda.empty(cState.data)) {
			return null;
		}
		var h = cState.fields.h;
		var field_h = h;
		var field_keys = Object.keys(h);
		var field_length = field_keys.length;
		var field_current = 0;
		var elements = [];
		var k = 0;
		while(field_current < field_length) {
			var field = field_keys[field_current++];
			var tmp = react_ReactType.fromString("div");
			var tmp1 = shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 324, className : "view.shared.io.FormApi", methodName : "renderElements"});
			var tmp2 = cState.fields.h[field].type == "Hidden" ? null : "formField";
			var tmp3 = this.renderField(field,k,cState);
			elements.push(React.createElement(tmp,{ key : tmp1, className : tmp2},tmp3));
		}
		return elements;
	}
	,createElementsArray: function() {
		if(Lambda.empty(this._fstate.dataTable)) {
			return null;
		}
		this.formColElements = new haxe_ds_StringMap();
		this.addFormColumns();
		var fields = new haxe_ds__$StringMap_StringMapKeyIterator(this._fstate.fields.h);
		var pID = "";
		var name = fields;
		while(name.hasNext()) {
			var name1 = name.next();
			if(this._fstate.fields.h[name1].type == "Hidden" && this._fstate.fields.h[name1].primary) {
				pID = name1;
				break;
			}
		}
		var _g = 0;
		var _g1 = this._fstate.dataTable;
		while(_g < _g1.length) {
			var dR = _g1[_g];
			++_g;
			fields = new haxe_ds__$StringMap_StringMapKeyIterator(this._fstate.fields.h);
			var name = fields;
			while(name.hasNext()) {
				var name1 = name.next();
				if(this._fstate.fields.h[name1].type == "Hidden") {
					continue;
				}
				var fF = this._fstate.fields.h[name1];
				this.formColElements.h[name1].push({ className : fF.className, name : name1, value : dR.h[name1], displayFormat : fF.displayFormat, type : fF.type, disabled : fF.disabled, required : fF.required, placeholder : fF.placeholder, validate : fF.validate});
			}
		}
		return this.renderColumns();
	}
	,addFormColumns: function() {
		var h = this._fstate.fields.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			if(this._fstate.fields.h[name].type == "Hidden") {
				continue;
			}
			var this1 = this.formColElements;
			var v = [];
			this1.h[name] = v;
		}
	}
	,renderColumns: function() {
		var h = this.formColElements.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		var cols = [];
		var col = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			cols.push(React.createElement(react_ReactType.fromString("div"),{ key : shared_Utils.genKey(name + "_" + col++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 411, className : "view.shared.io.FormApi", methodName : "renderColumns"}), className : "col", 'data-name' : name},this.renderRows(name)));
		}
		return cols;
	}
	,renderColumnHeaders: function() {
		var h = this._fstate.fields.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		var cols = [];
		var c = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			if(this._fstate.fields.h[name].type == "Hidden") {
				continue;
			}
			var formField = this._fstate.fields.h[name];
			cols.push(React.createElement(react_ReactType.fromString("div"),{ key : shared_Utils.genKey(c++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 427, className : "view.shared.io.FormApi", methodName : "renderColumnHeaders"}), className : "col"},React.createElement(react_ReactType.fromString("div"),{ className : "form-table-cell"},React.createElement(react_ReactType.fromString("div"),{ className : "header", 'data-name' : name},formField.label))));
		}
		return cols;
	}
	,renderRowCell: function(fF,k) {
		var model = fF.name;
		var _g = fF.type;
		if(_g == null) {
			return React.createElement(react_ReactType.fromString("input"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 457, className : "view.shared.io.FormApi", methodName : "renderRowCell"}), name : model, type : "hidden"});
		} else {
			switch(_g) {
			case "Checkbox":
				return React.createElement(react_ReactType.fromString("input"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 446, className : "view.shared.io.FormApi", methodName : "renderRowCell"}), name : model, disabled : fF.disabled});
			case "Hidden":
				if(fF.primary) {
					return null;
				} else {
					return React.createElement(react_ReactType.fromString("inputl"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 449, className : "view.shared.io.FormApi", methodName : "renderRowCell"}), name : model, type : "hidden"});
				}
				break;
			case "Select":
				var tmp = react_ReactType.fromString("select");
				var tmp1 = view_shared_io_FormApi.renderSelectOptions(fF.value);
				return React.createElement(tmp,{ name : model},tmp1);
			default:
				return React.createElement(react_ReactType.fromString("input"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 457, className : "view.shared.io.FormApi", methodName : "renderRowCell"}), name : model, type : "hidden"});
			}
		}
	}
	,renderRows: function(name) {
		var elements = [];
		var k = 0;
		var tmp = react_ReactType.fromString("div");
		var tmp1 = { key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 468, className : "view.shared.io.FormApi", methodName : "renderRows"}), className : "form-table-cell", style : { minHeight : "0px", height : "0px", overflow : "hidden", padding : "0px 0.3rem"}};
		var tmp2 = this._fstate.fields.h[name];
		elements.push(React.createElement(tmp,tmp1,React.createElement(react_ReactType.fromString("div"),{ className : "header", 'data-name' : name},tmp2.label)));
		var _g = 0;
		var _g1 = this.formColElements.h[name];
		while(_g < _g1.length) {
			var fF = _g1[_g];
			++_g;
			elements.push(React.createElement(react_ReactType.fromString("div"),{ key : shared_Utils.genKey(k++,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 477, className : "view.shared.io.FormApi", methodName : "renderRows"}), className : "form-table-cell"},this.renderRowCell(fF,k++)));
		}
		return elements;
	}
	,renderModalFormBodyHeader: function() {
		this.modalFormTableHeader = React.createRef();
		if(this._fstate.dataTable == null || this._fstate.dataTable.length == 0) {
			return null;
		}
		return React.createElement(react_ReactType.fromString("section"),{ ref : this.modalFormTableHeader, className : "modal-card-body header"},this.renderColumnHeaders());
	}
	,adjustModalFormColumns: function() {
		haxe_Log.trace(react_ReactRef.get_current(this.modalFormTableHeader),{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 512, className : "view.shared.io.FormApi", methodName : "adjustModalFormColumns"});
		haxe_Log.trace(react_ReactRef.get_current(this.modalFormTableBody).children,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 514, className : "view.shared.io.FormApi", methodName : "adjustModalFormColumns"});
		var bodyCols = react_ReactRef.get_current(this.modalFormTableBody).children;
		var headerCols = react_ReactRef.get_current(this.modalFormTableHeader).children;
		haxe_Log.trace(bodyCols,{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 517, className : "view.shared.io.FormApi", methodName : "adjustModalFormColumns"});
		if(bodyCols == null) {
			return;
		}
		var i = 0;
		var _g = 0;
		while(_g < bodyCols.length) {
			var child = bodyCols[_g];
			++_g;
			headerCols.item(i++).setAttribute("style","width:" + child.offsetWidth + "px");
		}
	}
	,closeWait: function() {
		this.comp.setState({ loading : false});
		haxe_Log.trace("Done waiting",{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 533, className : "view.shared.io.FormApi", methodName : "closeWait"});
	}
	,renderWait: function() {
		if(this.comp.state.values != null && this.comp.state.values.h["loadResult"] != null) {
			haxe_Log.trace(this.comp.state.values.h["closeAfter"] != -1 ? "Y" : "N",{ fileName : "src/view/shared/io/FormApi.hx", lineNumber : 544, className : "view.shared.io.FormApi", methodName : "renderWait"});
			if(this.comp.state.values.h["closeAfter"] != -1) {
				var t = haxe_Timer.delay($bind(this,this.closeWait),this.comp.state.values.h["closeAfter"] != null ? this.comp.state.values.h["closeAfter"] : 8000);
			}
			var tmp = react_ReactType.fromString("div");
			var tmp1 = react_ReactType.fromString("div");
			var tmp2 = this.comp.state.values.h["loadResult"];
			return React.createElement(tmp,{ className : "loader-screen"},React.createElement(tmp1,{ className : "loader-box"},React.createElement(react_ReactType.fromString("div"),{ className : "loader-content"},tmp2)));
		} else {
			var tmp = react_ReactType.fromString("div");
			var tmp1 = react_ReactType.fromString("div");
			return React.createElement(tmp,{ className : "loader-screen"},React.createElement(tmp1,{ className : "loader-box"},React.createElement(react_ReactType.fromString("div"),{ className : "loader loader-content", style : { width : "6rem", height : "6rem", margin : "auto", borderWidth : "0.64rem"}})));
		}
	}
	,ky: null
	,__class__: view_shared_io_FormApi
};
var view_shared_io_Param = function() { };
$hxClasses["view.shared.io.Param"] = view_shared_io_Param;
view_shared_io_Param.__name__ = "view.shared.io.Param";
view_shared_io_Param.pInts = function(ints) {
	var result = new Array(ints.length);
	var _g = 0;
	var _g1 = ints.length;
	while(_g < _g1) {
		var i = _g++;
		var i1 = ints[i];
		result[i] = i1 == null ? "null" : "" + i1;
	}
	return result.join("|");
};
view_shared_io_Param.pStrings = function(ids) {
	var result = new Array(ids.length);
	var _g = 0;
	var _g1 = ids.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = ids[i];
	}
	return result.join("|");
};
var view_shared_io_Tooltip = function(el,tProps) {
	this.el = el;
	if(tProps.classes != null) {
		if(!Lambda.has(tProps.classes,"tooltip")) {
			HxOverrides.remove(tProps.classes,"tooltip");
		}
		this.classes = tProps.classes;
		var _this = this.classes;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			el.classList.add("is-tooltip-" + _this[i]);
			result[i] = null;
		}
	}
	el.classList.add("tooltip");
	el.dataset.tooltip = tProps.data;
};
$hxClasses["view.shared.io.Tooltip"] = view_shared_io_Tooltip;
view_shared_io_Tooltip.__name__ = "view.shared.io.Tooltip";
view_shared_io_Tooltip.prototype = {
	classes: null
	,el: null
	,clear: function() {
		var _gthis = this;
		this.el.classList.remove("tooltip");
		var _this = this.classes;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			_gthis.el.classList.remove("is-tooltip-" + _this[i]);
			result[i] = null;
		}
		this.el.removeAttribute("data-tooltip");
	}
	,__class__: view_shared_io_Tooltip
};
var view_table_Table = function(props) {
	React_Component.call(this,props);
	this.set_headerUpdated(false);
	this.fieldNames = [];
	this.trs = [];
	this._trace = true;
	this.id = "id";
	if(props.dataState != null) {
		var h = props.dataState.columns.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			if(props.dataState.columns.h[k].useAsIndex) {
				this.id = k;
			}
			this.fieldNames.push(k);
		}
	}
	if(this._trace) {
		haxe_Log.trace(props.parentComponent.props.id,{ fileName : "src/view/table/Table.hx", lineNumber : 186, className : "view.table.Table", methodName : "new"});
	}
	this.state = { selectedRows : []};
	this.tableRef = React.createRef();
	this.fixedHeader = React.createRef();
	this.tHeadRef = React.createRef();
	this.firstRowRef = React.createRef();
	if(this.state == null) {
		$global.console.error("Warning: component Table is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["view.table.Table"] = view_table_Table;
view_table_Table.__name__ = "view.table.Table";
view_table_Table.__super__ = React_Component;
view_table_Table.prototype = $extend(React_Component.prototype,{
	fieldNames: null
	,tableRef: null
	,fixedHeader: null
	,firstRowRef: null
	,id: null
	,tHeadRef: null
	,visibleColumns: null
	,headerUpdated: null
	,_timer: null
	,_trace: null
	,trs: null
	,set_headerUpdated: function(hU) {
		haxe_Log.trace(hU,{ fileName : "src/view/table/Table.hx", lineNumber : 198, className : "view.table.Table", methodName : "set_headerUpdated"});
		return this.headerUpdated = hU;
	}
	,render: function() {
		if(this._trace && this.props.data != null) {
			haxe_Log.trace(this.props.data.length,{ fileName : "src/view/table/Table.hx", lineNumber : 207, className : "view.table.Table", methodName : "render"});
		}
		if(this.props.renderPager != null) {
			this.props.renderPager();
		}
		if(this.props.data == null || this.props.data.length == 0) {
			if(this.state.loading) {
				var tmp = react_ReactType.fromString("section");
				var tmp1 = react_ReactType.fromString("div");
				return React.createElement(tmp,{ className : "hero is-alt", style : { flexGrow : 1}},React.createElement(tmp1,{ className : "loader-box"},React.createElement(react_ReactType.fromString("div"),{ className : "loader", style : { width : "6rem", height : "6rem", margin : "auto", borderWidth : "0.64rem"}})));
			} else {
				return null;
			}
		}
		var tmp = react_ReactType.fromString("div");
		var tmp1 = react_ReactType.fromString("div");
		var tmp2 = react_ReactType.fromString("table");
		var tmp3 = react_ReactType.fromString("thead");
		var tmp4 = react_ReactType.fromString("tr");
		var tmp5 = { ref : this.fixedHeader};
		var tmp6 = this.renderHeaderDisplay();
		var tmp7 = React.createElement(tmp1,{ className : "header-background"},React.createElement(tmp2,{ className : "tableHead head"},React.createElement(tmp3,{ },React.createElement(tmp4,tmp5,tmp6))));
		var tmp1 = react_ReactType.fromString("div");
		var tmp2 = react_ReactType.fromString("table");
		var tmp3 = { ref : this.tableRef, id : this.props.id, className : "table " + this.props.className};
		var tmp4 = react_ReactType.fromString("thead");
		var tmp5 = react_ReactType.fromString("tr");
		var tmp6 = { ref : this.tHeadRef};
		var tmp8 = this.renderHeaderRow();
		var tmp9 = React.createElement(tmp4,{ },React.createElement(tmp5,tmp6,tmp8));
		var tmp4 = react_ReactType.fromString("tbody");
		var tmp5 = this.renderRows();
		var tmp6 = React.createElement(tmp1,{ className : "grid-container-inner"},React.createElement(tmp2,tmp3,tmp9,React.createElement(tmp4,{ },tmp5)));
		var tmp1 = this.renderPager(this.props.parentComponent);
		return React.createElement(tmp,{ className : "fixed-grid-container"},tmp7,tmp6,tmp1);
	}
	,renderPager: function(comp) {
		haxe_Log.trace("pageCount=" + Std.string(comp.state.pageCount),{ fileName : "src/view/table/Table.hx", lineNumber : 255, className : "view.table.Table", methodName : "renderPager"});
		var f = comp.state.pageCount;
		if(isNaN(f) || comp.state.pageCount < 2) {
			return null;
		}
		var tmp = react_ReactType.fromString("div");
		var tmp1 = react_ReactType.fromString("nav");
		return React.createElement(tmp,{ id : "pct", className : "paginationContainer"},React.createElement(tmp1,{ },React.createElement(react_ReactType.fromComp(react_ReactPaginate),{ previousLabel : "<", breakLinkClassName : "pagination-link", pageLinkClassName : "pagination-link", nextLinkClassName : "pagination-next", previousLinkClassName : "pagination-previous", nextLabel : ">", breakLabel : "...", breakClassName : "break-me", pageCount : comp.state.pageCount, marginPagesDisplayed : 2, pageRangeDisplayed : 5, onPageChange : function(data) {
			haxe_Log.trace("" + Std.string(comp.props.match.params.action) + "  " + data.selected,{ fileName : "src/view/table/Table.hx", lineNumber : 275, className : "view.table.Table", methodName : "renderPager"});
			var fun = Reflect.field(comp,comp.props.match.params.action);
			if(Reflect.isFunction(fun)) {
				fun.apply(comp,[{ page : data.selected}]);
			}
		}, containerClassName : "pagination is-small", subContainerClassName : "pages pagination", activeLinkClassName : "is-current"})));
	}
	,renderHeaderRow: function() {
		if(this.props.dataState == null) {
			return null;
		}
		var headerRow = [];
		var h = this.props.dataState.columns.h;
		var field_h = h;
		var field_keys = Object.keys(h);
		var field_length = field_keys.length;
		var field_current = 0;
		while(field_current < field_length) {
			var field = field_keys[field_current++];
			var hC = this.props.dataState.columns.h[field];
			if(hC.show == false) {
				continue;
			}
			var tmp = react_ReactType.fromString("th");
			var tmp1 = react_ReactType.fromString("div");
			headerRow.push(React.createElement(tmp,{ key : field},React.createElement(tmp1,{ className : hC.headerClassName},hC.label != null ? hC.label : hC.name,React.createElement(react_ReactType.fromString("span"),{ className : "sort-box fa fa-sort"}))));
		}
		if(this._trace) {
			haxe_Log.trace(headerRow.length,{ fileName : "src/view/table/Table.hx", lineNumber : 323, className : "view.table.Table", methodName : "renderHeaderRow"});
		}
		return headerRow;
	}
	,renderHeaderDisplay: function() {
		if(this.props.dataState == null) {
			return null;
		}
		if(this._trace) {
			haxe_Log.trace(new haxe_ds__$StringMap_StringMapKeyIterator(this.props.dataState.columns.h),{ fileName : "src/view/table/Table.hx", lineNumber : 331, className : "view.table.Table", methodName : "renderHeaderDisplay"});
		}
		var headerRow = [];
		var h = this.props.dataState.columns.h;
		var field_h = h;
		var field_keys = Object.keys(h);
		var field_length = field_keys.length;
		var field_current = 0;
		while(field_current < field_length) {
			var field = field_keys[field_current++];
			var hC = this.props.dataState.columns.h[field];
			if(hC.show == false) {
				continue;
			}
			this.visibleColumns++;
			var sortClass;
			var _g = hC.search;
			if(_g == null) {
				sortClass = "fa-sort";
			} else {
				switch(_g) {
				case "ASC":
					sortClass = "fa-sort-up";
					break;
				case "DESC":
					sortClass = "fa-sort-down";
					break;
				default:
					sortClass = "fa-sort";
				}
			}
			var tmp = react_ReactType.fromString("th");
			var tmp1 = react_ReactType.fromString("div");
			headerRow.push(React.createElement(tmp,{ key : field},React.createElement(tmp1,{ className : "th-box " + (hC.headerClassName != null ? hC.headerClassName : hC.className)},hC.label != null ? hC.label : hC.name,React.createElement(react_ReactType.fromString("span"),{ className : "sort-box fa " + sortClass}))));
		}
		return headerRow;
	}
	,renderRows: function(dRows) {
		if(dRows == null) {
			dRows = this.props.data;
		}
		var dRs = [];
		var row = 0;
		var primary = this.props.primary != null && this.props.primary.length > 0 ? this.props.primary : "id";
		var _g = 0;
		while(_g < dRows.length) {
			var dR = dRows[_g];
			++_g;
			var fRRef = row == 0 ? this.firstRowRef : null;
			if(row == 0) {
				haxe_Log.trace("" + this.id + " key=" + (dR == null ? "null" : haxe_ds_StringMap.stringify(dR.h)),{ fileName : "src/view/table/Table.hx", lineNumber : 367, className : "view.table.Table", methodName : "renderRows"});
			}
			dRs.push(React.createElement(react_ReactType.fromComp(view_table_Tr),{ key : dR.h["id"], columns : this.props.dataState.columns, data : dR, firstTableRow : fRRef, fieldNames : this.fieldNames, selectAble : this.props.selectAble != false, row : row++, parentComponent : this.props.parentComponent}));
		}
		if(this._trace) {
			haxe_Log.trace(dRs.length,{ fileName : "src/view/table/Table.hx", lineNumber : 372, className : "view.table.Table", methodName : "renderRows"});
		}
		return dRs;
	}
	,select: function(mEv,tr) {
		if(this._trace) {
			haxe_Log.trace(mEv.altKey,{ fileName : "src/view/table/Table.hx", lineNumber : 378, className : "view.table.Table", methodName : "select"});
		}
		if(this._trace) {
			haxe_Log.trace(mEv.currentTarget,{ fileName : "src/view/table/Table.hx", lineNumber : 379, className : "view.table.Table", methodName : "select"});
		}
		var htRow = js_Boot.__cast(mEv.currentTarget , HTMLTableRowElement);
		var rows = htRow.parentElement.children;
		if(mEv.altKey) {
			this.selectAltGroup(this.props.dataState.altGroupPos,htRow);
		} else if(mEv.ctrlKey) {
			var _g = 0;
			while(_g < rows.length) {
				var r = rows[_g];
				++_g;
				r.classList.toggle("is-selected");
			}
		} else {
			htRow.classList.toggle("is-selected");
		}
		var selRows = [];
		var _g = 0;
		while(_g < rows.length) {
			var r = rows[_g];
			++_g;
			if(r.classList.contains("is-selected")) {
				selRows.push(r);
			}
		}
		this.setState({ selectedRows : selRows});
	}
	,selectAltGroup: function(altGroupPos,cRow) {
		var groupName = cRow.cells.item(altGroupPos).textContent;
		var tEl = cRow.parentElement;
		var _g = 0;
		var _g1 = tEl.children.length;
		while(_g < _g1) {
			var i = _g++;
			var row = tEl.children.item(i);
			if(this._trace) {
				haxe_Log.trace(row.cells.item(altGroupPos).nodeValue + "==" + groupName,{ fileName : "src/view/table/Table.hx", lineNumber : 437, className : "view.table.Table", methodName : "selectAltGroup"});
			}
			if(row.cells.item(altGroupPos).textContent == groupName) {
				row.classList.toggle("is-selected");
			}
		}
	}
	,selectedRowsMap: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.state.selectedRows;
		while(_g1 < _g2.length) {
			var r = _g2[_g1];
			++_g1;
			_g.push(this.selectedRowMap(r));
		}
		return _g;
	}
	,selectedRowMap: function(row) {
		var _g = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g2 = row.cells;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.h[c.dataset.name] = c.innerHTML;
		}
		var rM = _g;
		var v = row.dataset.id;
		rM.h["id"] = v;
		return rM;
	}
	,layOut: function() {
		var _gthis = this;
		if(this._trace) {
			haxe_Log.trace("firstCall: " + (this.props.id + " " + Std.string(this.props.fullWidth)) + " " + Std.string(this.headerUpdated) + " " + Std.string(this.tHeadRef) + ": " + Std.string(this.tHeadRef != null && react_ReactRef.get_current(this.tHeadRef) != null),{ fileName : "src/view/table/Table.hx", lineNumber : 475, className : "view.table.Table", methodName : "layOut"});
		}
		var freeWidth = 0;
		if(this.tHeadRef == null || react_ReactRef.get_current(this.tHeadRef) == null) {
			if(this._trace) {
				haxe_Log.trace("" + Std.string(this.tHeadRef) + ": " + Std.string(this.tHeadRef != null && react_ReactRef.get_current(this.tHeadRef) != null),{ fileName : "src/view/table/Table.hx", lineNumber : 481, className : "view.table.Table", methodName : "layOut"});
			}
			if(this._timer != null) {
				return;
			}
			var _max = 13;
			this._timer = App.await(250,function() {
				_max -= 1;
				if(_max + 1 < 0) {
					return -1;
				}
				if(_gthis._trace) {
					haxe_Log.trace(_max,{ fileName : "src/view/table/Table.hx", lineNumber : 490, className : "view.table.Table", methodName : "layOut"});
				}
				if(_gthis.tHeadRef != null) {
					return react_ReactRef.get_current(_gthis.tHeadRef) != null;
				} else {
					return false;
				}
			},$bind(this,this.layOut));
			return;
		}
		this.set_headerUpdated(true);
		var scrollBarWidth = App.config.getScrollbarWidth(true);
		var hasScrollbar = false;
		freeWidth = react_ReactRef.get_current(this.tableRef).parentElement.offsetWidth - react_ReactRef.get_current(this.tableRef).offsetWidth - (hasScrollbar ? scrollBarWidth : 0);
		freeWidth = react_ReactRef.get_current(this.tableRef).parentElement.offsetWidth - react_ReactRef.get_current(this.tableRef).offsetWidth;
		if(this._trace) {
			haxe_Log.trace("firstRowRef.current.offsetWidth:" + react_ReactRef.get_current(this.firstRowRef).offsetWidth + " scrollBarWidth:" + scrollBarWidth,{ fileName : "src/view/table/Table.hx", lineNumber : 507, className : "view.table.Table", methodName : "layOut"});
		}
		react_ReactRef.get_current(this.tableRef).setAttribute("style","margin-top:" + react_ReactRef.get_current(this.tHeadRef).offsetHeight * -1 + "px");
		var i = 0;
		var grow = [];
		if(this.props.fullWidth) {
			var _g = 0;
			var _g1 = react_ReactRef.get_current(this.firstRowRef).children;
			while(_g < _g1.length) {
				var cell = _g1[_g];
				++_g;
				var cGrow = cell.getAttribute("data-grow");
				if(cGrow != null) {
					grow[i] = Std.parseInt(cGrow);
				}
				++i;
			}
			var growSum = 0;
			Lambda.iter(grow,function(el) {
				growSum += el == null ? 0 : el;
			});
			if(growSum > 0) {
				var growUnit = Math.ceil(freeWidth / growSum);
				var _g = 0;
				var _g1 = grow.length;
				while(_g < _g1) {
					var i1 = _g++;
					if(grow[i1] != null && grow[i1] != 0) {
						react_ReactRef.get_current(this.firstRowRef).children.item(i1).setAttribute("width",Std.string(grow[i1] * growUnit + react_ReactRef.get_current(this.firstRowRef).children.item(i1).offsetWidth) + "px");
					}
				}
			}
			i = 0;
			var _g = 0;
			var _g1 = react_ReactRef.get_current(this.tHeadRef).children;
			while(_g < _g1.length) {
				var cell = _g1[_g];
				++_g;
				var w = cell.offsetWidth;
				var fixedHeaderCell = js_Boot.__cast(react_ReactRef.get_current(this.fixedHeader).childNodes[i] , HTMLElement);
				fixedHeaderCell.setAttribute("style","width:" + (i == 0 ? w + 1 : w) + "px");
				++i;
			}
		}
		var firstSelectedRow = react_ReactRef.get_current(this.firstRowRef).parentElement.querySelector("[class=\"is-selected\"]");
		if(firstSelectedRow != null) {
			if(this._trace) {
				haxe_Log.trace(firstSelectedRow.offsetTop,{ fileName : "src/view/table/Table.hx", lineNumber : 558, className : "view.table.Table", methodName : "layOut"});
			}
			firstSelectedRow.scrollIntoView();
		}
	}
	,componentDidMount: function() {
		var _gthis = this;
		if(this._trace && this.props.parentComponent.props.formRef != null && this.props.parentComponent.props.formRef.current != null) {
			haxe_Log.trace(this.props.parentComponent.props.formRef.current.name,{ fileName : "src/view/table/Table.hx", lineNumber : 567, className : "view.table.Table", methodName : "componentDidMount"});
		}
		if(this._trace && this.props.data != null && this.props.data[0] != null) {
			haxe_Log.trace(this.props.data[0].h["id"],{ fileName : "src/view/table/Table.hx", lineNumber : 569, className : "view.table.Table", methodName : "componentDidMount"});
		}
		window.requestAnimationFrame(function(t) {
			if(_gthis._trace) {
				haxe_Log.trace(t,{ fileName : "src/view/table/Table.hx", lineNumber : 573, className : "view.table.Table", methodName : "componentDidMount"});
			}
			_gthis.layOut();
		});
	}
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `Table`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
		if(this._trace) {
			haxe_Log.trace(Std.string(this.headerUpdated) + ":" + Std.string(this.tHeadRef),{ fileName : "src/view/table/Table.hx", lineNumber : 580, className : "view.table.Table", methodName : "componentDidUpdate"});
		}
		if(this.tHeadRef != null) {
			this.layOut();
		}
	}
	,componentWillUnmount: function() {
		if(this._trace) {
			haxe_Log.trace("leaving...",{ fileName : "src/view/table/Table.hx", lineNumber : 594, className : "view.table.Table", methodName : "componentWillUnmount"});
		}
		if(this._timer != null) {
			this._timer.stop();
		}
	}
	,shouldComponentUpdate: function(nextProps,nextState) {
		return true;
	}
	,showDims: function(ref) {
		var i = 0;
		var s = 0;
		var cells = ref.current != null ? ref.current.cells : ref.cells;
		var _g = 0;
		while(_g < cells.length) {
			var cell = cells[_g];
			++_g;
			if(this._trace) {
				haxe_Log.trace(cell.getBoundingClientRect().toJSON(),{ fileName : "src/view/table/Table.hx", lineNumber : 614, className : "view.table.Table", methodName : "showDims"});
			}
			s += cell.getBoundingClientRect().width;
		}
		if(this._trace) {
			haxe_Log.trace(" sum:" + s,{ fileName : "src/view/table/Table.hx", lineNumber : 617, className : "view.table.Table", methodName : "showDims"});
		}
	}
	,nodeDims: function(n) {
		var i = 0;
		var s = 0;
		var cells = n.childNodes;
		var _g = 0;
		while(_g < cells.length) {
			var cell = cells[_g];
			++_g;
			var dRect = (js_Boot.__cast(cell , HTMLElement)).getBoundingClientRect().toJSON();
			if(this._trace) {
				haxe_Log.trace(dRect,{ fileName : "src/view/table/Table.hx", lineNumber : 628, className : "view.table.Table", methodName : "nodeDims"});
			}
			s += (js_Boot.__cast(cell , HTMLElement)).getBoundingClientRect().width;
		}
		if(this._trace) {
			haxe_Log.trace(" sum:" + s,{ fileName : "src/view/table/Table.hx", lineNumber : 632, className : "view.table.Table", methodName : "nodeDims"});
		}
	}
	,setState: null
	,__class__: view_table_Table
	,__properties__: {set_headerUpdated:"set_headerUpdated"}
});
var view_table_Tr = function(props) {
	React_Component.call(this,props);
	this.ref = React.createRef();
	var match = props.parentComponent.props.match;
	this.id = props.data != null ? props.data.h["id"] : "";
	this.state = { cells : [], selected : props.parentComponent.props.selectAble && match != null && match.params.id != null && match.params.id.indexOf(this.id) > -1};
	if(match != null && match.params.id != null && match.params.id.indexOf(this.id) > -1) {
		this.select({ select : true});
	}
	if(props.parentComponent.props.location != null && props.parentComponent.props.location.hash.indexOf(this.id) > -1) {
		this.select({ select : true});
	}
	if(this.state == null) {
		$global.console.error("Warning: component Tr is stateful but its `state` is not initialized inside its constructor.\n\nEither add a `state = { ... }` statement to its constructor or define this component as a `ReactComponentOfProps` if it is only using `props`.\n\nIf it is using neither `props` nor `state`, you might consider using `@:jsxStatic` to avoid unneeded lifecycle. See https://github.com/kLabz/haxe-react/blob/next/doc/static-components.md for more information on static components.");
	}
};
$hxClasses["view.table.Tr"] = view_table_Tr;
view_table_Tr.__name__ = "view.table.Tr";
view_table_Tr.__super__ = React_Component;
view_table_Tr.prototype = $extend(React_Component.prototype,{
	me: null
	,id: null
	,ref: null
	,componentDidMount: function() {
	}
	,renderCells: function(rdMap) {
		var _gthis = this;
		if(this.props.data == null) {
			haxe_Log.trace("oops...",{ fileName : "src/view/table/Tr.hx", lineNumber : 104, className : "view.table.Tr", methodName : "renderCells"});
			return null;
		}
		var tmp = this.props.row == 1;
		var column = 0;
		var reported = false;
		var _this = this.props.fieldNames;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var fN = _this[i];
			var columnDataState = _gthis.props.columns.h[fN];
			if(columnDataState == null && !reported) {
				haxe_Log.trace(fN,{ fileName : "src/view/table/Tr.hx", lineNumber : 118, className : "view.table.Tr", methodName : "renderCells"});
				reported = true;
			}
			var cD = columnDataState == null ? { show : false} : { cellFormat : columnDataState.cellFormat, className : columnDataState.className, data : rdMap.h[fN], dataDisplay : columnDataState.cellFormat != null ? columnDataState.cellFormat(rdMap.h[fN]) : rdMap.h[fN], flexGrow : columnDataState.flexGrow, name : fN, pos : { column : column++, row : _gthis.props.row}, show : columnDataState.show != false};
			result[i] = cD;
		}
		var cells = result;
		var rCs = [];
		var _g = 0;
		while(_g < cells.length) {
			var cD = cells[_g];
			++_g;
			if(!cD.show) {
				continue;
			}
			var tmp = "r" + cD.pos.row + "c" + cD.pos.column;
			rCs.push(React.createElement(react_ReactType.fromString("td"),{ key : tmp, className : cD.className, 'data-name' : cD.name, 'data-grow' : cD.flexGrow},cD.dataDisplay));
		}
		return rCs;
	}
	,render: function() {
		if(this.props.row == 0) {
			this.ref = this.props.firstTableRow;
		}
		var cl = this.state.selected ? "is-selected" : "";
		if(this.props.data == null) {
			return null;
		}
		if(this.props.row == 0) {
			haxe_Log.trace(this.props.data == null ? "null" : haxe_ds_StringMap.stringify(this.props.data.h),{ fileName : "src/view/table/Tr.hx", lineNumber : 167, className : "view.table.Tr", methodName : "render"});
		}
		return React.createElement(react_ReactType.fromString("tr"),{ key : this.props.row, ref : this.ref, className : cl, 'data-id' : this.props.data.h["id"], 'data-row' : this.props.row, title : this.props.data.h["id"], onClick : $bind(this,this.select)},this.renderCells(this.props.data));
	}
	,select: function(mEvOrID) {
		haxe_Log.trace("" + Std.string(this.props.data.h["id"]) + " selected:" + Std.string(this.state.selected),{ fileName : "src/view/table/Tr.hx", lineNumber : 184, className : "view.table.Tr", methodName : "select"});
		if(!this.props.selectAble) {
			return;
		}
		haxe_Log.trace(Reflect.fields(this.props),{ fileName : "src/view/table/Tr.hx", lineNumber : 187, className : "view.table.Tr", methodName : "select"});
		if(mEvOrID.select == null) {
			try {
				var evt = mEvOrID;
				var tEl = js_Boot.__cast(mEvOrID.target , HTMLElement);
				haxe_Log.trace(tEl.closest("table"),{ fileName : "src/view/table/Tr.hx", lineNumber : 195, className : "view.table.Tr", methodName : "select"});
			} catch( _g ) {
				var ex = haxe_Exception.caught(_g).unwrap();
				haxe_Log.trace(ex,{ fileName : "src/view/table/Tr.hx", lineNumber : 206, className : "view.table.Tr", methodName : "select"});
			}
		}
		if(this.props.parentComponent != null && this.props.parentComponent.props.select != null) {
			if(!this.state.selected) {
				var c = js_Boot.getClass(this.props.parentComponent);
				haxe_Log.trace(Std.string(this.props.data.h["id"]) + ":" + c.__name__,{ fileName : "src/view/table/Tr.hx", lineNumber : 215, className : "view.table.Tr", methodName : "select"});
				if(this.props.parentComponent.props.match == null) {
					this.props.parentComponent.props.select(this.props.data.h["id"],this.props.parentComponent);
				} else {
					var _g = new haxe_ds_StringMap();
					_g.h[this.props.data.h["id"]] = this.props.data;
					var data = _g;
					this.props.parentComponent.props.select(this.props.data.h["id"],data,this.props.parentComponent.props.match);
				}
			} else {
				haxe_Log.trace("unselect",{ fileName : "src/view/table/Tr.hx", lineNumber : 229, className : "view.table.Tr", methodName : "select"});
				if(this.props.parentComponent.props.match == null) {
					this.props.parentComponent.props.select(this.props.data.h["id"],this.props.parentComponent,"Unselect");
				} else {
					this.props.parentComponent.props.select(this.props.data.h["id"],null,this.props.parentComponent.props.match,"Unselect");
				}
			}
		}
		if(this.props.selectAble) {
			this.state = react_ReactUtil.copy(this.state,{ selected : mEvOrID.select ? true : !this.state.selected});
		}
		haxe_Log.trace("selected:" + Std.string(this.state.selected),{ fileName : "src/view/table/Tr.hx", lineNumber : 242, className : "view.table.Tr", methodName : "select"});
		var c = js_Boot.getClass(this.props.parentComponent);
		haxe_Log.trace("props.parentComponent.props.classPath:" + c.__name__,{ fileName : "src/view/table/Tr.hx", lineNumber : 244, className : "view.table.Tr", methodName : "select"});
	}
	,setState: null
	,componentDidUpdate: function(prevProps,prevState) {
		var propsAreEqual = react_ReactUtil.shallowCompare(this.props,prevProps);
		var statesAreEqual = react_ReactUtil.shallowCompare(this.state,prevState);
		var cond = propsAreEqual && statesAreEqual;
		if(cond) {
			var debugProps = Object.create(null);
			debugProps.currentProps = this.props;
			debugProps.prevProps = prevProps;
			$global.console.warn("Warning: avoidable re-render of `Tr`.\n",debugProps);
			if(react_macro_ReactDebugMacro.firstRenderWarning) {
				react_macro_ReactDebugMacro.firstRenderWarning = false;
				$global.console.warn("Make sure your props are flattened, or implement shouldComponentUpdate.\nSee https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\n\nAlso note that legacy context API can trigger false positives if children rely on context. You can hide this warning for a specific component by adding `@:ignoreRenderWarning` meta to its class.");
			}
		}
	}
	,__class__: view_table_Tr
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
App.STYLES = require("App.scss");
App.config = require("config.js").config;
App.devIP = "localhost";
App.flatpickr = require("flatpickr");
App.German = require("flatpickr/dist/l10n/de.js");
App.flat = require("flatpickr/dist/flatpickr.min.css");
App.sprintf = require("sprintf-js").sprintf;
App.modalBox = React.createRef();
App.onResizeComponents = new haxe_ds_List();
App.defaultUrl = "/DevTest";
App.mandator = 1;
App.maxLoginAttempts = 8;
App.displayName = "App";
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
DateTools.DAYS_OF_MONTH = [31,28,31,30,31,30,31,31,30,31,30,31];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
bulma_$components_Footer.displayName = "Footer";
css_FlexFlow.Row = "row";
css_FlexFlow.RowReverse = "row-reverse";
css_FlexFlow.Column = "column";
css_FlexFlow.ColumnReverse = "column-reverse";
css_FlexFlow.NoWrap = "nowrap";
css_FlexFlow.Wrap = "wrap";
css_FlexFlow.WrapReverse = "wrap-reverse";
css_OverflowCompo.Visible = "visible";
css_OverflowCompo.Hidden = "hidden";
css_OverflowCompo.Scroll = "scroll";
css_OverflowCompo.Auto = "auto";
css_TextOverflow.Clip = "clip";
css_TextOverflow.Ellipsis = "ellipsis";
css_VerticalAlign.Baseline = "baseline";
css_VerticalAlign.Sub = "sub";
css_VerticalAlign.Super = "super";
css_VerticalAlign.TextTop = "text-top";
css_VerticalAlign.TextBottom = "text-bottom";
css_VerticalAlign.Middle = "middle";
css_VerticalAlign.Top = "top";
css_VerticalAlign.Bottom = "bottom";
hxbit_Serializer.UID = 0;
hxbit_Serializer.SEQ = 0;
hxbit_Serializer.SEQ_BITS = 8;
hxbit_Serializer.SEQ_MASK = 16777215;
hxbit_Serializer.CLASSES = [];
hxbit_Serializer.CL_BYID = null;
hxbit_Serializer.CLIDS = null;
hxbit_Serializer.__SIGN = null;
hxbit_Serializer.ENUM_CLASSES = new haxe_ds_StringMap();
db_DbQuery.__clid = hxbit_Serializer.registerClass(db_DbQuery);
db_DbRelation.__clid = hxbit_Serializer.registerClass(db_DbRelation);
db_DbUser.__clid = hxbit_Serializer.registerClass(db_DbUser);
debug_Out.suspended = false;
debug_Out.skipFields = [];
debug_Out.skipFunctions = true;
debug_Out.traceToConsole = false;
debug_Out.traceTarget = debug_DebugOutput.NATIVE;
debug_Out.aStack = haxe_CallStack.callStack;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Serializer.BASE64_CODES = null;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
hxbit_Convert.convFuns = new haxe_ds_StringMap();
hxbit_Macros.IN_ENUM_SER = false;
hxbit_Schema.__clid = hxbit_Serializer.registerClass(hxbit_Schema);
model_ORM.__meta__ = { fields : { id : { dataType : ["bigint"]}}};
model_ORM.dsep = ",";
model_Contact.__meta__ = { fields : { mandator : { dataType : ["bigint"]}, creation_date : { dataType : ["timestamp(0) without time zone"]}, status : { dataType : ["character varying(64)"]}, use_email : { dataType : ["boolean"]}, company_name : { dataType : ["character varying(64)"]}, care_of : { dataType : ["character varying(100)"]}, phone_code : { dataType : ["character varying(10)"]}, phone_number : { dataType : ["character varying(18)"]}, fax : { dataType : ["character varying(18)"]}, title : { dataType : ["character varying(64)"]}, first_name : { dataType : ["character varying(32)"]}, last_name : { dataType : ["character varying(32)"]}, address : { dataType : ["character varying(64)"]}, address_2 : { dataType : ["character varying(64)"]}, city : { dataType : ["character varying(50)"]}, postal_code : { dataType : ["character varying(10)"]}, country_code : { dataType : ["character varying(3)"]}, gender : { dataType : ["character varying(64)"]}, date_of_birth : { dataType : ["date"]}, mobile : { dataType : ["character varying(19)"]}, email : { dataType : ["character varying(64)"]}, comments : { dataType : ["character varying(4096)"]}, edited_by : { dataType : ["bigint"]}, merged : { dataType : ["bigint[]"]}, last_updated : { dataType : ["timestamp(0) without time zone"]}, owner : { dataType : ["bigint"]}}};
model_Contact.__rtti = "<class path=\"model.Contact\" params=\"\">\n\t<extends path=\"model.ORM\"/>\n\t<mandator public=\"1\" set=\"accessor\">\n\t\t<x path=\"Int\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"bigint\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</mandator>\n\t<set_mandator set=\"method\" line=\"43\"><f a=\"mandator\">\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></set_mandator>\n\t<creation_date public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"timestamp(0) without time zone\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</creation_date>\n\t<set_creation_date set=\"method\" line=\"53\"><f a=\"creation_date\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_creation_date>\n\t<status public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(64)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</status>\n\t<set_status set=\"method\" line=\"63\"><f a=\"status\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_status>\n\t<use_email public=\"1\" set=\"accessor\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"boolean\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</use_email>\n\t<set_use_email set=\"method\" line=\"73\"><f a=\"use_email\">\n\t<x path=\"Bool\"/>\n\t<x path=\"Bool\"/>\n</f></set_use_email>\n\t<company_name public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(64)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</company_name>\n\t<set_company_name set=\"method\" line=\"83\"><f a=\"company_name\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_company_name>\n\t<care_of public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(100)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</care_of>\n\t<set_care_of set=\"method\" line=\"93\"><f a=\"care_of\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_care_of>\n\t<phone_code public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(10)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</phone_code>\n\t<set_phone_code set=\"method\" line=\"103\"><f a=\"phone_code\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_phone_code>\n\t<phone_number public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(18)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</phone_number>\n\t<set_phone_number set=\"method\" line=\"113\"><f a=\"phone_number\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_phone_number>\n\t<fax public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(18)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</fax>\n\t<set_fax set=\"method\" line=\"123\"><f a=\"fax\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_fax>\n\t<title public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(64)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</title>\n\t<set_title set=\"method\" line=\"133\"><f a=\"title\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_title>\n\t<first_name public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(32)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</first_name>\n\t<set_first_name set=\"method\" line=\"143\"><f a=\"first_name\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_first_name>\n\t<last_name public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(32)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</last_name>\n\t<set_last_name set=\"method\" line=\"153\"><f a=\"last_name\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_last_name>\n\t<address public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(64)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</address>\n\t<set_address set=\"method\" line=\"163\"><f a=\"address\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_address>\n\t<address_2 public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(64)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</address_2>\n\t<set_address_2 set=\"method\" line=\"173\"><f a=\"address_2\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_address_2>\n\t<city public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(50)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</city>\n\t<set_city set=\"method\" line=\"183\"><f a=\"city\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_city>\n\t<postal_code public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(10)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</postal_code>\n\t<set_postal_code set=\"method\" line=\"193\"><f a=\"postal_code\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_postal_code>\n\t<country_code public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(3)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</country_code>\n\t<set_country_code set=\"method\" line=\"203\"><f a=\"country_code\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_country_code>\n\t<gender public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(64)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</gender>\n\t<set_gender set=\"method\" line=\"213\"><f a=\"gender\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_gender>\n\t<date_of_birth public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"date\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</date_of_birth>\n\t<set_date_of_birth set=\"method\" line=\"223\"><f a=\"date_of_birth\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_date_of_birth>\n\t<mobile public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(19)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</mobile>\n\t<set_mobile set=\"method\" line=\"233\"><f a=\"mobile\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_mobile>\n\t<email public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(64)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</email>\n\t<set_email set=\"method\" line=\"243\"><f a=\"email\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_email>\n\t<comments public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"character varying(4096)\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</comments>\n\t<set_comments set=\"method\" line=\"253\"><f a=\"comments\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_comments>\n\t<edited_by public=\"1\" set=\"accessor\">\n\t\t<x path=\"Int\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"bigint\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</edited_by>\n\t<set_edited_by set=\"method\" line=\"263\"><f a=\"edited_by\">\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></set_edited_by>\n\t<merged public=\"1\" set=\"accessor\">\n\t\t<c path=\"Array\"><x path=\"Int\"/></c>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"bigint[]\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</merged>\n\t<set_merged set=\"method\" line=\"273\"><f a=\"merged\">\n\t<c path=\"Array\"><x path=\"Int\"/></c>\n\t<c path=\"Array\"><x path=\"Int\"/></c>\n</f></set_merged>\n\t<last_updated public=\"1\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"timestamp(0) without time zone\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</last_updated>\n\t<set_last_updated set=\"method\" line=\"283\"><f a=\"last_updated\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_last_updated>\n\t<owner public=\"1\" set=\"accessor\">\n\t\t<x path=\"Int\"/>\n\t\t<meta>\n\t\t\t<m n=\"dataType\"><e>\"bigint\"</e></m>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</owner>\n\t<set_owner set=\"method\" line=\"293\"><f a=\"owner\">\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></set_owner>\n\t<new public=\"1\" set=\"method\" line=\"35\"><f a=\"data\">\n\t<t path=\"Map\">\n\t\t<c path=\"String\"/>\n\t\t<c path=\"String\"/>\n\t</t>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":build\"><e>react.jsx.JsxStaticMacro.build()</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
react_DateControl.displayName = "DateControl";
react_DateTimeControl.displayName = "DateTimeControl";
react_ReactDateTimeClock.displayName = "ReactDateTimeClock";
react_macro_ReactDebugMacro.firstRenderWarning = true;
redux_react_Provider.childContextTypes = { store : PropTypes.object.isRequired};
redux_react_Provider.propTypes = { children : PropTypes.element.isRequired};
redux_react_Provider.displayName = "Provider";
shared_DBMetaData.__clid = hxbit_Serializer.registerClass(shared_DBMetaData);
shared_DbData.__clid = hxbit_Serializer.registerClass(shared_DbData);
shared_Utils.kIndex = 0;
tink_core_Noise.Noise = null;
view_DevTest.displayName = "DevTest";
view_DevTest._renderWrapper = (redux_react_ReactRedux.connect(null,view_DevTest.mapDispatchToProps))(react_ReactTypeOf.fromComp(view_DevTest));
view_DevTest.__jsxStatic = view_DevTest._renderWrapper;
view_NavTabs.tabsRendered = 0;
view_NavTabs.displayName = "NavTabs";
view_NavTabs._renderWrapper = react_router_ReactRouter.withRouter(react_ReactType.fromComp(view_NavTabs));
view_NavTabs.__jsxStatic = view_NavTabs._renderWrapper;
view_StatusBar.displayName = "StatusBar";
view_StatusBar._renderWrapper = (redux_react_ReactRedux.connect(view_StatusBar.mapStateToProps))(react_ReactTypeOf.fromComp(view_StatusBar));
view_StatusBar.__jsxStatic = view_StatusBar._renderWrapper;
view_UiView.displayName = "UiView";
view_UiView._renderWrapper = (redux_react_ReactRedux.connect(view_UiView.mapStateToProps))(react_ReactTypeOf.fromComp(view_UiView));
view_UiView.__jsxStatic = view_UiView._renderWrapper;
view_dashboard_model_DBSyncModel.clientListColumns = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["client_id"] = { label : "ID", show : true};
	_g.h["first_name"] = { label : "Vorname", editable : true};
	_g.h["last_name"] = { label : "Name", editable : true};
	_g.h["phone"] = { label : "Telefon"};
	$r = _g;
	return $r;
}(this));
view_dashboard_model_DBSyncModel.userListColumns = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["user_id"] = { label : "ID", show : true};
	_g.h["user"] = { label : "User", editable : false};
	_g.h["full_name"] = { label : "Name", editable : true, flexGrow : 1};
	_g.h["phone_login"] = { label : "Nebenstelle", editable : true, className : "tRight"};
	_g.h["user_group"] = { label : "Gruppe", editable : true};
	$r = _g;
	return $r;
}(this));
view_dashboard_model_DBSyncModel.dataDisplay = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["userList"] = { altGroupPos : 0, columns : view_dashboard_model_DBSyncModel.userListColumns};
	_g.h["clientList"] = { altGroupPos : 0, columns : view_dashboard_model_DBSyncModel.clientListColumns};
	$r = _g;
	return $r;
}(this));
view_grid_Grid.clickDelay = 200;
view_grid_Grid.displayName = "Grid";
view_shared_DateTime.displayName = "DateTime";
view_shared_DateTime._renderWrapper = react_intl_ReactIntl.injectIntl(react_ReactType.fromComp(view_shared_DateTime));
view_shared_DateTime.__jsxStatic = view_shared_DateTime._renderWrapper;
view_shared_Menu.displayName = "Menu";
view_shared_Menu._renderWrapper = react_router_ReactRouter.withRouter(react_ReactType.fromComp(view_shared_Menu));
view_shared_Menu.__jsxStatic = view_shared_Menu._renderWrapper;
view_shared_SLink.displayName = "SLink";
view_shared_SLink._renderWrapper = (redux_react_ReactRedux.connect(view_shared_SLink.mapStateToProps))(react_ReactTypeOf.fromComp(view_shared_SLink));
view_shared_SLink.__jsxStatic = view_shared_SLink._renderWrapper;
view_shared_TabLink.displayName = "TabLink";
view_table_Table.displayName = "Table";
view_table_Tr.displayName = "Tr";
Go.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=app.js.map